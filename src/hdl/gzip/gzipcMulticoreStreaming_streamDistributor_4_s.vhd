-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_streamDistributor_4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    isEOBlocks27_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    isEOBlocks27_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    isEOBlocks27_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    isEOBlocks27_empty_n : IN STD_LOGIC;
    isEOBlocks27_read : OUT STD_LOGIC;
    eoBlocks_0_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    eoBlocks_0_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    eoBlocks_0_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    eoBlocks_0_full_n : IN STD_LOGIC;
    eoBlocks_0_write : OUT STD_LOGIC;
    eoBlocks_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    eoBlocks_1_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    eoBlocks_1_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    eoBlocks_1_full_n : IN STD_LOGIC;
    eoBlocks_1_write : OUT STD_LOGIC;
    eoBlocks_2_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    eoBlocks_2_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    eoBlocks_2_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    eoBlocks_2_full_n : IN STD_LOGIC;
    eoBlocks_2_write : OUT STD_LOGIC;
    eoBlocks_3_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    eoBlocks_3_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    eoBlocks_3_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    eoBlocks_3_full_n : IN STD_LOGIC;
    eoBlocks_3_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_streamDistributor_4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_read_fu_34_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal isEOBlocks27_blk_n : STD_LOGIC;
    signal eoBlocks_0_blk_n : STD_LOGIC;
    signal eoBlocks_1_blk_n : STD_LOGIC;
    signal eoBlocks_2_blk_n : STD_LOGIC;
    signal eoBlocks_3_blk_n : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component gzipcMulticoreStreaming_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (eoBlocks_3_full_n = ap_const_logic_0) or (eoBlocks_2_full_n = ap_const_logic_0) or (eoBlocks_1_full_n = ap_const_logic_0) or (eoBlocks_0_full_n = ap_const_logic_0) or (isEOBlocks27_empty_n = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, isEOBlocks27_empty_n, eoBlocks_0_full_n, eoBlocks_1_full_n, eoBlocks_2_full_n, eoBlocks_3_full_n, ap_done_reg, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(isEOBlocks27_empty_n, eoBlocks_0_full_n, eoBlocks_1_full_n, eoBlocks_2_full_n, eoBlocks_3_full_n, ap_done_reg, ap_start_int)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (eoBlocks_3_full_n = ap_const_logic_0) or (eoBlocks_2_full_n = ap_const_logic_0) or (eoBlocks_1_full_n = ap_const_logic_0) or (eoBlocks_0_full_n = ap_const_logic_0) or (isEOBlocks27_empty_n = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(isEOBlocks27_empty_n, eoBlocks_0_full_n, eoBlocks_1_full_n, eoBlocks_2_full_n, eoBlocks_3_full_n, ap_done_reg, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or (eoBlocks_3_full_n = ap_const_logic_0) or (eoBlocks_2_full_n = ap_const_logic_0) or (eoBlocks_1_full_n = ap_const_logic_0) or (eoBlocks_0_full_n = ap_const_logic_0) or (isEOBlocks27_empty_n = ap_const_logic_0) or (ap_start_int = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, isEOBlocks27_empty_n, eoBlocks_0_full_n, eoBlocks_1_full_n, eoBlocks_2_full_n, eoBlocks_3_full_n, ap_done_reg, tmp_read_fu_34_p2, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (eoBlocks_3_full_n = ap_const_logic_0) or (eoBlocks_2_full_n = ap_const_logic_0) or (eoBlocks_1_full_n = ap_const_logic_0) or (eoBlocks_0_full_n = ap_const_logic_0) or (isEOBlocks27_empty_n = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (tmp_read_fu_34_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, isEOBlocks27_empty_n, eoBlocks_0_full_n, eoBlocks_1_full_n, eoBlocks_2_full_n, eoBlocks_3_full_n, ap_done_reg, ap_loop_exit_ready, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (eoBlocks_3_full_n = ap_const_logic_0) or (eoBlocks_2_full_n = ap_const_logic_0) or (eoBlocks_1_full_n = ap_const_logic_0) or (eoBlocks_0_full_n = ap_const_logic_0) or (isEOBlocks27_empty_n = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, isEOBlocks27_empty_n, eoBlocks_0_full_n, eoBlocks_1_full_n, eoBlocks_2_full_n, eoBlocks_3_full_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (eoBlocks_3_full_n = ap_const_logic_0) or (eoBlocks_2_full_n = ap_const_logic_0) or (eoBlocks_1_full_n = ap_const_logic_0) or (eoBlocks_0_full_n = ap_const_logic_0) or (isEOBlocks27_empty_n = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    eoBlocks_0_blk_n_assign_proc : process(ap_CS_fsm_state1, eoBlocks_0_full_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            eoBlocks_0_blk_n <= eoBlocks_0_full_n;
        else 
            eoBlocks_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    eoBlocks_0_din <= isEOBlocks27_dout;

    eoBlocks_0_write_assign_proc : process(ap_CS_fsm_state1, isEOBlocks27_empty_n, eoBlocks_0_full_n, eoBlocks_1_full_n, eoBlocks_2_full_n, eoBlocks_3_full_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (eoBlocks_3_full_n = ap_const_logic_0) or (eoBlocks_2_full_n = ap_const_logic_0) or (eoBlocks_1_full_n = ap_const_logic_0) or (eoBlocks_0_full_n = ap_const_logic_0) or (isEOBlocks27_empty_n = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            eoBlocks_0_write <= ap_const_logic_1;
        else 
            eoBlocks_0_write <= ap_const_logic_0;
        end if; 
    end process;


    eoBlocks_1_blk_n_assign_proc : process(ap_CS_fsm_state1, eoBlocks_1_full_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            eoBlocks_1_blk_n <= eoBlocks_1_full_n;
        else 
            eoBlocks_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    eoBlocks_1_din <= isEOBlocks27_dout;

    eoBlocks_1_write_assign_proc : process(ap_CS_fsm_state1, isEOBlocks27_empty_n, eoBlocks_0_full_n, eoBlocks_1_full_n, eoBlocks_2_full_n, eoBlocks_3_full_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (eoBlocks_3_full_n = ap_const_logic_0) or (eoBlocks_2_full_n = ap_const_logic_0) or (eoBlocks_1_full_n = ap_const_logic_0) or (eoBlocks_0_full_n = ap_const_logic_0) or (isEOBlocks27_empty_n = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            eoBlocks_1_write <= ap_const_logic_1;
        else 
            eoBlocks_1_write <= ap_const_logic_0;
        end if; 
    end process;


    eoBlocks_2_blk_n_assign_proc : process(ap_CS_fsm_state1, eoBlocks_2_full_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            eoBlocks_2_blk_n <= eoBlocks_2_full_n;
        else 
            eoBlocks_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    eoBlocks_2_din <= isEOBlocks27_dout;

    eoBlocks_2_write_assign_proc : process(ap_CS_fsm_state1, isEOBlocks27_empty_n, eoBlocks_0_full_n, eoBlocks_1_full_n, eoBlocks_2_full_n, eoBlocks_3_full_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (eoBlocks_3_full_n = ap_const_logic_0) or (eoBlocks_2_full_n = ap_const_logic_0) or (eoBlocks_1_full_n = ap_const_logic_0) or (eoBlocks_0_full_n = ap_const_logic_0) or (isEOBlocks27_empty_n = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            eoBlocks_2_write <= ap_const_logic_1;
        else 
            eoBlocks_2_write <= ap_const_logic_0;
        end if; 
    end process;


    eoBlocks_3_blk_n_assign_proc : process(ap_CS_fsm_state1, eoBlocks_3_full_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            eoBlocks_3_blk_n <= eoBlocks_3_full_n;
        else 
            eoBlocks_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    eoBlocks_3_din <= isEOBlocks27_dout;

    eoBlocks_3_write_assign_proc : process(ap_CS_fsm_state1, isEOBlocks27_empty_n, eoBlocks_0_full_n, eoBlocks_1_full_n, eoBlocks_2_full_n, eoBlocks_3_full_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (eoBlocks_3_full_n = ap_const_logic_0) or (eoBlocks_2_full_n = ap_const_logic_0) or (eoBlocks_1_full_n = ap_const_logic_0) or (eoBlocks_0_full_n = ap_const_logic_0) or (isEOBlocks27_empty_n = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            eoBlocks_3_write <= ap_const_logic_1;
        else 
            eoBlocks_3_write <= ap_const_logic_0;
        end if; 
    end process;


    isEOBlocks27_blk_n_assign_proc : process(ap_CS_fsm_state1, isEOBlocks27_empty_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            isEOBlocks27_blk_n <= isEOBlocks27_empty_n;
        else 
            isEOBlocks27_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    isEOBlocks27_read_assign_proc : process(ap_CS_fsm_state1, isEOBlocks27_empty_n, eoBlocks_0_full_n, eoBlocks_1_full_n, eoBlocks_2_full_n, eoBlocks_3_full_n, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (eoBlocks_3_full_n = ap_const_logic_0) or (eoBlocks_2_full_n = ap_const_logic_0) or (eoBlocks_1_full_n = ap_const_logic_0) or (eoBlocks_0_full_n = ap_const_logic_0) or (isEOBlocks27_empty_n = ap_const_logic_0) or (ap_start_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            isEOBlocks27_read <= ap_const_logic_1;
        else 
            isEOBlocks27_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_read_fu_34_p2 <= isEOBlocks27_dout;
end behav;
