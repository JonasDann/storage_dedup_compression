-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_simpleStreamUpsizer_16_64_4_17 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    huffStream_1_dout : IN STD_LOGIC_VECTOR (17 downto 0);
    huffStream_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    huffStream_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    huffStream_1_empty_n : IN STD_LOGIC;
    huffStream_1_read : OUT STD_LOGIC;
    mergeStream_1_din : OUT STD_LOGIC_VECTOR (67 downto 0);
    mergeStream_1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    mergeStream_1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    mergeStream_1_full_n : IN STD_LOGIC;
    mergeStream_1_write : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_simpleStreamUpsizer_16_64_4_17 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv68_0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal huffStream_1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mergeStream_1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_data_V_fu_95_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_V_reg_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_V_30_reg_149 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_strobe_V_fu_109_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_strobe_V_reg_154 : STD_LOGIC_VECTOR (1 downto 0);
    signal loop_continue_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_continue_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_start : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_done : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_idle : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_ready : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_huffStream_1_read : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_mergeStream_1_din : STD_LOGIC_VECTOR (67 downto 0);
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_mergeStream_1_write : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_outVal_V_21_out_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_outVal_V_21_out_o_ap_vld : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_inVal_V_48_out_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_inVal_V_48_out_o_ap_vld : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_last_1_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_last_1_out_ap_vld : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal outVal_V_fu_58 : STD_LOGIC_VECTOR (63 downto 0);
    signal inVal_V_fu_54 : STD_LOGIC_VECTOR (15 downto 0);
    signal last_load_fu_125_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        huffStream_1_dout : IN STD_LOGIC_VECTOR (17 downto 0);
        huffStream_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        huffStream_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        huffStream_1_empty_n : IN STD_LOGIC;
        huffStream_1_read : OUT STD_LOGIC;
        mergeStream_1_din : OUT STD_LOGIC_VECTOR (67 downto 0);
        mergeStream_1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        mergeStream_1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        mergeStream_1_full_n : IN STD_LOGIC;
        mergeStream_1_write : OUT STD_LOGIC;
        tmp_data_V_38 : IN STD_LOGIC_VECTOR (7 downto 0);
        tmp_data_V : IN STD_LOGIC_VECTOR (7 downto 0);
        tmp_strobe_V_27 : IN STD_LOGIC_VECTOR (1 downto 0);
        loop_continue : IN STD_LOGIC_VECTOR (0 downto 0);
        outVal_V_21_out_i : IN STD_LOGIC_VECTOR (63 downto 0);
        outVal_V_21_out_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        outVal_V_21_out_o_ap_vld : OUT STD_LOGIC;
        inVal_V_48_out_i : IN STD_LOGIC_VECTOR (15 downto 0);
        inVal_V_48_out_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        inVal_V_48_out_o_ap_vld : OUT STD_LOGIC;
        last_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        last_1_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80 : component gzipcMulticoreStreaming_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_start,
        ap_done => grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_done,
        ap_idle => grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_idle,
        ap_ready => grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_ready,
        huffStream_1_dout => huffStream_1_dout,
        huffStream_1_num_data_valid => ap_const_lv3_0,
        huffStream_1_fifo_cap => ap_const_lv3_0,
        huffStream_1_empty_n => huffStream_1_empty_n,
        huffStream_1_read => grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_huffStream_1_read,
        mergeStream_1_din => grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_mergeStream_1_din,
        mergeStream_1_num_data_valid => ap_const_lv11_0,
        mergeStream_1_fifo_cap => ap_const_lv11_0,
        mergeStream_1_full_n => mergeStream_1_full_n,
        mergeStream_1_write => grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_mergeStream_1_write,
        tmp_data_V_38 => tmp_data_V_30_reg_149,
        tmp_data_V => tmp_data_V_reg_144,
        tmp_strobe_V_27 => tmp_strobe_V_reg_154,
        loop_continue => loop_continue_reg_159,
        outVal_V_21_out_i => outVal_V_fu_58,
        outVal_V_21_out_o => grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_outVal_V_21_out_o,
        outVal_V_21_out_o_ap_vld => grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_outVal_V_21_out_o_ap_vld,
        inVal_V_48_out_i => inVal_V_fu_54,
        inVal_V_48_out_o => grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_inVal_V_48_out_o,
        inVal_V_48_out_o_ap_vld => grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_inVal_V_48_out_o_ap_vld,
        last_1_out => grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_last_1_out,
        last_1_out_ap_vld => grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_last_1_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((mergeStream_1_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (last_load_fu_125_p1 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_ready = ap_const_logic_1)) then 
                    grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_inVal_V_48_out_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                inVal_V_fu_54 <= grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_inVal_V_48_out_o;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                loop_continue_reg_159 <= loop_continue_fu_119_p2;
                tmp_data_V_30_reg_149 <= huffStream_1_dout(15 downto 8);
                tmp_data_V_reg_144 <= tmp_data_V_fu_95_p1;
                tmp_strobe_V_reg_154 <= huffStream_1_dout(17 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_outVal_V_21_out_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                outVal_V_fu_58 <= grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_outVal_V_21_out_o;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, huffStream_1_empty_n, mergeStream_1_full_n, ap_CS_fsm_state2, ap_CS_fsm_state5, grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_done, ap_CS_fsm_state4, last_load_fu_125_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((huffStream_1_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((mergeStream_1_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (last_load_fu_125_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((mergeStream_1_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (last_load_fu_125_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(huffStream_1_empty_n)
    begin
        if ((huffStream_1_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_done)
    begin
        if ((grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(mergeStream_1_full_n)
    begin
        if ((mergeStream_1_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, mergeStream_1_full_n, ap_CS_fsm_state5, last_load_fu_125_p1)
    begin
        if (((mergeStream_1_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (last_load_fu_125_p1 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(mergeStream_1_full_n, ap_CS_fsm_state5, last_load_fu_125_p1)
    begin
        if (((mergeStream_1_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (last_load_fu_125_p1 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_start <= grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_ap_start_reg;

    huffStream_1_blk_n_assign_proc : process(huffStream_1_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            huffStream_1_blk_n <= huffStream_1_empty_n;
        else 
            huffStream_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    huffStream_1_read_assign_proc : process(huffStream_1_empty_n, ap_CS_fsm_state2, grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_huffStream_1_read, ap_CS_fsm_state4)
    begin
        if (((huffStream_1_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            huffStream_1_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            huffStream_1_read <= grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_huffStream_1_read;
        else 
            huffStream_1_read <= ap_const_logic_0;
        end if; 
    end process;

    last_load_fu_125_p1 <= grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_last_1_out;
    loop_continue_fu_119_p2 <= "0" when (tmp_strobe_V_fu_109_p4 = ap_const_lv2_0) else "1";

    mergeStream_1_blk_n_assign_proc : process(mergeStream_1_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mergeStream_1_blk_n <= mergeStream_1_full_n;
        else 
            mergeStream_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mergeStream_1_din_assign_proc : process(mergeStream_1_full_n, ap_CS_fsm_state5, grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_mergeStream_1_din, ap_CS_fsm_state4)
    begin
        if (((mergeStream_1_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mergeStream_1_din <= ap_const_lv68_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mergeStream_1_din <= grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_mergeStream_1_din;
        else 
            mergeStream_1_din <= grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_mergeStream_1_din;
        end if; 
    end process;


    mergeStream_1_write_assign_proc : process(mergeStream_1_full_n, ap_CS_fsm_state5, grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_mergeStream_1_write, ap_CS_fsm_state4)
    begin
        if (((mergeStream_1_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mergeStream_1_write <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mergeStream_1_write <= grp_simpleStreamUpsizer_16_64_4_17_Pipeline_stream_upsizer_main_fu_80_mergeStream_1_write;
        else 
            mergeStream_1_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_V_fu_95_p1 <= huffStream_1_dout(8 - 1 downto 0);
    tmp_strobe_V_fu_109_p4 <= huffStream_1_dout(17 downto 16);
end behav;
