-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_sendHuffData_unsigned_char_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    intlHufCodeStream_dout : IN STD_LOGIC_VECTOR (58 downto 0);
    intlHufCodeStream_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    intlHufCodeStream_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    intlHufCodeStream_empty_n : IN STD_LOGIC;
    intlHufCodeStream_read : OUT STD_LOGIC;
    hufSerialCodeStream2_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    hufSerialCodeStream2_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    hufSerialCodeStream2_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    hufSerialCodeStream2_full_n : IN STD_LOGIC;
    hufSerialCodeStream2_write : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_sendHuffData_unsigned_char_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln1081_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1081_1_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op29_read_state1 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln1081_2_reg_466 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal intlHufCodeStream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal hufSerialCodeStream2_blk_n : STD_LOGIC;
    signal icmp_ln1081_reg_438 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1081_1_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal inHfVal_data_code_V_3_fu_174_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_328_p5 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_42_fu_340_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1081_2_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_p_1_0_0_0195_reg_123 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter1_p_1_0_0_0195_reg_123 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter2_p_1_0_0_0195_reg_123 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0_0_0_0193_reg_132 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_p_0_0_0_0193_reg_132 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter2_p_0_0_0_0193_reg_132 : STD_LOGIC_VECTOR (14 downto 0);
    signal idx_V_fu_74 : STD_LOGIC_VECTOR (2 downto 0);
    signal idx_V_1_fu_322_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal cnt_V_fu_78 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln232_fu_238_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal cnt_V_1_fu_290_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_cnt_V_load : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_cnt_V_load_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal inHfVal_strobe_V_fu_82 : STD_LOGIC_VECTOR (1 downto 0);
    signal inHfVal_strobe_V_1_fu_228_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_inHfVal_strobe_V_2 : STD_LOGIC_VECTOR (1 downto 0);
    signal inHfVal_data_code_V_fu_86 : STD_LOGIC_VECTOR (14 downto 0);
    signal inHfVal_data_code_V_1_fu_90 : STD_LOGIC_VECTOR (14 downto 0);
    signal inHfVal_data_code_V_2_fu_94 : STD_LOGIC_VECTOR (14 downto 0);
    signal inHfVal_data_bitlen_V_fu_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal inHfVal_data_bitlen_V_1_fu_102 : STD_LOGIC_VECTOR (3 downto 0);
    signal inHfVal_data_bitlen_V_2_fu_106 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_128 : BOOLEAN;
    signal ap_condition_132 : BOOLEAN;
    signal ap_condition_89 : BOOLEAN;
    signal ap_condition_328 : BOOLEAN;
    signal ap_condition_332 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_mux_33_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        din3 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component gzipcMulticoreStreaming_mux_33_4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component gzipcMulticoreStreaming_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mux_33_15_1_1_U1756 : component gzipcMulticoreStreaming_mux_33_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        din2_WIDTH => 15,
        din3_WIDTH => 3,
        dout_WIDTH => 15)
    port map (
        din0 => inHfVal_data_code_V_fu_86,
        din1 => inHfVal_data_code_V_1_fu_90,
        din2 => inHfVal_data_code_V_2_fu_94,
        din3 => idx_V_fu_74,
        dout => tmp_s_fu_328_p5);

    mux_33_4_1_1_U1757 : component gzipcMulticoreStreaming_mux_33_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 3,
        dout_WIDTH => 4)
    port map (
        din0 => inHfVal_data_bitlen_V_fu_98,
        din1 => inHfVal_data_bitlen_V_1_fu_102,
        din2 => inHfVal_data_bitlen_V_2_fu_106,
        din3 => idx_V_fu_74,
        dout => tmp_42_fu_340_p5);

    flow_control_loop_pipe_U : component gzipcMulticoreStreaming_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_p_0_0_0_0193_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_128)) then
                if (((icmp_ln1081_1_fu_168_p2 = ap_const_lv1_1) and (icmp_ln1081_fu_159_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_p_0_0_0_0193_reg_132 <= inHfVal_data_code_V_3_fu_174_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_0_0_0_0193_reg_132 <= ap_phi_reg_pp0_iter0_p_0_0_0_0193_reg_132;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_p_1_0_0_0195_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_128)) then
                if (((icmp_ln1081_1_fu_168_p2 = ap_const_lv1_1) and (icmp_ln1081_fu_159_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_p_1_0_0_0195_reg_123 <= intlHufCodeStream_dout(18 downto 15);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_1_0_0_0195_reg_123 <= ap_phi_reg_pp0_iter0_p_1_0_0_0195_reg_123;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_p_0_0_0_0193_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_132)) then
                if (((icmp_ln1081_reg_438 = ap_const_lv1_0) and (icmp_ln1081_1_reg_442 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_p_0_0_0_0193_reg_132 <= tmp_s_fu_328_p5;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_p_0_0_0_0193_reg_132 <= ap_phi_reg_pp0_iter1_p_0_0_0_0193_reg_132;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_p_1_0_0_0195_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_132)) then
                if (((icmp_ln1081_reg_438 = ap_const_lv1_0) and (icmp_ln1081_1_reg_442 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_p_1_0_0_0195_reg_123 <= tmp_42_fu_340_p5;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_p_1_0_0_0195_reg_123 <= ap_phi_reg_pp0_iter1_p_1_0_0_0195_reg_123;
                end if;
            end if; 
        end if;
    end process;

    cnt_V_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_128)) then
                if ((icmp_ln1081_fu_159_p2 = ap_const_lv1_0)) then 
                    cnt_V_fu_78 <= cnt_V_1_fu_290_p2;
                elsif (((icmp_ln1081_1_fu_168_p2 = ap_const_lv1_1) and (icmp_ln1081_fu_159_p2 = ap_const_lv1_0))) then 
                    cnt_V_fu_78 <= zext_ln232_fu_238_p1;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    cnt_V_fu_78 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    idx_V_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_332)) then 
                    idx_V_fu_74 <= ap_const_lv3_1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    idx_V_fu_74 <= ap_const_lv3_0;
                elsif ((ap_const_boolean_1 = ap_condition_328)) then 
                    idx_V_fu_74 <= idx_V_1_fu_322_p2;
                end if;
            end if; 
        end if;
    end process;

    inHfVal_strobe_V_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_128)) then
                if (((icmp_ln1081_1_fu_168_p2 = ap_const_lv1_1) and (icmp_ln1081_fu_159_p2 = ap_const_lv1_0))) then 
                    inHfVal_strobe_V_fu_82 <= intlHufCodeStream_dout(58 downto 57);
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    inHfVal_strobe_V_fu_82 <= ap_const_lv2_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln1081_2_reg_466 <= icmp_ln1081_2_fu_360_p2;
                icmp_ln1081_reg_438 <= icmp_ln1081_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1081_fu_159_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1081_1_reg_442 <= icmp_ln1081_1_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1081_1_fu_168_p2 = ap_const_lv1_1) and (icmp_ln1081_fu_159_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                inHfVal_data_bitlen_V_1_fu_102 <= intlHufCodeStream_dout(37 downto 34);
                inHfVal_data_bitlen_V_2_fu_106 <= intlHufCodeStream_dout(56 downto 53);
                inHfVal_data_bitlen_V_fu_98 <= intlHufCodeStream_dout(18 downto 15);
                inHfVal_data_code_V_1_fu_90 <= intlHufCodeStream_dout(33 downto 19);
                inHfVal_data_code_V_2_fu_94 <= intlHufCodeStream_dout(52 downto 38);
                inHfVal_data_code_V_fu_86 <= inHfVal_data_code_V_3_fu_174_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, intlHufCodeStream_empty_n, ap_predicate_op29_read_state1, ap_done_reg, hufSerialCodeStream2_full_n, icmp_ln1081_2_reg_466, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((icmp_ln1081_2_reg_466 = ap_const_lv1_0) and (hufSerialCodeStream2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op29_read_state1 = ap_const_boolean_1) and (intlHufCodeStream_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, intlHufCodeStream_empty_n, ap_predicate_op29_read_state1, ap_done_reg, hufSerialCodeStream2_full_n, icmp_ln1081_2_reg_466, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((icmp_ln1081_2_reg_466 = ap_const_lv1_0) and (hufSerialCodeStream2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op29_read_state1 = ap_const_boolean_1) and (intlHufCodeStream_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, intlHufCodeStream_empty_n, ap_predicate_op29_read_state1, ap_done_reg, hufSerialCodeStream2_full_n, icmp_ln1081_2_reg_466, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((icmp_ln1081_2_reg_466 = ap_const_lv1_0) and (hufSerialCodeStream2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op29_read_state1 = ap_const_boolean_1) and (intlHufCodeStream_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(intlHufCodeStream_empty_n, ap_predicate_op29_read_state1, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op29_read_state1 = ap_const_boolean_1) and (intlHufCodeStream_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(hufSerialCodeStream2_full_n, icmp_ln1081_2_reg_466)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((icmp_ln1081_2_reg_466 = ap_const_lv1_0) and (hufSerialCodeStream2_full_n = ap_const_logic_0));
    end process;


    ap_condition_128_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_128 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_132_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_132 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_328_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln1081_reg_438, icmp_ln1081_1_reg_442)
    begin
                ap_condition_328 <= ((icmp_ln1081_reg_438 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1081_1_reg_442 = ap_const_lv1_0));
    end process;


    ap_condition_332_assign_proc : process(icmp_ln1081_fu_159_p2, icmp_ln1081_1_fu_168_p2, ap_start_int)
    begin
                ap_condition_332 <= ((icmp_ln1081_1_fu_168_p2 = ap_const_lv1_1) and (icmp_ln1081_fu_159_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_condition_89_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_start_int)
    begin
                ap_condition_89 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1081_fu_159_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1081_fu_159_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_phi_reg_pp0_iter0_p_0_0_0_0193_reg_132 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_p_1_0_0_0195_reg_123 <= "XXXX";

    ap_predicate_op29_read_state1_assign_proc : process(icmp_ln1081_fu_159_p2, icmp_ln1081_1_fu_168_p2)
    begin
                ap_predicate_op29_read_state1 <= ((icmp_ln1081_1_fu_168_p2 = ap_const_lv1_1) and (icmp_ln1081_fu_159_p2 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_cnt_V_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, cnt_V_fu_78, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_cnt_V_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_cnt_V_load <= cnt_V_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_cnt_V_load_1_assign_proc : process(icmp_ln1081_fu_159_p2, icmp_ln1081_1_fu_168_p2, ap_loop_init, cnt_V_fu_78, zext_ln232_fu_238_p1, ap_condition_89)
    begin
        if ((ap_const_boolean_1 = ap_condition_89)) then
            if (((icmp_ln1081_1_fu_168_p2 = ap_const_lv1_1) and (icmp_ln1081_fu_159_p2 = ap_const_lv1_0))) then 
                ap_sig_allocacmp_cnt_V_load_1 <= zext_ln232_fu_238_p1;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_cnt_V_load_1 <= ap_const_lv3_0;
            else 
                ap_sig_allocacmp_cnt_V_load_1 <= cnt_V_fu_78;
            end if;
        else 
            ap_sig_allocacmp_cnt_V_load_1 <= cnt_V_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_inHfVal_strobe_V_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, inHfVal_strobe_V_fu_82, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_inHfVal_strobe_V_2 <= ap_const_lv2_1;
        else 
            ap_sig_allocacmp_inHfVal_strobe_V_2 <= inHfVal_strobe_V_fu_82;
        end if; 
    end process;

    cnt_V_1_fu_290_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_cnt_V_load_1) + unsigned(ap_const_lv3_7));

    hufSerialCodeStream2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, hufSerialCodeStream2_full_n, icmp_ln1081_2_reg_466, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1081_2_reg_466 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            hufSerialCodeStream2_blk_n <= hufSerialCodeStream2_full_n;
        else 
            hufSerialCodeStream2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hufSerialCodeStream2_din <= ((ap_const_lv1_1 & ap_phi_reg_pp0_iter2_p_1_0_0_0195_reg_123) & ap_phi_reg_pp0_iter2_p_0_0_0_0193_reg_132);

    hufSerialCodeStream2_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1081_2_reg_466, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1081_2_reg_466 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            hufSerialCodeStream2_write <= ap_const_logic_1;
        else 
            hufSerialCodeStream2_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1081_1_fu_168_p2 <= "1" when (ap_sig_allocacmp_cnt_V_load = ap_const_lv3_0) else "0";
    icmp_ln1081_2_fu_360_p2 <= "1" when (inHfVal_strobe_V_fu_82 = ap_const_lv2_0) else "0";
    icmp_ln1081_fu_159_p2 <= "1" when (ap_sig_allocacmp_inHfVal_strobe_V_2 = ap_const_lv2_0) else "0";
    idx_V_1_fu_322_p2 <= std_logic_vector(unsigned(idx_V_fu_74) + unsigned(ap_const_lv3_1));
    inHfVal_data_code_V_3_fu_174_p1 <= intlHufCodeStream_dout(15 - 1 downto 0);
    inHfVal_strobe_V_1_fu_228_p4 <= intlHufCodeStream_dout(58 downto 57);

    intlHufCodeStream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, intlHufCodeStream_empty_n, ap_predicate_op29_read_state1, ap_done_reg, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (ap_predicate_op29_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            intlHufCodeStream_blk_n <= intlHufCodeStream_empty_n;
        else 
            intlHufCodeStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    intlHufCodeStream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_predicate_op29_read_state1, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op29_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            intlHufCodeStream_read <= ap_const_logic_1;
        else 
            intlHufCodeStream_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln232_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inHfVal_strobe_V_1_fu_228_p4),3));
end behav;
