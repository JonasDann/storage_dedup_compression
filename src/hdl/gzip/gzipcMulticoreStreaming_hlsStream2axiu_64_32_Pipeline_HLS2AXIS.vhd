-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_hlsStream2axiu_64_32_Pipeline_HLS2AXIS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outStream_dout : IN STD_LOGIC_VECTOR (67 downto 0);
    outStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    outStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    outStream_empty_n : IN STD_LOGIC;
    outStream_read : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    p_Result_86 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_Result_s : IN STD_LOGIC_VECTOR (63 downto 0);
    strb_V_1_ph : IN STD_LOGIC_VECTOR (3 downto 0);
    t1_last_V_ph : IN STD_LOGIC_VECTOR (0 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (31 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of gzipcMulticoreStreaming_hlsStream2axiu_64_32_Pipeline_HLS2AXIS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln1069_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln1069_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal outStream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal t1_last_V_reg_165 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal strb_V_1_reg_415 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_load_reg_424 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_strobe_V_reg_429 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1073_2_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_2_reg_439 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_4_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_4_reg_444 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_306_reg_449 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal t1_user_V_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_user_V_2_fu_309_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal strb_V_fu_100 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_s_fu_104 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_75_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal outSize_V_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal outSize_V_1_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_fu_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_76_fu_343_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_227_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_305_fu_243_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1069_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1065_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_7_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_6_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_5_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_3_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    outSize_V_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    outSize_V_fu_108 <= ap_const_lv32_0;
                elsif (((icmp_ln1069_reg_420 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    outSize_V_fu_108 <= outSize_V_1_fu_291_p2;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_3_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    p_Val2_3_fu_112 <= p_Result_86;
                elsif (((icmp_ln1069_reg_420 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    p_Val2_3_fu_112 <= p_Result_76_fu_343_p9;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_s_fu_104 <= p_Result_s;
                elsif (((icmp_ln1069_fu_204_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_Val2_s_fu_104 <= p_Result_75_fu_223_p1;
                end if;
            end if; 
        end if;
    end process;

    strb_V_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    strb_V_fu_100 <= strb_V_1_ph;
                elsif (((icmp_ln1069_fu_204_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    strb_V_fu_100 <= outStream_dout(67 downto 64);
                end if;
            end if; 
        end if;
    end process;

    t1_last_V_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                t1_last_V_reg_165 <= t1_last_V_ph;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1069_reg_420 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                t1_last_V_reg_165 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    t1_user_V_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    t1_user_V_fu_96 <= ap_const_lv32_0;
                elsif (((icmp_ln1069_reg_420 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    t1_user_V_fu_96 <= t1_user_V_2_fu_309_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1069_reg_420 <= icmp_ln1069_fu_204_p2;
                strb_V_1_reg_415 <= strb_V_fu_100;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1069_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1073_2_reg_439 <= icmp_ln1073_2_fu_237_p2;
                icmp_ln1073_4_reg_444 <= icmp_ln1073_4_fu_253_p2;
                p_Val2_load_reg_424 <= p_Val2_s_fu_104;
                tmp_306_reg_449 <= outStream_dout(67 downto 67);
                tmp_strobe_V_reg_429 <= outStream_dout(67 downto 64);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, outStream_empty_n, icmp_ln1069_fu_204_p2, outStream_TREADY, icmp_ln1069_reg_420)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln1069_reg_420 = ap_const_lv1_0) and (outStream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln1069_fu_204_p2 = ap_const_lv1_0) and (outStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, outStream_empty_n, icmp_ln1069_fu_204_p2, outStream_TREADY, icmp_ln1069_reg_420, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln1069_reg_420 = ap_const_lv1_0) and (outStream_TREADY = ap_const_logic_0)))) or ((icmp_ln1069_fu_204_p2 = ap_const_lv1_0) and (outStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, outStream_empty_n, icmp_ln1069_fu_204_p2, outStream_TREADY, icmp_ln1069_reg_420, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln1069_reg_420 = ap_const_lv1_0) and (outStream_TREADY = ap_const_logic_0)))) or ((icmp_ln1069_fu_204_p2 = ap_const_lv1_0) and (outStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(outStream_empty_n, icmp_ln1069_fu_204_p2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln1069_fu_204_p2 = ap_const_lv1_0) and (outStream_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(outStream_TREADY, icmp_ln1069_reg_420)
    begin
                ap_block_state3_io <= ((icmp_ln1069_reg_420 = ap_const_lv1_0) and (outStream_TREADY = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(outStream_TREADY, icmp_ln1069_reg_420)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((icmp_ln1069_reg_420 = ap_const_lv1_0) and (outStream_TREADY = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1069_fu_204_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1069_fu_204_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1065_fu_297_p2 <= "1" when (tmp_strobe_V_reg_429 = ap_const_lv4_0) else "0";
    icmp_ln1069_fu_204_p2 <= "1" when (strb_V_fu_100 = ap_const_lv4_0) else "0";
    icmp_ln1073_2_fu_237_p2 <= "0" when (tmp_fu_227_p4 = ap_const_lv3_0) else "1";
    icmp_ln1073_3_fu_323_p2 <= "1" when (unsigned(tmp_strobe_V_reg_429) > unsigned(ap_const_lv4_2)) else "0";
    icmp_ln1073_4_fu_253_p2 <= "0" when (tmp_305_fu_243_p4 = ap_const_lv2_0) else "1";
    icmp_ln1073_5_fu_328_p2 <= "1" when (unsigned(tmp_strobe_V_reg_429) > unsigned(ap_const_lv4_4)) else "0";
    icmp_ln1073_6_fu_333_p2 <= "1" when (unsigned(tmp_strobe_V_reg_429) > unsigned(ap_const_lv4_5)) else "0";
    icmp_ln1073_7_fu_338_p2 <= "1" when (unsigned(tmp_strobe_V_reg_429) > unsigned(ap_const_lv4_6)) else "0";
    icmp_ln1073_fu_318_p2 <= "0" when (tmp_strobe_V_reg_429 = ap_const_lv4_0) else "1";
    outSize_V_1_fu_291_p2 <= std_logic_vector(unsigned(zext_ln1069_fu_288_p1) + unsigned(outSize_V_fu_108));
    outStream_TDATA <= p_Val2_load_reg_424;

    outStream_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, outStream_TREADY, icmp_ln1069_reg_420, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1069_reg_420 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outStream_TDATA_blk_n <= outStream_TREADY;
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TKEEP <= p_Val2_3_fu_112;
    outStream_TLAST <= (t1_last_V_reg_165 or icmp_ln1065_fu_297_p2);
    outStream_TSTRB <= p_Val2_3_fu_112;
    outStream_TUSER <= 
        outSize_V_1_fu_291_p2 when (icmp_ln1065_fu_297_p2(0) = '1') else 
        t1_user_V_fu_96;

    outStream_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1069_reg_420, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1069_reg_420 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outStream_TVALID <= ap_const_logic_1;
        else 
            outStream_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    outStream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, outStream_empty_n, icmp_ln1069_fu_204_p2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1069_fu_204_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outStream_blk_n <= outStream_empty_n;
        else 
            outStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    outStream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1069_fu_204_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1069_fu_204_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outStream_read <= ap_const_logic_1;
        else 
            outStream_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_75_fu_223_p1 <= outStream_dout(64 - 1 downto 0);
    p_Result_76_fu_343_p9 <= (((((((tmp_306_reg_449 & icmp_ln1073_7_fu_338_p2) & icmp_ln1073_6_fu_333_p2) & icmp_ln1073_5_fu_328_p2) & icmp_ln1073_4_reg_444) & icmp_ln1073_3_fu_323_p2) & icmp_ln1073_2_reg_439) & icmp_ln1073_fu_318_p2);
    t1_user_V_2_fu_309_p3 <= 
        outSize_V_1_fu_291_p2 when (icmp_ln1065_fu_297_p2(0) = '1') else 
        t1_user_V_fu_96;
    tmp_305_fu_243_p4 <= outStream_dout(67 downto 66);
    tmp_fu_227_p4 <= outStream_dout(67 downto 65);
    zext_ln1069_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(strb_V_1_reg_415),32));
end behav;
