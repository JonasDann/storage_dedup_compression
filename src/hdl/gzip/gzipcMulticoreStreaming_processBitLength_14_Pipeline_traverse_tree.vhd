-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_processBitLength_14_Pipeline_traverse_tree is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_22 : IN STD_LOGIC_VECTOR (15 downto 0);
    parent_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    parent_V_ce0 : OUT STD_LOGIC;
    parent_V_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    temp_array_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_array_V_ce0 : OUT STD_LOGIC;
    temp_array_V_we0 : OUT STD_LOGIC;
    temp_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    temp_array_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    left_V_reload : IN STD_LOGIC_VECTOR (18 downto 0);
    right_V_3_reload : IN STD_LOGIC_VECTOR (18 downto 0);
    length_histogram_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    length_histogram_V_ce0 : OUT STD_LOGIC;
    length_histogram_V_we0 : OUT STD_LOGIC;
    length_histogram_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    length_histogram_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    length_histogram_V_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    length_histogram_V_2_ce0 : OUT STD_LOGIC;
    length_histogram_V_2_we0 : OUT STD_LOGIC;
    length_histogram_V_2_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    length_histogram_V_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of gzipcMulticoreStreaming_processBitLength_14_Pipeline_traverse_tree is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal tmp_reg_375 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_fu_178_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln768_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln768_reg_379 : STD_LOGIC_VECTOR (63 downto 0);
    signal is_left_internal_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_left_internal_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_left_internal_reg_390_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal is_right_internal_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_right_internal_reg_395 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_right_internal_reg_395_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln773_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln773_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln773_reg_400_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal addr_cmp_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_array_V_load_reg_414 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal trunc_ln768_1_fu_277_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln768_1_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln768_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln768_reg_423 : STD_LOGIC_VECTOR (0 downto 0);
    signal length_histogram_V_addr_reg_428 : STD_LOGIC_VECTOR (2 downto 0);
    signal length_histogram_V_2_addr_reg_433 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln886_fu_348_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln886_reg_438 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln587_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln886_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg_fu_70 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_74 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln261_fu_293_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sh_fu_78 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_235_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_i_32 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln599_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1027_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_196_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_205_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_3_fu_217_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal reuse_select_fu_267_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln768_fu_273_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal length_fu_281_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln2_fu_305_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln886_fu_321_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln886_1_fu_328_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_339_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln886_1_fu_335_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_mux_21_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_21_12_1_1_U1670 : component gzipcMulticoreStreaming_mux_21_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 1,
        dout_WIDTH => 12)
    port map (
        din0 => length_histogram_V_q0,
        din1 => length_histogram_V_2_q0,
        din2 => xor_ln768_reg_423,
        dout => tmp_s_fu_339_p4);

    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    reuse_addr_reg_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                reuse_addr_reg_fu_70 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((tmp_reg_375 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reuse_addr_reg_fu_70 <= zext_ln768_reg_379;
            end if; 
        end if;
    end process;

    reuse_reg_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_reg_fu_74 <= ap_const_lv14_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    reuse_reg_fu_74 <= add_ln261_fu_293_p2;
                end if;
            end if; 
        end if;
    end process;

    sh_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_fu_178_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    sh_fu_78 <= i_fu_235_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    sh_fu_78 <= i_22;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (or_ln773_reg_400_pp0_iter1_reg = ap_const_lv1_1))) then
                add_ln886_reg_438 <= add_ln886_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_375 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                addr_cmp_reg_409 <= addr_cmp_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_178_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                is_left_internal_reg_390 <= is_left_internal_fu_211_p2;
                is_right_internal_reg_395 <= is_right_internal_fu_223_p2;
                or_ln773_reg_400 <= or_ln773_fu_229_p2;
                    zext_ln768_reg_379(15 downto 0) <= zext_ln768_fu_200_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                is_left_internal_reg_390_pp0_iter1_reg <= is_left_internal_reg_390;
                is_right_internal_reg_395_pp0_iter1_reg <= is_right_internal_reg_395;
                or_ln773_reg_400_pp0_iter1_reg <= or_ln773_reg_400;
                tmp_reg_375 <= ap_sig_allocacmp_i_32(15 downto 15);
                trunc_ln768_1_reg_419 <= trunc_ln768_1_fu_277_p1;
                xor_ln768_reg_423 <= xor_ln768_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln773_reg_400 = ap_const_lv1_1))) then
                length_histogram_V_2_addr_reg_433 <= zext_ln886_fu_315_p1(3 - 1 downto 0);
                length_histogram_V_addr_reg_428 <= zext_ln886_fu_315_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_375 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                temp_array_V_load_reg_414 <= temp_array_V_q0;
            end if;
        end if;
    end process;
    zext_ln768_reg_379(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln261_fu_293_p2 <= std_logic_vector(unsigned(reuse_select_fu_267_p3) + unsigned(ap_const_lv14_1));
    add_ln886_fu_348_p2 <= std_logic_vector(unsigned(tmp_s_fu_339_p4) + unsigned(zext_ln886_1_fu_335_p1));
    addr_cmp_fu_254_p2 <= "1" when (reuse_addr_reg_fu_70 = zext_ln587_fu_246_p1) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, tmp_reg_375)
    begin
        if (((tmp_reg_375 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_32_assign_proc : process(ap_CS_fsm_pp0_stage0, i_22, ap_block_pp0_stage0, ap_loop_init, sh_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_32 <= i_22;
        else 
            ap_sig_allocacmp_i_32 <= sh_fu_78;
        end if; 
    end process;

    i_fu_235_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_32) + unsigned(ap_const_lv16_FFFF));
    is_left_internal_fu_211_p2 <= "1" when (ret_V_fu_205_p2 = ap_const_lv19_0) else "0";
    is_right_internal_fu_223_p2 <= "1" when (ret_V_3_fu_217_p2 = ap_const_lv19_0) else "0";
    length_fu_281_p2 <= std_logic_vector(unsigned(trunc_ln768_fu_273_p1) + unsigned(ap_const_lv4_1));

    length_histogram_V_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, length_histogram_V_2_addr_reg_433, ap_block_pp0_stage0, zext_ln886_fu_315_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                length_histogram_V_2_address0 <= length_histogram_V_2_addr_reg_433;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                length_histogram_V_2_address0 <= zext_ln886_fu_315_p1(3 - 1 downto 0);
            else 
                length_histogram_V_2_address0 <= "XXX";
            end if;
        else 
            length_histogram_V_2_address0 <= "XXX";
        end if; 
    end process;


    length_histogram_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            length_histogram_V_2_ce0 <= ap_const_logic_1;
        else 
            length_histogram_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    length_histogram_V_2_d0 <= add_ln886_reg_438;

    length_histogram_V_2_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, or_ln773_reg_400_pp0_iter1_reg, ap_block_pp0_stage2_11001, trunc_ln768_1_reg_419)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln768_1_reg_419 = ap_const_lv1_0) and (or_ln773_reg_400_pp0_iter1_reg = ap_const_lv1_1))) then 
            length_histogram_V_2_we0 <= ap_const_logic_1;
        else 
            length_histogram_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    length_histogram_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, length_histogram_V_addr_reg_428, ap_block_pp0_stage0, zext_ln886_fu_315_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                length_histogram_V_address0 <= length_histogram_V_addr_reg_428;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                length_histogram_V_address0 <= zext_ln886_fu_315_p1(3 - 1 downto 0);
            else 
                length_histogram_V_address0 <= "XXX";
            end if;
        else 
            length_histogram_V_address0 <= "XXX";
        end if; 
    end process;


    length_histogram_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            length_histogram_V_ce0 <= ap_const_logic_1;
        else 
            length_histogram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    length_histogram_V_d0 <= add_ln886_reg_438;

    length_histogram_V_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, or_ln773_reg_400_pp0_iter1_reg, ap_block_pp0_stage2_11001, trunc_ln768_1_reg_419)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln768_1_reg_419 = ap_const_lv1_1) and (or_ln773_reg_400_pp0_iter1_reg = ap_const_lv1_1))) then 
            length_histogram_V_we0 <= ap_const_logic_1;
        else 
            length_histogram_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln2_fu_305_p4 <= length_fu_281_p2(3 downto 1);
    or_ln773_fu_229_p2 <= (is_right_internal_fu_223_p2 or is_left_internal_fu_211_p2);
    parent_V_address0 <= zext_ln768_fu_200_p1(5 - 1 downto 0);

    parent_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            parent_V_ce0 <= ap_const_logic_1;
        else 
            parent_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_3_fu_217_p2 <= (tmp_V_fu_196_p1 and right_V_3_reload);
    ret_V_fu_205_p2 <= (tmp_V_fu_196_p1 and left_V_reload);
    reuse_select_fu_267_p3 <= 
        reuse_reg_fu_74 when (addr_cmp_reg_409(0) = '1') else 
        temp_array_V_load_reg_414;
    select_ln886_1_fu_328_p3 <= 
        select_ln886_fu_321_p3 when (is_left_internal_reg_390_pp0_iter1_reg(0) = '1') else 
        ap_const_lv2_1;
    select_ln886_fu_321_p3 <= 
        ap_const_lv2_2 when (is_right_internal_reg_395_pp0_iter1_reg(0) = '1') else 
        ap_const_lv2_1;
    shl_ln1027_fu_190_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & zext_ln599_fu_186_p1(31-1 downto 0)))));

    temp_array_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, zext_ln768_reg_379, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln587_fu_246_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_array_V_address0 <= zext_ln768_reg_379(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            temp_array_V_address0 <= zext_ln587_fu_246_p1(5 - 1 downto 0);
        else 
            temp_array_V_address0 <= "XXXXX";
        end if; 
    end process;


    temp_array_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            temp_array_V_ce0 <= ap_const_logic_1;
        else 
            temp_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_array_V_d0 <= std_logic_vector(unsigned(reuse_select_fu_267_p3) + unsigned(ap_const_lv14_1));

    temp_array_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_array_V_we0 <= ap_const_logic_1;
        else 
            temp_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_V_fu_196_p1 <= shl_ln1027_fu_190_p2(19 - 1 downto 0);
    tmp_fu_178_p3 <= ap_sig_allocacmp_i_32(15 downto 15);
    trunc_ln768_1_fu_277_p1 <= reuse_select_fu_267_p3(1 - 1 downto 0);
    trunc_ln768_fu_273_p1 <= reuse_select_fu_267_p3(4 - 1 downto 0);
    xor_ln768_fu_287_p2 <= (trunc_ln768_1_fu_277_p1 xor ap_const_lv1_1);
    zext_ln587_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(parent_V_q0),64));
    zext_ln599_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_32),32));
    zext_ln768_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_32),64));
    zext_ln886_1_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln886_1_fu_328_p3),12));
    zext_ln886_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_305_p4),64));
end behav;
