-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_processBitLength_14_Pipeline_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldFrequency_dout : IN STD_LOGIC_VECTOR (14 downto 0);
    ldFrequency_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    ldFrequency_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    ldFrequency_empty_n : IN STD_LOGIC;
    ldFrequency_read : OUT STD_LOGIC;
    tmp_data_V : IN STD_LOGIC_VECTOR (13 downto 0);
    heap_value_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    heap_value_V_ce0 : OUT STD_LOGIC;
    heap_value_V_we0 : OUT STD_LOGIC;
    heap_value_V_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    heap_frequency_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    heap_frequency_V_ce0 : OUT STD_LOGIC;
    heap_frequency_V_we0 : OUT STD_LOGIC;
    heap_frequency_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    hpLen_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    hpLen_out_ap_vld : OUT STD_LOGIC;
    smLen_V_out : OUT STD_LOGIC_VECTOR (9 downto 0);
    smLen_V_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_processBitLength_14_Pipeline_filter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal read_flag_reg_130 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln82_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ldFrequency_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal n_4_reg_267 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_4_reg_267_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln82_reg_272 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln93_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1069_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal smLen_V_1_fu_62 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_fu_171_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_n_4 : STD_LOGIC_VECTOR (4 downto 0);
    signal cf_V_fu_66 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln145_fu_182_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal smLen_V_fu_70 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln259_fu_204_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hpLen_fu_74 : STD_LOGIC_VECTOR (15 downto 0);
    signal hpLen_1_fu_214_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_233 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    cf_V_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    cf_V_fu_66 <= tmp_data_V;
                elsif (((read_flag_reg_130 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    cf_V_fu_66 <= trunc_ln145_fu_182_p1;
                end if;
            end if; 
        end if;
    end process;

    hpLen_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    hpLen_fu_74 <= ap_const_lv16_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1069_fu_195_p2 = ap_const_lv1_0))) then 
                    hpLen_fu_74 <= hpLen_1_fu_214_p2;
                end if;
            end if; 
        end if;
    end process;

    read_flag_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    read_flag_reg_130 <= ap_const_lv1_0;
                elsif ((ap_const_boolean_1 = ap_condition_233)) then 
                    read_flag_reg_130 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    smLen_V_1_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln82_fu_165_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    smLen_V_1_fu_62 <= n_fu_171_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    smLen_V_1_fu_62 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    smLen_V_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    smLen_V_fu_70(0) <= '0';
                    smLen_V_fu_70(1) <= '0';
                    smLen_V_fu_70(2) <= '0';
                    smLen_V_fu_70(3) <= '0';
                    smLen_V_fu_70(4) <= '0';
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1069_fu_195_p2 = ap_const_lv1_0))) then 
                                        smLen_V_fu_70(4 downto 0) <= zext_ln259_fu_204_p1(4 downto 0);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln82_reg_272 <= icmp_ln82_fu_165_p2;
                n_4_reg_267 <= ap_sig_allocacmp_n_4;
                n_4_reg_267_pp0_iter1_reg <= n_4_reg_267;
            end if;
        end if;
    end process;
    smLen_V_fu_70(9 downto 5) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ldFrequency_empty_n, read_flag_reg_130)
    begin
                ap_block_pp0_stage0_01001 <= ((read_flag_reg_130 = ap_const_lv1_1) and (ldFrequency_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ldFrequency_empty_n, read_flag_reg_130)
    begin
                ap_block_pp0_stage0_11001 <= ((read_flag_reg_130 = ap_const_lv1_1) and (ldFrequency_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ldFrequency_empty_n, read_flag_reg_130)
    begin
                ap_block_pp0_stage0_subdone <= ((read_flag_reg_130 = ap_const_lv1_1) and (ldFrequency_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(ldFrequency_empty_n, read_flag_reg_130)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((read_flag_reg_130 = ap_const_lv1_1) and (ldFrequency_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_233_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln82_reg_272)
    begin
                ap_condition_233 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln82_reg_272 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln82_fu_165_p2)
    begin
        if (((icmp_ln82_fu_165_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, smLen_V_1_fu_62)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_n_4 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_n_4 <= smLen_V_1_fu_62;
        end if; 
    end process;

    heap_frequency_V_address0 <= zext_ln93_fu_208_p1(5 - 1 downto 0);

    heap_frequency_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            heap_frequency_V_ce0 <= ap_const_logic_1;
        else 
            heap_frequency_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    heap_frequency_V_d0 <= cf_V_fu_66;

    heap_frequency_V_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1069_fu_195_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1069_fu_195_p2 = ap_const_lv1_0))) then 
            heap_frequency_V_we0 <= ap_const_logic_1;
        else 
            heap_frequency_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    heap_value_V_address0 <= zext_ln93_fu_208_p1(5 - 1 downto 0);

    heap_value_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            heap_value_V_ce0 <= ap_const_logic_1;
        else 
            heap_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    heap_value_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_4_reg_267_pp0_iter1_reg),10));

    heap_value_V_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln1069_fu_195_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1069_fu_195_p2 = ap_const_lv1_0))) then 
            heap_value_V_we0 <= ap_const_logic_1;
        else 
            heap_value_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    hpLen_1_fu_214_p2 <= std_logic_vector(unsigned(hpLen_fu_74) + unsigned(ap_const_lv16_1));
    hpLen_out <= hpLen_fu_74;

    hpLen_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln82_reg_272)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln82_reg_272 = ap_const_lv1_1))) then 
            hpLen_out_ap_vld <= ap_const_logic_1;
        else 
            hpLen_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1069_fu_195_p2 <= "1" when (cf_V_fu_66 = ap_const_lv14_0) else "0";
    icmp_ln82_fu_165_p2 <= "1" when (ap_sig_allocacmp_n_4 = ap_const_lv5_13) else "0";

    ldFrequency_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ldFrequency_empty_n, read_flag_reg_130, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (read_flag_reg_130 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ldFrequency_blk_n <= ldFrequency_empty_n;
        else 
            ldFrequency_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldFrequency_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, read_flag_reg_130, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (read_flag_reg_130 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ldFrequency_read <= ap_const_logic_1;
        else 
            ldFrequency_read <= ap_const_logic_0;
        end if; 
    end process;

    n_fu_171_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_4) + unsigned(ap_const_lv5_1));
    smLen_V_out <= smLen_V_fu_70;

    smLen_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln82_reg_272)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln82_reg_272 = ap_const_lv1_1))) then 
            smLen_V_out_ap_vld <= ap_const_logic_1;
        else 
            smLen_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln145_fu_182_p1 <= ldFrequency_dout(14 - 1 downto 0);
    zext_ln259_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_4_reg_267_pp0_iter1_reg),10));
    zext_ln93_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hpLen_fu_74),64));
end behav;
