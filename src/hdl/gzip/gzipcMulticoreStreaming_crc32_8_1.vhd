-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_crc32_8_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    checksumInitStream41_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    checksumInitStream41_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumInitStream41_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumInitStream41_empty_n : IN STD_LOGIC;
    checksumInitStream41_read : OUT STD_LOGIC;
    checksumStream37_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    checksumStream37_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumStream37_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumStream37_empty_n : IN STD_LOGIC;
    checksumStream37_read : OUT STD_LOGIC;
    checksumSizeStream39_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    checksumSizeStream39_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumSizeStream39_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumSizeStream39_empty_n : IN STD_LOGIC;
    checksumSizeStream39_read : OUT STD_LOGIC;
    checksumOutStream42_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    checksumOutStream42_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    checksumOutStream42_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    checksumOutStream42_full_n : IN STD_LOGIC;
    checksumOutStream42_write : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_crc32_8_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal grp_crc32_8_s_fu_65_ap_start : STD_LOGIC;
    signal grp_crc32_8_s_fu_65_ap_done : STD_LOGIC;
    signal grp_crc32_8_s_fu_65_ap_idle : STD_LOGIC;
    signal grp_crc32_8_s_fu_65_ap_ready : STD_LOGIC;
    signal grp_crc32_8_s_fu_65_checksumInitStream41_read : STD_LOGIC;
    signal grp_crc32_8_s_fu_65_checksumStream37_read : STD_LOGIC;
    signal grp_crc32_8_s_fu_65_checksumSizeStream39_read : STD_LOGIC;
    signal grp_crc32_8_s_fu_65_endInPackLenStrm6_read : STD_LOGIC;
    signal grp_crc32_8_s_fu_65_checksumOutStream42_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crc32_8_s_fu_65_checksumOutStream42_write : STD_LOGIC;
    signal grp_crc32_8_s_fu_65_endOutStrm7_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_crc32_8_s_fu_65_endOutStrm7_write : STD_LOGIC;
    signal grp_crc32_8_s_fu_65_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal endInPackLenStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endInPackLenStrm_empty_n : STD_LOGIC;
    signal endInPackLenStrm_read : STD_LOGIC;
    signal endOutStrm_full_n : STD_LOGIC;
    signal endOutStrm_write : STD_LOGIC;
    signal endInPackLenStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal endInPackLenStrm_full_n : STD_LOGIC;
    signal endInPackLenStrm_write : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal endOutStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endOutStrm_empty_n : STD_LOGIC;
    signal endOutStrm_read : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_crc32_8_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        checksumInitStream41_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        checksumInitStream41_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        checksumInitStream41_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        checksumInitStream41_empty_n : IN STD_LOGIC;
        checksumInitStream41_read : OUT STD_LOGIC;
        checksumStream37_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        checksumStream37_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        checksumStream37_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        checksumStream37_empty_n : IN STD_LOGIC;
        checksumStream37_read : OUT STD_LOGIC;
        checksumSizeStream39_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        checksumSizeStream39_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        checksumSizeStream39_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        checksumSizeStream39_empty_n : IN STD_LOGIC;
        checksumSizeStream39_read : OUT STD_LOGIC;
        endInPackLenStrm6_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        endInPackLenStrm6_empty_n : IN STD_LOGIC;
        endInPackLenStrm6_read : OUT STD_LOGIC;
        checksumOutStream42_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        checksumOutStream42_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        checksumOutStream42_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        checksumOutStream42_full_n : IN STD_LOGIC;
        checksumOutStream42_write : OUT STD_LOGIC;
        endOutStrm7_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        endOutStrm7_full_n : IN STD_LOGIC;
        endOutStrm7_write : OUT STD_LOGIC );
    end component;


    component gzipcMulticoreStreaming_fifo_w1_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    grp_crc32_8_s_fu_65 : component gzipcMulticoreStreaming_crc32_8_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_crc32_8_s_fu_65_ap_start,
        ap_done => grp_crc32_8_s_fu_65_ap_done,
        ap_idle => grp_crc32_8_s_fu_65_ap_idle,
        ap_ready => grp_crc32_8_s_fu_65_ap_ready,
        checksumInitStream41_dout => checksumInitStream41_dout,
        checksumInitStream41_num_data_valid => ap_const_lv3_0,
        checksumInitStream41_fifo_cap => ap_const_lv3_0,
        checksumInitStream41_empty_n => checksumInitStream41_empty_n,
        checksumInitStream41_read => grp_crc32_8_s_fu_65_checksumInitStream41_read,
        checksumStream37_dout => checksumStream37_dout,
        checksumStream37_num_data_valid => ap_const_lv3_0,
        checksumStream37_fifo_cap => ap_const_lv3_0,
        checksumStream37_empty_n => checksumStream37_empty_n,
        checksumStream37_read => grp_crc32_8_s_fu_65_checksumStream37_read,
        checksumSizeStream39_dout => checksumSizeStream39_dout,
        checksumSizeStream39_num_data_valid => ap_const_lv3_0,
        checksumSizeStream39_fifo_cap => ap_const_lv3_0,
        checksumSizeStream39_empty_n => checksumSizeStream39_empty_n,
        checksumSizeStream39_read => grp_crc32_8_s_fu_65_checksumSizeStream39_read,
        endInPackLenStrm6_dout => endInPackLenStrm_dout,
        endInPackLenStrm6_empty_n => endInPackLenStrm_empty_n,
        endInPackLenStrm6_read => grp_crc32_8_s_fu_65_endInPackLenStrm6_read,
        checksumOutStream42_din => grp_crc32_8_s_fu_65_checksumOutStream42_din,
        checksumOutStream42_num_data_valid => ap_const_lv6_0,
        checksumOutStream42_fifo_cap => ap_const_lv6_0,
        checksumOutStream42_full_n => checksumOutStream42_full_n,
        checksumOutStream42_write => grp_crc32_8_s_fu_65_checksumOutStream42_write,
        endOutStrm7_din => grp_crc32_8_s_fu_65_endOutStrm7_din,
        endOutStrm7_full_n => endOutStrm_full_n,
        endOutStrm7_write => grp_crc32_8_s_fu_65_endOutStrm7_write);

    endInPackLenStrm_fifo_U : component gzipcMulticoreStreaming_fifo_w1_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => endInPackLenStrm_din,
        if_full_n => endInPackLenStrm_full_n,
        if_write => endInPackLenStrm_write,
        if_dout => endInPackLenStrm_dout,
        if_empty_n => endInPackLenStrm_empty_n,
        if_read => endInPackLenStrm_read);

    endOutStrm_fifo_U : component gzipcMulticoreStreaming_fifo_w1_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_crc32_8_s_fu_65_endOutStrm7_din,
        if_full_n => endOutStrm_full_n,
        if_write => endOutStrm_write,
        if_dout => endOutStrm_dout,
        if_empty_n => endOutStrm_empty_n,
        if_read => endOutStrm_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_crc32_8_s_fu_65_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_crc32_8_s_fu_65_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_crc32_8_s_fu_65_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_crc32_8_s_fu_65_ap_ready = ap_const_logic_1)) then 
                    grp_crc32_8_s_fu_65_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_crc32_8_s_fu_65_ap_done, ap_CS_fsm_state4, endInPackLenStrm_full_n, ap_CS_fsm_state2, endOutStrm_empty_n, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (endInPackLenStrm_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (endInPackLenStrm_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_crc32_8_s_fu_65_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, endInPackLenStrm_full_n)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (endInPackLenStrm_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(endInPackLenStrm_full_n)
    begin
        if ((endInPackLenStrm_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_crc32_8_s_fu_65_ap_done)
    begin
        if ((grp_crc32_8_s_fu_65_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(endOutStrm_empty_n)
    begin
        if ((endOutStrm_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(endOutStrm_empty_n)
    begin
        if ((endOutStrm_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, endInPackLenStrm_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (endInPackLenStrm_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, endOutStrm_empty_n, ap_CS_fsm_state6)
    begin
        if (((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    checksumInitStream41_read_assign_proc : process(grp_crc32_8_s_fu_65_checksumInitStream41_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            checksumInitStream41_read <= grp_crc32_8_s_fu_65_checksumInitStream41_read;
        else 
            checksumInitStream41_read <= ap_const_logic_0;
        end if; 
    end process;

    checksumOutStream42_din <= grp_crc32_8_s_fu_65_checksumOutStream42_din;

    checksumOutStream42_write_assign_proc : process(grp_crc32_8_s_fu_65_checksumOutStream42_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            checksumOutStream42_write <= grp_crc32_8_s_fu_65_checksumOutStream42_write;
        else 
            checksumOutStream42_write <= ap_const_logic_0;
        end if; 
    end process;


    checksumSizeStream39_read_assign_proc : process(grp_crc32_8_s_fu_65_checksumSizeStream39_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            checksumSizeStream39_read <= grp_crc32_8_s_fu_65_checksumSizeStream39_read;
        else 
            checksumSizeStream39_read <= ap_const_logic_0;
        end if; 
    end process;


    checksumStream37_read_assign_proc : process(grp_crc32_8_s_fu_65_checksumStream37_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            checksumStream37_read <= grp_crc32_8_s_fu_65_checksumStream37_read;
        else 
            checksumStream37_read <= ap_const_logic_0;
        end if; 
    end process;


    endInPackLenStrm_din_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, endInPackLenStrm_full_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (endInPackLenStrm_full_n = ap_const_logic_1))) then 
            endInPackLenStrm_din <= ap_const_lv1_1;
        elsif ((not(((ap_done_reg = ap_const_logic_1) or (endInPackLenStrm_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            endInPackLenStrm_din <= ap_const_lv1_0;
        else 
            endInPackLenStrm_din <= "X";
        end if; 
    end process;


    endInPackLenStrm_read_assign_proc : process(grp_crc32_8_s_fu_65_endInPackLenStrm6_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            endInPackLenStrm_read <= grp_crc32_8_s_fu_65_endInPackLenStrm6_read;
        else 
            endInPackLenStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    endInPackLenStrm_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, endInPackLenStrm_full_n, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (endInPackLenStrm_full_n = ap_const_logic_1)) or (not(((ap_done_reg = ap_const_logic_1) or (endInPackLenStrm_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            endInPackLenStrm_write <= ap_const_logic_1;
        else 
            endInPackLenStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    endOutStrm_read_assign_proc : process(endOutStrm_empty_n, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            endOutStrm_read <= ap_const_logic_1;
        else 
            endOutStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    endOutStrm_write_assign_proc : process(grp_crc32_8_s_fu_65_endOutStrm7_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            endOutStrm_write <= grp_crc32_8_s_fu_65_endOutStrm7_write;
        else 
            endOutStrm_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_crc32_8_s_fu_65_ap_start <= grp_crc32_8_s_fu_65_ap_start_reg;

    internal_ap_ready_assign_proc : process(endOutStrm_empty_n, ap_CS_fsm_state6)
    begin
        if (((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
