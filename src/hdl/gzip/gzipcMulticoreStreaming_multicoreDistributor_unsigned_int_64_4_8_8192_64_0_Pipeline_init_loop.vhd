-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_multicoreDistributor_unsigned_int_64_4_8_8192_64_0_Pipeline_init_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    coreStream35_dout : IN STD_LOGIC_VECTOR (67 downto 0);
    coreStream35_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    coreStream35_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    coreStream35_empty_n : IN STD_LOGIC;
    coreStream35_read : OUT STD_LOGIC;
    storedBufferStream_din : OUT STD_LOGIC_VECTOR (67 downto 0);
    storedBufferStream_full_n : IN STD_LOGIC;
    storedBufferStream_write : OUT STD_LOGIC;
    readSize_out_i : IN STD_LOGIC_VECTOR (31 downto 0);
    readSize_out_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    readSize_out_o_ap_vld : OUT STD_LOGIC;
    last_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    last_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_multicoreDistributor_unsigned_int_64_4_8_8192_64_0_Pipeline_init_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal and_ln203_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal and_ln203_reg_155 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal coreStream35_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal storedBufferStream_blk_n : STD_LOGIC;
    signal last_reg_66 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmpVal_V_reg_159 : STD_LOGIC_VECTOR (67 downto 0);
    signal strobe_V_fu_115_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal strobe_V_reg_164 : STD_LOGIC_VECTOR (3 downto 0);
    signal last_2_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_last_phi_fu_69_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal readSize_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_42 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_39_fu_109_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_38 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln203_fu_91_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln203_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_fu_133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_186 : BOOLEAN;
    signal ap_condition_192 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_const_lv1_1 = and_ln203_fu_103_p2) and (ap_start_int = ap_const_logic_1))) then 
                    i_fu_42 <= i_39_fu_109_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_42 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    last_reg_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_192)) then 
                    last_reg_66 <= last_2_fu_128_p2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    last_reg_66 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln203_reg_155 <= and_ln203_fu_103_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln203_fu_103_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                strobe_V_reg_164 <= strobe_V_fu_115_p1;
                tmpVal_V_reg_159 <= coreStream35_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln203_fu_103_p2 <= (xor_ln203_fu_97_p2 and icmp_ln203_fu_91_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, coreStream35_empty_n, and_ln203_fu_103_p2, storedBufferStream_full_n, and_ln203_reg_155, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((storedBufferStream_full_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln203_reg_155) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_lv1_1 = and_ln203_fu_103_p2) and (coreStream35_empty_n = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, coreStream35_empty_n, and_ln203_fu_103_p2, storedBufferStream_full_n, and_ln203_reg_155, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((storedBufferStream_full_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln203_reg_155) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_lv1_1 = and_ln203_fu_103_p2) and (coreStream35_empty_n = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, coreStream35_empty_n, and_ln203_fu_103_p2, storedBufferStream_full_n, and_ln203_reg_155, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((storedBufferStream_full_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln203_reg_155) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_lv1_1 = and_ln203_fu_103_p2) and (coreStream35_empty_n = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(coreStream35_empty_n, and_ln203_fu_103_p2)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_const_lv1_1 = and_ln203_fu_103_p2) and (coreStream35_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(storedBufferStream_full_n, and_ln203_reg_155)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((storedBufferStream_full_n = ap_const_logic_0) and (ap_const_lv1_1 = and_ln203_reg_155));
    end process;


    ap_condition_186_assign_proc : process(ap_enable_reg_pp0_iter1, and_ln203_reg_155, ap_block_pp0_stage0)
    begin
                ap_condition_186 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln203_reg_155) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_192_assign_proc : process(ap_enable_reg_pp0_iter1, and_ln203_reg_155, ap_block_pp0_stage0_11001)
    begin
                ap_condition_192 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln203_reg_155) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, and_ln203_fu_103_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_lv1_0 = and_ln203_fu_103_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_last_phi_fu_69_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, last_reg_66, last_2_fu_128_p2, ap_loop_init, ap_condition_186)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_186)) then 
                ap_phi_mux_last_phi_fu_69_p4 <= last_2_fu_128_p2;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_last_phi_fu_69_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_last_phi_fu_69_p4 <= last_reg_66;
            end if;
        else 
            ap_phi_mux_last_phi_fu_69_p4 <= last_reg_66;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_38_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_42)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_38 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_38 <= i_fu_42;
        end if; 
    end process;


    coreStream35_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, coreStream35_empty_n, and_ln203_fu_103_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln203_fu_103_p2) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            coreStream35_blk_n <= coreStream35_empty_n;
        else 
            coreStream35_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    coreStream35_read_assign_proc : process(ap_CS_fsm_pp0_stage0, and_ln203_fu_103_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln203_fu_103_p2) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            coreStream35_read <= ap_const_logic_1;
        else 
            coreStream35_read <= ap_const_logic_0;
        end if; 
    end process;

    i_39_fu_109_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_38) + unsigned(ap_const_lv4_1));
    icmp_ln203_fu_91_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_38) < unsigned(ap_const_lv4_9)) else "0";
    last_2_fu_128_p2 <= "1" when (strobe_V_reg_164 = ap_const_lv4_0) else "0";
    last_out <= last_reg_66;

    last_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, and_ln203_fu_103_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln203_fu_103_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            last_out_ap_vld <= ap_const_logic_1;
        else 
            last_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    readSize_fu_136_p2 <= std_logic_vector(unsigned(zext_ln208_fu_133_p1) + unsigned(readSize_out_i));

    readSize_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln203_reg_155, readSize_out_i, ap_block_pp0_stage0, ap_loop_init, readSize_fu_136_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                readSize_out_o <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = and_ln203_reg_155) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                readSize_out_o <= readSize_fu_136_p2;
            else 
                readSize_out_o <= readSize_out_i;
            end if;
        else 
            readSize_out_o <= readSize_out_i;
        end if; 
    end process;


    readSize_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln203_reg_155, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln203_reg_155) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            readSize_out_o_ap_vld <= ap_const_logic_1;
        else 
            readSize_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    storedBufferStream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, storedBufferStream_full_n, and_ln203_reg_155, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln203_reg_155) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            storedBufferStream_blk_n <= storedBufferStream_full_n;
        else 
            storedBufferStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    storedBufferStream_din <= tmpVal_V_reg_159;

    storedBufferStream_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln203_reg_155, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln203_reg_155) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            storedBufferStream_write <= ap_const_logic_1;
        else 
            storedBufferStream_write <= ap_const_logic_0;
        end if; 
    end process;

    strobe_V_fu_115_p1 <= coreStream35_dout(4 - 1 downto 0);
    xor_ln203_fu_97_p2 <= (ap_phi_mux_last_phi_fu_69_p4 xor ap_const_lv1_1);
    zext_ln208_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(strobe_V_reg_164),32));
end behav;
