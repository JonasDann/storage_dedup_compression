-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    checksumSizeStream39_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    checksumSizeStream39_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumSizeStream39_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumSizeStream39_empty_n : IN STD_LOGIC;
    checksumSizeStream39_read : OUT STD_LOGIC;
    checksumStream37_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    checksumStream37_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumStream37_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumStream37_empty_n : IN STD_LOGIC;
    checksumStream37_read : OUT STD_LOGIC;
    crc_V_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    inPackLen_V_2 : IN STD_LOGIC_VECTOR (4 downto 0);
    in_data_V_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    in_data_V_out_ap_vld : OUT STD_LOGIC;
    crc_V_4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    crc_V_4_out_ap_vld : OUT STD_LOGIC;
    tmp_V_19_out : OUT STD_LOGIC_VECTOR (4 downto 0);
    tmp_V_19_out_ap_vld : OUT STD_LOGIC;
    p_ZN2xf8security8internalL7table16E_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_ZN2xf8security8internalL7table16E_0_ce0 : OUT STD_LOGIC;
    p_ZN2xf8security8internalL7table16E_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_ZN2xf8security8internalL7table16E_0_ce1 : OUT STD_LOGIC;
    p_ZN2xf8security8internalL7table16E_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address2 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_ZN2xf8security8internalL7table16E_0_ce2 : OUT STD_LOGIC;
    p_ZN2xf8security8internalL7table16E_0_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address3 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_ZN2xf8security8internalL7table16E_0_ce3 : OUT STD_LOGIC;
    p_ZN2xf8security8internalL7table16E_0_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address4 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_ZN2xf8security8internalL7table16E_0_ce4 : OUT STD_LOGIC;
    p_ZN2xf8security8internalL7table16E_0_q4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address5 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_ZN2xf8security8internalL7table16E_0_ce5 : OUT STD_LOGIC;
    p_ZN2xf8security8internalL7table16E_0_q5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address6 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_ZN2xf8security8internalL7table16E_0_ce6 : OUT STD_LOGIC;
    p_ZN2xf8security8internalL7table16E_0_q6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address7 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_ZN2xf8security8internalL7table16E_0_ce7 : OUT STD_LOGIC;
    p_ZN2xf8security8internalL7table16E_0_q7 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln1065_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal checksumStream37_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal checksumSizeStream39_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_V_reg_551 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_reg_551_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1065_reg_556 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_556_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln674_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln674_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_565 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_570 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_575 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_580 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln714_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln905_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln905_1_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln905_2_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln905_3_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln905_4_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln905_5_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln905_6_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal inPackLen_V_fu_102 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_tmp_V : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_5_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_9_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_tmp_V_5_load : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_V_fu_110 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_360_cast_fu_341_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_361_cast_fu_353_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_365_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln905_fu_372_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal inTmp_V_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_fu_381_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_363_cast_fu_391_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_78_fu_404_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_364_cast_fu_414_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_89_fu_427_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_229_fu_437_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln905_1_fu_445_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln714_fu_454_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_230_fu_458_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln905_2_fu_466_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln905_1_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln905_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln905_3_fu_493_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln905_2_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln905_5_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln905_4_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    inPackLen_V_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1065_fu_269_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1))) then 
                    inPackLen_V_fu_102 <= checksumSizeStream39_dout;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    inPackLen_V_fu_102 <= inPackLen_V_2;
                end if;
            end if; 
        end if;
    end process;

    tmp_V_5_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    tmp_V_5_fu_106 <= crc_V_3;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    tmp_V_5_fu_106 <= tmp_V_9_fu_511_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln1065_reg_556 <= icmp_ln1065_fu_269_p2;
                icmp_ln1065_reg_556_pp0_iter1_reg <= icmp_ln1065_reg_556;
                tmp_2_reg_565 <= checksumStream37_dout(63 downto 56);
                tmp_3_reg_570 <= checksumStream37_dout(55 downto 48);
                tmp_4_reg_575 <= checksumStream37_dout(47 downto 40);
                tmp_5_reg_580 <= checksumStream37_dout(39 downto 32);
                tmp_V_reg_551_pp0_iter1_reg <= tmp_V_reg_551;
                trunc_ln674_reg_560 <= trunc_ln674_fu_280_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                in_data_V_fu_110 <= checksumStream37_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_reg_551 <= ap_sig_allocacmp_tmp_V;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, checksumSizeStream39_empty_n, icmp_ln1065_fu_269_p2, checksumStream37_empty_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((checksumStream37_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln1065_fu_269_p2 = ap_const_lv1_1) and (checksumSizeStream39_empty_n = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, checksumSizeStream39_empty_n, icmp_ln1065_fu_269_p2, checksumStream37_empty_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((checksumStream37_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln1065_fu_269_p2 = ap_const_lv1_1) and (checksumSizeStream39_empty_n = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, checksumSizeStream39_empty_n, icmp_ln1065_fu_269_p2, checksumStream37_empty_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((checksumStream37_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln1065_fu_269_p2 = ap_const_lv1_1) and (checksumSizeStream39_empty_n = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(checksumSizeStream39_empty_n, icmp_ln1065_fu_269_p2)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((icmp_ln1065_fu_269_p2 = ap_const_lv1_1) and (checksumSizeStream39_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(checksumStream37_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (checksumStream37_empty_n = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1065_fu_269_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1065_fu_269_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_V_assign_proc : process(ap_CS_fsm_pp0_stage0, inPackLen_V_2, ap_block_pp0_stage0, inPackLen_V_fu_102, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_tmp_V <= inPackLen_V_2;
        else 
            ap_sig_allocacmp_tmp_V <= inPackLen_V_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_tmp_V_5_load_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, tmp_V_5_fu_106, tmp_V_9_fu_511_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_tmp_V_5_load <= tmp_V_9_fu_511_p2;
        else 
            ap_sig_allocacmp_tmp_V_5_load <= tmp_V_5_fu_106;
        end if; 
    end process;


    checksumSizeStream39_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, checksumSizeStream39_empty_n, icmp_ln1065_fu_269_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1065_fu_269_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            checksumSizeStream39_blk_n <= checksumSizeStream39_empty_n;
        else 
            checksumSizeStream39_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    checksumSizeStream39_read_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1065_fu_269_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1065_fu_269_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            checksumSizeStream39_read <= ap_const_logic_1;
        else 
            checksumSizeStream39_read <= ap_const_logic_0;
        end if; 
    end process;


    checksumStream37_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, checksumStream37_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            checksumStream37_blk_n <= checksumStream37_empty_n;
        else 
            checksumStream37_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    checksumStream37_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            checksumStream37_read <= ap_const_logic_1;
        else 
            checksumStream37_read <= ap_const_logic_0;
        end if; 
    end process;

    crc_V_4_out <= tmp_V_5_fu_106;

    crc_V_4_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1065_reg_556_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1065_reg_556_pp0_iter1_reg = ap_const_lv1_0))) then 
            crc_V_4_out_ap_vld <= ap_const_logic_1;
        else 
            crc_V_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1065_fu_269_p2 <= "1" when (ap_sig_allocacmp_tmp_V = ap_const_lv5_8) else "0";
    inTmp_V_fu_332_p2 <= (trunc_ln674_reg_560 xor ap_sig_allocacmp_tmp_V_5_load);
    in_data_V_out <= in_data_V_fu_110;

    in_data_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1065_reg_556_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1065_reg_556_pp0_iter1_reg = ap_const_lv1_0))) then 
            in_data_V_out_ap_vld <= ap_const_logic_1;
        else 
            in_data_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_ZN2xf8security8internalL7table16E_0_address0 <= zext_ln905_6_fu_470_p1(11 - 1 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address1 <= zext_ln905_5_fu_449_p1(11 - 1 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address2 <= zext_ln905_4_fu_422_p1(11 - 1 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address3 <= zext_ln905_3_fu_399_p1(11 - 1 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address4 <= zext_ln905_2_fu_376_p1(11 - 1 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address5 <= zext_ln905_1_fu_360_p1(11 - 1 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address6 <= zext_ln905_fu_348_p1(11 - 1 downto 0);
    p_ZN2xf8security8internalL7table16E_0_address7 <= zext_ln714_fu_337_p1(11 - 1 downto 0);

    p_ZN2xf8security8internalL7table16E_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_ZN2xf8security8internalL7table16E_0_ce0 <= ap_const_logic_1;
        else 
            p_ZN2xf8security8internalL7table16E_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZN2xf8security8internalL7table16E_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_ZN2xf8security8internalL7table16E_0_ce1 <= ap_const_logic_1;
        else 
            p_ZN2xf8security8internalL7table16E_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZN2xf8security8internalL7table16E_0_ce2_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_ZN2xf8security8internalL7table16E_0_ce2 <= ap_const_logic_1;
        else 
            p_ZN2xf8security8internalL7table16E_0_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZN2xf8security8internalL7table16E_0_ce3_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_ZN2xf8security8internalL7table16E_0_ce3 <= ap_const_logic_1;
        else 
            p_ZN2xf8security8internalL7table16E_0_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZN2xf8security8internalL7table16E_0_ce4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_ZN2xf8security8internalL7table16E_0_ce4 <= ap_const_logic_1;
        else 
            p_ZN2xf8security8internalL7table16E_0_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZN2xf8security8internalL7table16E_0_ce5_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_ZN2xf8security8internalL7table16E_0_ce5 <= ap_const_logic_1;
        else 
            p_ZN2xf8security8internalL7table16E_0_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZN2xf8security8internalL7table16E_0_ce6_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_ZN2xf8security8internalL7table16E_0_ce6 <= ap_const_logic_1;
        else 
            p_ZN2xf8security8internalL7table16E_0_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    p_ZN2xf8security8internalL7table16E_0_ce7_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_ZN2xf8security8internalL7table16E_0_ce7 <= ap_const_logic_1;
        else 
            p_ZN2xf8security8internalL7table16E_0_ce7 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln905_1_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_229_fu_437_p3),11));

        sext_ln905_2_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_230_fu_458_p3),11));

        sext_ln905_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_365_p3),10));

    tmp_229_fu_437_p3 <= (ap_const_lv2_2 & tmp_89_fu_427_p4);
    tmp_230_fu_458_p3 <= (ap_const_lv1_1 & trunc_ln714_fu_454_p1);
    tmp_360_cast_fu_341_p3 <= (ap_const_lv1_1 & tmp_3_reg_570);
    tmp_361_cast_fu_353_p3 <= (ap_const_lv2_2 & tmp_4_reg_575);
    tmp_363_cast_fu_391_p3 <= (ap_const_lv3_4 & tmp_67_fu_381_p4);
    tmp_364_cast_fu_414_p3 <= (ap_const_lv3_5 & tmp_78_fu_404_p4);
    tmp_67_fu_381_p4 <= inTmp_V_fu_332_p2(31 downto 24);
    tmp_78_fu_404_p4 <= inTmp_V_fu_332_p2(23 downto 16);
    tmp_89_fu_427_p4 <= inTmp_V_fu_332_p2(15 downto 8);
    tmp_V_19_out <= tmp_V_reg_551_pp0_iter1_reg;

    tmp_V_19_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1065_reg_556_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1065_reg_556_pp0_iter1_reg = ap_const_lv1_0))) then 
            tmp_V_19_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_V_19_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_V_9_fu_511_p2 <= (xor_ln905_5_fu_505_p2 xor xor_ln905_4_fu_499_p2);
    tmp_s_fu_365_p3 <= (ap_const_lv1_1 & tmp_5_reg_580);
    trunc_ln674_fu_280_p1 <= checksumStream37_dout(32 - 1 downto 0);
    trunc_ln714_fu_454_p1 <= inTmp_V_fu_332_p2(8 - 1 downto 0);
    xor_ln905_1_fu_481_p2 <= (p_ZN2xf8security8internalL7table16E_0_q5 xor p_ZN2xf8security8internalL7table16E_0_q4);
    xor_ln905_2_fu_487_p2 <= (xor_ln905_fu_475_p2 xor xor_ln905_1_fu_481_p2);
    xor_ln905_3_fu_493_p2 <= (p_ZN2xf8security8internalL7table16E_0_q3 xor p_ZN2xf8security8internalL7table16E_0_q2);
    xor_ln905_4_fu_499_p2 <= (xor_ln905_3_fu_493_p2 xor p_ZN2xf8security8internalL7table16E_0_q1);
    xor_ln905_5_fu_505_p2 <= (xor_ln905_2_fu_487_p2 xor p_ZN2xf8security8internalL7table16E_0_q0);
    xor_ln905_fu_475_p2 <= (p_ZN2xf8security8internalL7table16E_0_q7 xor p_ZN2xf8security8internalL7table16E_0_q6);
    zext_ln714_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_565),64));
    zext_ln905_1_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_361_cast_fu_353_p3),64));
    zext_ln905_2_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln905_fu_372_p1),64));
    zext_ln905_3_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_363_cast_fu_391_p3),64));
    zext_ln905_4_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_364_cast_fu_414_p3),64));
    zext_ln905_5_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln905_1_fu_445_p1),64));
    zext_ln905_6_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln905_2_fu_466_p1),64));
    zext_ln905_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_360_cast_fu_341_p3),64));
end behav;
