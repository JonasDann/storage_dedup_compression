-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_radixSortMidPartial_286_10_14_Pipeline_re_sort_write_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    digit_location_V_61 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_location_V_60 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_location_V_59 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_location_V_58 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_location_V_57 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_location_V_56 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_location_V_55 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_location_V_54 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_location_V_53 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_location_V_52 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_location_V_51 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_location_V_50 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_location_V_49 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_location_V_48 : IN STD_LOGIC_VECTOR (9 downto 0);
    digit_histogram_V_65_reload : IN STD_LOGIC_VECTOR (9 downto 0);
    heapLength_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    current_digit_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    current_digit_V_ce0 : OUT STD_LOGIC;
    current_digit_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    prev_sorting_value_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    prev_sorting_value_V_ce0 : OUT STD_LOGIC;
    prev_sorting_value_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    prev_sorting_frequency_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    prev_sorting_frequency_V_ce0 : OUT STD_LOGIC;
    prev_sorting_frequency_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    heap_value_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    heap_value_V_ce1 : OUT STD_LOGIC;
    heap_value_V_we1 : OUT STD_LOGIC;
    heap_value_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    heap_frequency_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    heap_frequency_V_ce1 : OUT STD_LOGIC;
    heap_frequency_V_we1 : OUT STD_LOGIC;
    heap_frequency_V_d1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of gzipcMulticoreStreaming_radixSortMidPartial_286_10_14_Pipeline_re_sort_write_output is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln425_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln428_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln587_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_116 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_4_fu_449_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal digit_location_V_fu_120 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_16_fu_559_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_1_fu_124 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_2_fu_128 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_3_fu_132 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_4_fu_136 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_5_fu_140 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_6_fu_144 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_7_fu_148 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_8_fu_152 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_9_fu_156 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_10_fu_160 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_11_fu_164 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_12_fu_168 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_13_fu_172 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_14_fu_176 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_location_V_15_fu_180 : STD_LOGIC_VECTOR (9 downto 0);
    signal dlc_V_fu_515_p18 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_mux_164_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (9 downto 0);
        din4 : IN STD_LOGIC_VECTOR (9 downto 0);
        din5 : IN STD_LOGIC_VECTOR (9 downto 0);
        din6 : IN STD_LOGIC_VECTOR (9 downto 0);
        din7 : IN STD_LOGIC_VECTOR (9 downto 0);
        din8 : IN STD_LOGIC_VECTOR (9 downto 0);
        din9 : IN STD_LOGIC_VECTOR (9 downto 0);
        din10 : IN STD_LOGIC_VECTOR (9 downto 0);
        din11 : IN STD_LOGIC_VECTOR (9 downto 0);
        din12 : IN STD_LOGIC_VECTOR (9 downto 0);
        din13 : IN STD_LOGIC_VECTOR (9 downto 0);
        din14 : IN STD_LOGIC_VECTOR (9 downto 0);
        din15 : IN STD_LOGIC_VECTOR (9 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_164_10_1_1_U1224 : component gzipcMulticoreStreaming_mux_164_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 10,
        din7_WIDTH => 10,
        din8_WIDTH => 10,
        din9_WIDTH => 10,
        din10_WIDTH => 10,
        din11_WIDTH => 10,
        din12_WIDTH => 10,
        din13_WIDTH => 10,
        din14_WIDTH => 10,
        din15_WIDTH => 10,
        din16_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => digit_location_V_fu_120,
        din1 => digit_location_V_1_fu_124,
        din2 => digit_location_V_2_fu_128,
        din3 => digit_location_V_3_fu_132,
        din4 => digit_location_V_4_fu_136,
        din5 => digit_location_V_5_fu_140,
        din6 => digit_location_V_6_fu_144,
        din7 => digit_location_V_7_fu_148,
        din8 => digit_location_V_8_fu_152,
        din9 => digit_location_V_9_fu_156,
        din10 => digit_location_V_10_fu_160,
        din11 => digit_location_V_11_fu_164,
        din12 => digit_location_V_12_fu_168,
        din13 => digit_location_V_13_fu_172,
        din14 => digit_location_V_14_fu_176,
        din15 => digit_location_V_15_fu_180,
        din16 => current_digit_V_q0,
        dout => dlc_V_fu_515_p18);

    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    digit_location_V_10_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_10_fu_160 <= digit_location_V_56;
                elsif (((current_digit_V_q0 = ap_const_lv4_A) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_10_fu_160 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_11_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_11_fu_164 <= digit_location_V_57;
                elsif (((current_digit_V_q0 = ap_const_lv4_B) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_11_fu_164 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_12_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_12_fu_168 <= digit_location_V_58;
                elsif (((current_digit_V_q0 = ap_const_lv4_C) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_12_fu_168 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_13_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_13_fu_172 <= digit_location_V_59;
                elsif (((current_digit_V_q0 = ap_const_lv4_D) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_13_fu_172 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_14_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_14_fu_176 <= digit_location_V_60;
                elsif (((current_digit_V_q0 = ap_const_lv4_E) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_14_fu_176 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_15_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_15_fu_180 <= digit_location_V_61;
                elsif (((current_digit_V_q0 = ap_const_lv4_F) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_15_fu_180 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_1_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_1_fu_124 <= digit_histogram_V_65_reload;
                elsif (((current_digit_V_q0 = ap_const_lv4_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_1_fu_124 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_2_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_2_fu_128 <= digit_location_V_48;
                elsif (((current_digit_V_q0 = ap_const_lv4_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_2_fu_128 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_3_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_3_fu_132 <= digit_location_V_49;
                elsif (((current_digit_V_q0 = ap_const_lv4_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_3_fu_132 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_4_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_4_fu_136 <= digit_location_V_50;
                elsif (((current_digit_V_q0 = ap_const_lv4_4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_4_fu_136 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_5_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_5_fu_140 <= digit_location_V_51;
                elsif (((current_digit_V_q0 = ap_const_lv4_5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_5_fu_140 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_6_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_6_fu_144 <= digit_location_V_52;
                elsif (((current_digit_V_q0 = ap_const_lv4_6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_6_fu_144 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_7_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_7_fu_148 <= digit_location_V_53;
                elsif (((current_digit_V_q0 = ap_const_lv4_7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_7_fu_148 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_8_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_8_fu_152 <= digit_location_V_54;
                elsif (((current_digit_V_q0 = ap_const_lv4_8) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_8_fu_152 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_9_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_9_fu_156 <= digit_location_V_55;
                elsif (((current_digit_V_q0 = ap_const_lv4_9) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_9_fu_156 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_location_V_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_location_V_fu_120 <= ap_const_lv10_0;
                elsif (((current_digit_V_q0 = ap_const_lv4_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    digit_location_V_fu_120 <= digit_location_V_16_fu_559_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln425_fu_443_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_116 <= j_4_fu_449_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_116 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln425_fu_443_p2)
    begin
        if (((icmp_ln425_fu_443_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_116, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_3 <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_j_3 <= j_fu_116;
        end if; 
    end process;

    current_digit_V_address0 <= zext_ln428_fu_455_p1(9 - 1 downto 0);

    current_digit_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_digit_V_ce0 <= ap_const_logic_1;
        else 
            current_digit_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    digit_location_V_16_fu_559_p2 <= std_logic_vector(unsigned(dlc_V_fu_515_p18) + unsigned(ap_const_lv10_1));
    heap_frequency_V_address1 <= zext_ln587_fu_553_p1(9 - 1 downto 0);

    heap_frequency_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            heap_frequency_V_ce1 <= ap_const_logic_1;
        else 
            heap_frequency_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    heap_frequency_V_d1 <= prev_sorting_frequency_V_q0;

    heap_frequency_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            heap_frequency_V_we1 <= ap_const_logic_1;
        else 
            heap_frequency_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    heap_value_V_address1 <= zext_ln587_fu_553_p1(9 - 1 downto 0);

    heap_value_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            heap_value_V_ce1 <= ap_const_logic_1;
        else 
            heap_value_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    heap_value_V_d1 <= prev_sorting_value_V_q0;

    heap_value_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            heap_value_V_we1 <= ap_const_logic_1;
        else 
            heap_value_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln425_fu_443_p2 <= "1" when (ap_sig_allocacmp_j_3 = heapLength_5) else "0";
    j_4_fu_449_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_3) + unsigned(ap_const_lv16_1));
    prev_sorting_frequency_V_address0 <= zext_ln428_fu_455_p1(9 - 1 downto 0);

    prev_sorting_frequency_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            prev_sorting_frequency_V_ce0 <= ap_const_logic_1;
        else 
            prev_sorting_frequency_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prev_sorting_value_V_address0 <= zext_ln428_fu_455_p1(9 - 1 downto 0);

    prev_sorting_value_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            prev_sorting_value_V_ce0 <= ap_const_logic_1;
        else 
            prev_sorting_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln428_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_3),64));
    zext_ln587_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dlc_V_fu_515_p18),64));
end behav;
