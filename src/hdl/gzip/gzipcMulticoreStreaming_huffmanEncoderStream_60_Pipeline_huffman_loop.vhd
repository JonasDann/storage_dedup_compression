-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_huffmanEncoderStream_60_Pipeline_huffman_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    encodedOutStream_dout : IN STD_LOGIC_VECTOR (32 downto 0);
    encodedOutStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    encodedOutStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    encodedOutStream_empty_n : IN STD_LOGIC;
    encodedOutStream_read : OUT STD_LOGIC;
    hufCodeStream_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    hufCodeStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    hufCodeStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    hufCodeStream_full_n : IN STD_LOGIC;
    hufCodeStream_write : OUT STD_LOGIC;
    tmp_data_V : IN STD_LOGIC_VECTOR (31 downto 0);
    litlnTree_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    litlnTree_ce0 : OUT STD_LOGIC;
    litlnTree_q0 : IN STD_LOGIC_VECTOR (18 downto 0);
    distTree_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    distTree_ce0 : OUT STD_LOGIC;
    distTree_q0 : IN STD_LOGIC_VECTOR (18 downto 0) );
end;


architecture behav of gzipcMulticoreStreaming_huffmanEncoderStream_60_Pipeline_huffman_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv9_101 : STD_LOGIC_VECTOR (8 downto 0) := "100000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal next_state_13_load_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal done_load_load_fu_351_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op48_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal next_state_13_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_state_13_reg_778_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal done_load_reg_802 : STD_LOGIC_VECTOR (0 downto 0);
    signal done_load_reg_802_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln501_reg_831 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln501_reg_831_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op144_write_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal dist_code18_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dist_code18_ce0 : STD_LOGIC;
    signal dist_code18_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal length_code47_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal length_code47_ce0 : STD_LOGIC;
    signal length_code47_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal extra_lbits40_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal extra_lbits40_ce0 : STD_LOGIC;
    signal extra_lbits40_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal extra_dbits33_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal extra_dbits33_ce0 : STD_LOGIC;
    signal extra_dbits33_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal base_length11_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal base_length11_ce0 : STD_LOGIC;
    signal base_length11_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal base_dist4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal base_dist4_ce0 : STD_LOGIC;
    signal base_dist4_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal encodedOutStream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal hufCodeStream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal next_state_13_reg_778_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln521_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln521_reg_782 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln521_reg_782_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln510_fu_342_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln510_reg_792 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln510_reg_792_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal done_load_reg_802_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tCh_fu_375_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tCh_reg_806 : STD_LOGIC_VECTOR (7 downto 0);
    signal tCh_reg_806_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tLen_10_fu_379_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tLen_10_reg_811 : STD_LOGIC_VECTOR (7 downto 0);
    signal tOffset_10_reg_816 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln501_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln501_reg_831_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lextra_4_reg_845 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln259_fu_595_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln259_reg_850 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln257_5_fu_599_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln257_5_reg_855 : STD_LOGIC_VECTOR (3 downto 0);
    signal tLen_9_fu_617_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tLen_9_reg_860 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln512_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln499_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln540_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln532_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln510_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln504_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dextra_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln523_fu_501_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal lextra_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln512_4_fu_638_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal dcode_fu_114 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln498_5_fu_548_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_dcode_load_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal lcode_fu_118 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln499_4_fu_552_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_lcode_load : STD_LOGIC_VECTOR (15 downto 0);
    signal done_fu_122 : STD_LOGIC_VECTOR (0 downto 0);
    signal done_237_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_76_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tOffset_fu_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal tOffset_9_fu_589_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tLen_fu_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_state_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln531_fu_511_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln520_fu_535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_next_state_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_011_fu_650_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_012_fu_666_p5 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_13_fu_678_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_s_fu_687_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_0_fu_696_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_strobe_V_fu_361_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_399_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_fu_425_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln498_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tOffset_10_cast_fu_415_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln498_fu_435_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln498_fu_441_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln526_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln515_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal base_dist_load_cast_fu_585_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln532_fu_611_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln510_fu_628_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln257_fu_662_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_627 : BOOLEAN;
    signal ap_condition_631 : BOOLEAN;
    signal ap_condition_291 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_lz77DivideStream_14_0_Pipeline_lz77_divide_dist_code22_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component gzipcMulticoreStreaming_lz77DivideStream_14_0_Pipeline_lz77_divide_length_code51_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component gzipcMulticoreStreaming_huffmanEncoderStream_Pipeline_huffman_loop_extra_lbits_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component gzipcMulticoreStreaming_huffmanEncoderStream_Pipeline_huffman_loop_extra_dbits_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component gzipcMulticoreStreaming_huffmanEncoderStream_Pipeline_huffman_loop_base_length_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gzipcMulticoreStreaming_huffmanEncoderStream_Pipeline_huffman_loop_base_dist_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dist_code18_U : component gzipcMulticoreStreaming_lz77DivideStream_14_0_Pipeline_lz77_divide_dist_code22_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dist_code18_address0,
        ce0 => dist_code18_ce0,
        q0 => dist_code18_q0);

    length_code47_U : component gzipcMulticoreStreaming_lz77DivideStream_14_0_Pipeline_lz77_divide_length_code51_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 259,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => length_code47_address0,
        ce0 => length_code47_ce0,
        q0 => length_code47_q0);

    extra_lbits40_U : component gzipcMulticoreStreaming_huffmanEncoderStream_Pipeline_huffman_loop_extra_lbits_ROM_AUTO_1R
    generic map (
        DataWidth => 3,
        AddressRange => 29,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => extra_lbits40_address0,
        ce0 => extra_lbits40_ce0,
        q0 => extra_lbits40_q0);

    extra_dbits33_U : component gzipcMulticoreStreaming_huffmanEncoderStream_Pipeline_huffman_loop_extra_dbits_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => extra_dbits33_address0,
        ce0 => extra_dbits33_ce0,
        q0 => extra_dbits33_q0);

    base_length11_U : component gzipcMulticoreStreaming_huffmanEncoderStream_Pipeline_huffman_loop_base_length_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 29,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => base_length11_address0,
        ce0 => base_length11_ce0,
        q0 => base_length11_q0);

    base_dist4_U : component gzipcMulticoreStreaming_huffmanEncoderStream_Pipeline_huffman_loop_base_dist_ROM_AUTO_1R
    generic map (
        DataWidth => 15,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => base_dist4_address0,
        ce0 => base_dist4_ce0,
        q0 => base_dist4_q0);

    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    dcode_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    dcode_fu_114(0) <= '0';
                    dcode_fu_114(1) <= '0';
                    dcode_fu_114(2) <= '0';
                    dcode_fu_114(3) <= '0';
                    dcode_fu_114(4) <= '0';
                elsif ((ap_const_boolean_1 = ap_condition_627)) then 
                                        dcode_fu_114(4 downto 0) <= zext_ln498_5_fu_548_p1(4 downto 0);
                end if;
            end if; 
        end if;
    end process;

    dextra_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    dextra_fu_106(0) <= '0';
                    dextra_fu_106(1) <= '0';
                    dextra_fu_106(2) <= '0';
                    dextra_fu_106(3) <= '0';
                elsif (((next_state_13_reg_778 = ap_const_lv32_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                                        dextra_fu_106(3 downto 0) <= zext_ln523_fu_501_p1(3 downto 0);
                end if;
            end if; 
        end if;
    end process;

    done_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    done_fu_122 <= ap_const_lv1_0;
                elsif ((ap_const_boolean_1 = ap_condition_631)) then 
                    done_fu_122 <= done_237_fu_369_p2;
                end if;
            end if; 
        end if;
    end process;

    lcode_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    lcode_fu_118(0) <= '0';
                    lcode_fu_118(1) <= '0';
                    lcode_fu_118(2) <= '0';
                    lcode_fu_118(3) <= '0';
                    lcode_fu_118(4) <= '0';
                elsif ((ap_const_boolean_1 = ap_condition_627)) then 
                                        lcode_fu_118(4 downto 0) <= zext_ln499_4_fu_552_p1(4 downto 0);
                end if;
            end if; 
        end if;
    end process;

    lextra_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    lextra_fu_110(0) <= '0';
                    lextra_fu_110(1) <= '0';
                    lextra_fu_110(2) <= '0';
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (next_state_13_reg_778_pp0_iter2_reg = ap_const_lv32_1))) then 
                                        lextra_fu_110(2 downto 0) <= zext_ln512_4_fu_638_p1(2 downto 0);
                end if;
            end if; 
        end if;
    end process;

    next_state_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((done_fu_122 = ap_const_lv1_0) and (ap_sig_allocacmp_next_state_13 = ap_const_lv32_0) and (icmp_ln501_fu_459_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                next_state_fu_138(0) <= '1';
                next_state_fu_138(1) <= '0';
                next_state_fu_138(2) <= '0';
            elsif (((next_state_13_load_fu_318_p1 = ap_const_lv32_4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                next_state_fu_138(0) <= '1';
                next_state_fu_138(1) <= '0';
                next_state_fu_138(2) <= '1';
            elsif ((((done_fu_122 = ap_const_lv1_0) and (ap_sig_allocacmp_next_state_13 = ap_const_lv32_0) and (icmp_ln501_fu_459_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((next_state_13_load_fu_318_p1 = ap_const_lv32_6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                next_state_fu_138(0) <= '0';
                next_state_fu_138(1) <= '0';
                next_state_fu_138(2) <= '0';
            elsif (((next_state_13_reg_778 = ap_const_lv32_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                                next_state_fu_138(2 downto 0) <= select_ln520_fu_535_p3(2 downto 0);
            elsif (((next_state_13_reg_778 = ap_const_lv32_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                                next_state_fu_138(2 downto 0) <= select_ln531_fu_511_p3(2 downto 0);
            end if; 
        end if;
    end process;

    p_Val2_s_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_s_fu_126 <= tmp_data_V;
                elsif ((ap_const_boolean_1 = ap_condition_631)) then 
                    p_Val2_s_fu_126 <= tmp_data_V_76_fu_357_p1;
                end if;
            end if; 
        end if;
    end process;

    tLen_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln501_reg_831 = ap_const_lv1_1) and (done_load_reg_802 = ap_const_lv1_0) and (next_state_13_reg_778 = ap_const_lv32_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                tLen_fu_134 <= ap_const_lv8_0;
            elsif (((icmp_ln501_reg_831 = ap_const_lv1_0) and (done_load_reg_802 = ap_const_lv1_0) and (next_state_13_reg_778 = ap_const_lv32_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tLen_fu_134 <= tLen_10_reg_811;
            elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (next_state_13_reg_778_pp0_iter2_reg = ap_const_lv32_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tLen_fu_134 <= tLen_9_fu_617_p2;
            end if; 
        end if;
    end process;

    tOffset_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tOffset_fu_130 <= ap_const_lv16_0;
                elsif ((ap_const_boolean_1 = ap_condition_627)) then 
                    tOffset_fu_130 <= tOffset_10_reg_816;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (next_state_13_reg_778_pp0_iter2_reg = ap_const_lv32_6))) then 
                    tOffset_fu_130 <= tOffset_9_fu_589_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                    next_state_13_reg_778(2 downto 0) <= ap_sig_allocacmp_next_state_13(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                done_load_reg_802_pp0_iter2_reg <= done_load_reg_802;
                done_load_reg_802_pp0_iter3_reg <= done_load_reg_802_pp0_iter2_reg;
                icmp_ln501_reg_831_pp0_iter2_reg <= icmp_ln501_reg_831;
                icmp_ln501_reg_831_pp0_iter3_reg <= icmp_ln501_reg_831_pp0_iter2_reg;
                    next_state_13_reg_778_pp0_iter2_reg(2 downto 0) <= next_state_13_reg_778(2 downto 0);
                    next_state_13_reg_778_pp0_iter3_reg(2 downto 0) <= next_state_13_reg_778_pp0_iter2_reg(2 downto 0);
                tCh_reg_806_pp0_iter2_reg <= tCh_reg_806;
                    trunc_ln510_reg_792_pp0_iter2_reg(4 downto 0) <= trunc_ln510_reg_792(4 downto 0);
                    zext_ln521_reg_782_pp0_iter2_reg(4 downto 0) <= zext_ln521_reg_782(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_allocacmp_next_state_13 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                done_load_reg_802 <= done_fu_122;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((done_fu_122 = ap_const_lv1_0) and (ap_sig_allocacmp_next_state_13 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln501_reg_831 <= icmp_ln501_fu_459_p2;
                tCh_reg_806 <= tCh_fu_375_p1;
                tLen_10_reg_811 <= p_Val2_s_fu_126(15 downto 8);
                tOffset_10_reg_816 <= p_Val2_s_fu_126(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((next_state_13_reg_778 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lextra_4_reg_845 <= extra_lbits40_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((next_state_13_reg_778_pp0_iter2_reg = ap_const_lv32_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tLen_9_reg_860 <= tLen_9_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((next_state_13_reg_778_pp0_iter2_reg = ap_const_lv32_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln257_5_reg_855 <= trunc_ln257_5_fu_599_p1;
                trunc_ln259_reg_850 <= trunc_ln259_fu_595_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((next_state_13_load_fu_318_p1 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    trunc_ln510_reg_792(4 downto 0) <= trunc_ln510_fu_342_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((next_state_13_load_fu_318_p1 = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln521_reg_782(4 downto 0) <= zext_ln521_fu_334_p1(4 downto 0);
            end if;
        end if;
    end process;
    next_state_13_reg_778(31 downto 3) <= "00000000000000000000000000000";
    next_state_13_reg_778_pp0_iter3_reg(31 downto 3) <= "00000000000000000000000000000";
    next_state_13_reg_778_pp0_iter2_reg(31 downto 3) <= "00000000000000000000000000000";
    zext_ln521_reg_782(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln521_reg_782_pp0_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    trunc_ln510_reg_792(8 downto 5) <= "0000";
    trunc_ln510_reg_792_pp0_iter2_reg(8 downto 5) <= "0000";
    dextra_fu_106(7 downto 4) <= "0000";
    lextra_fu_110(7 downto 3) <= "00000";
    dcode_fu_114(15 downto 5) <= "00000000000";
    lcode_fu_118(15 downto 5) <= "00000000000";
    next_state_fu_138(31 downto 3) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln510_fu_628_p2 <= std_logic_vector(unsigned(trunc_ln510_reg_792_pp0_iter2_reg) + unsigned(ap_const_lv9_101));
    add_ln532_fu_611_p2 <= std_logic_vector(unsigned(tLen_fu_134) + unsigned(ap_const_lv8_FD));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, encodedOutStream_empty_n, ap_predicate_op48_read_state2, hufCodeStream_full_n, next_state_13_reg_778_pp0_iter3_reg, ap_predicate_op144_write_state5)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((ap_predicate_op144_write_state5 = ap_const_boolean_1) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_1) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_5) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_4) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_6) and (hufCodeStream_full_n = ap_const_logic_0)))) or ((ap_predicate_op48_read_state2 = ap_const_boolean_1) and (encodedOutStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, encodedOutStream_empty_n, ap_predicate_op48_read_state2, hufCodeStream_full_n, next_state_13_reg_778_pp0_iter3_reg, ap_predicate_op144_write_state5)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((ap_predicate_op144_write_state5 = ap_const_boolean_1) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_1) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_5) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_4) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_6) and (hufCodeStream_full_n = ap_const_logic_0)))) or ((ap_predicate_op48_read_state2 = ap_const_boolean_1) and (encodedOutStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, encodedOutStream_empty_n, ap_predicate_op48_read_state2, hufCodeStream_full_n, next_state_13_reg_778_pp0_iter3_reg, ap_predicate_op144_write_state5)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((ap_predicate_op144_write_state5 = ap_const_boolean_1) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_1) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_5) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_4) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_6) and (hufCodeStream_full_n = ap_const_logic_0)))) or ((ap_predicate_op48_read_state2 = ap_const_boolean_1) and (encodedOutStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(encodedOutStream_empty_n, ap_predicate_op48_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op48_read_state2 = ap_const_boolean_1) and (encodedOutStream_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(hufCodeStream_full_n, next_state_13_reg_778_pp0_iter3_reg, ap_predicate_op144_write_state5)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (((ap_predicate_op144_write_state5 = ap_const_boolean_1) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_1) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_5) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_4) and (hufCodeStream_full_n = ap_const_logic_0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_6) and (hufCodeStream_full_n = ap_const_logic_0)));
    end process;


    ap_condition_291_assign_proc : process(next_state_13_reg_778_pp0_iter2_reg, done_load_reg_802_pp0_iter2_reg, icmp_ln501_reg_831_pp0_iter2_reg)
    begin
                ap_condition_291 <= ((icmp_ln501_reg_831_pp0_iter2_reg = ap_const_lv1_1) and (done_load_reg_802_pp0_iter2_reg = ap_const_lv1_0) and (next_state_13_reg_778_pp0_iter2_reg = ap_const_lv32_0));
    end process;


    ap_condition_627_assign_proc : process(ap_enable_reg_pp0_iter2, next_state_13_reg_778, done_load_reg_802)
    begin
                ap_condition_627 <= ((done_load_reg_802 = ap_const_lv1_0) and (next_state_13_reg_778 = ap_const_lv32_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_631_assign_proc : process(ap_enable_reg_pp0_iter1, done_fu_122, ap_sig_allocacmp_next_state_13)
    begin
                ap_condition_631 <= ((done_fu_122 = ap_const_lv1_0) and (ap_sig_allocacmp_next_state_13 = ap_const_lv32_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, done_load_load_fu_351_p1, ap_block_pp0_stage0_subdone, ap_sig_allocacmp_next_state_13)
    begin
        if (((done_load_load_fu_351_p1 = ap_const_lv1_1) and (ap_sig_allocacmp_next_state_13 = ap_const_lv32_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_predicate_op144_write_state5_assign_proc : process(next_state_13_reg_778_pp0_iter3_reg, done_load_reg_802_pp0_iter3_reg, icmp_ln501_reg_831_pp0_iter3_reg)
    begin
                ap_predicate_op144_write_state5 <= ((icmp_ln501_reg_831_pp0_iter3_reg = ap_const_lv1_1) and (done_load_reg_802_pp0_iter3_reg = ap_const_lv1_0) and (next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_0));
    end process;


    ap_predicate_op48_read_state2_assign_proc : process(done_fu_122, ap_sig_allocacmp_next_state_13)
    begin
                ap_predicate_op48_read_state2 <= ((done_fu_122 = ap_const_lv1_0) and (ap_sig_allocacmp_next_state_13 = ap_const_lv32_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_dcode_load_5_assign_proc : process(ap_enable_reg_pp0_iter2, next_state_13_reg_778, done_load_reg_802, ap_block_pp0_stage0, dcode_fu_114, zext_ln498_5_fu_548_p1)
    begin
        if (((done_load_reg_802 = ap_const_lv1_0) and (next_state_13_reg_778 = ap_const_lv32_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_dcode_load_5 <= zext_ln498_5_fu_548_p1;
        else 
            ap_sig_allocacmp_dcode_load_5 <= dcode_fu_114;
        end if; 
    end process;


    ap_sig_allocacmp_lcode_load_assign_proc : process(ap_enable_reg_pp0_iter2, next_state_13_reg_778, done_load_reg_802, ap_block_pp0_stage0, lcode_fu_118, zext_ln499_4_fu_552_p1)
    begin
        if (((done_load_reg_802 = ap_const_lv1_0) and (next_state_13_reg_778 = ap_const_lv32_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_lcode_load <= zext_ln499_4_fu_552_p1;
        else 
            ap_sig_allocacmp_lcode_load <= lcode_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_next_state_13_assign_proc : process(ap_enable_reg_pp0_iter2, next_state_13_reg_778, ap_block_pp0_stage0, next_state_fu_138, select_ln531_fu_511_p3, select_ln520_fu_535_p3)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((next_state_13_reg_778 = ap_const_lv32_1)) then 
                ap_sig_allocacmp_next_state_13 <= select_ln520_fu_535_p3;
            elsif ((next_state_13_reg_778 = ap_const_lv32_5)) then 
                ap_sig_allocacmp_next_state_13 <= select_ln531_fu_511_p3;
            else 
                ap_sig_allocacmp_next_state_13 <= next_state_fu_138;
            end if;
        else 
            ap_sig_allocacmp_next_state_13 <= next_state_fu_138;
        end if; 
    end process;

    base_dist4_address0 <= zext_ln540_fu_488_p1(5 - 1 downto 0);

    base_dist4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            base_dist4_ce0 <= ap_const_logic_1;
        else 
            base_dist4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    base_dist_load_cast_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(base_dist4_q0),16));
    base_length11_address0 <= zext_ln532_fu_496_p1(5 - 1 downto 0);

    base_length11_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            base_length11_ce0 <= ap_const_logic_1;
        else 
            base_length11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    distTree_address0 <= zext_ln521_reg_782_pp0_iter2_reg(5 - 1 downto 0);

    distTree_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            distTree_ce0 <= ap_const_logic_1;
        else 
            distTree_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dist_code18_address0 <= zext_ln498_fu_449_p1(9 - 1 downto 0);

    dist_code18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dist_code18_ce0 <= ap_const_logic_1;
        else 
            dist_code18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    done_237_fu_369_p2 <= (tmp_strobe_V_fu_361_p3 xor ap_const_lv1_1);
    done_load_load_fu_351_p1 <= done_fu_122;

    encodedOutStream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, encodedOutStream_empty_n, ap_predicate_op48_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op48_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            encodedOutStream_blk_n <= encodedOutStream_empty_n;
        else 
            encodedOutStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    encodedOutStream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op48_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op48_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            encodedOutStream_read <= ap_const_logic_1;
        else 
            encodedOutStream_read <= ap_const_logic_0;
        end if; 
    end process;

    extra_dbits33_address0 <= zext_ln521_fu_334_p1(5 - 1 downto 0);

    extra_dbits33_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            extra_dbits33_ce0 <= ap_const_logic_1;
        else 
            extra_dbits33_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    extra_lbits40_address0 <= zext_ln512_fu_346_p1(5 - 1 downto 0);

    extra_lbits40_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            extra_lbits40_ce0 <= ap_const_logic_1;
        else 
            extra_lbits40_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hufCodeStream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, hufCodeStream_full_n, next_state_13_reg_778_pp0_iter3_reg, ap_predicate_op144_write_state5, ap_block_pp0_stage0)
    begin
        if ((((ap_predicate_op144_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_5) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_4) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_6) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            hufCodeStream_blk_n <= hufCodeStream_full_n;
        else 
            hufCodeStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hufCodeStream_din_assign_proc : process(ap_enable_reg_pp0_iter4, next_state_13_reg_778_pp0_iter3_reg, ap_predicate_op144_write_state5, p_011_fu_650_p4, ap_block_pp0_stage0_01001, p_012_fu_666_p5, p_13_fu_678_p3, p_s_fu_687_p3, p_0_fu_696_p3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then
            if ((ap_predicate_op144_write_state5 = ap_const_boolean_1)) then 
                hufCodeStream_din <= p_0_fu_696_p3;
            elsif ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_1)) then 
                hufCodeStream_din <= p_s_fu_687_p3;
            elsif ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_5)) then 
                hufCodeStream_din <= p_13_fu_678_p3;
            elsif ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_4)) then 
                hufCodeStream_din <= p_012_fu_666_p5;
            elsif ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_6)) then 
                hufCodeStream_din <= p_011_fu_650_p4;
            else 
                hufCodeStream_din <= "XXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            hufCodeStream_din <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hufCodeStream_write_assign_proc : process(ap_enable_reg_pp0_iter4, next_state_13_reg_778_pp0_iter3_reg, ap_predicate_op144_write_state5, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op144_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_5) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_4) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((next_state_13_reg_778_pp0_iter3_reg = ap_const_lv32_6) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            hufCodeStream_write <= ap_const_logic_1;
        else 
            hufCodeStream_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln498_fu_409_p2 <= "1" when (tmp_fu_399_p4 = ap_const_lv8_0) else "0";
    icmp_ln501_fu_459_p2 <= "1" when (tLen_10_fu_379_p4 = ap_const_lv8_0) else "0";
    icmp_ln515_fu_529_p2 <= "0" when (extra_lbits40_q0 = ap_const_lv3_0) else "1";
    icmp_ln526_fu_505_p2 <= "0" when (extra_dbits33_q0 = ap_const_lv4_0) else "1";
    length_code47_address0 <= zext_ln499_fu_454_p1(9 - 1 downto 0);

    length_code47_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            length_code47_ce0 <= ap_const_logic_1;
        else 
            length_code47_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    litlnTree_address0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, next_state_13_reg_778_pp0_iter2_reg, zext_ln510_fu_633_p1, zext_ln504_fu_646_p1, ap_condition_291)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((ap_const_boolean_1 = ap_condition_291)) then 
                litlnTree_address0 <= zext_ln504_fu_646_p1(9 - 1 downto 0);
            elsif ((next_state_13_reg_778_pp0_iter2_reg = ap_const_lv32_1)) then 
                litlnTree_address0 <= zext_ln510_fu_633_p1(9 - 1 downto 0);
            else 
                litlnTree_address0 <= "XXXXXXXXX";
            end if;
        else 
            litlnTree_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    litlnTree_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, next_state_13_reg_778_pp0_iter2_reg, done_load_reg_802_pp0_iter2_reg, icmp_ln501_reg_831_pp0_iter2_reg)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln501_reg_831_pp0_iter2_reg = ap_const_lv1_1) and (done_load_reg_802_pp0_iter2_reg = ap_const_lv1_0) and (next_state_13_reg_778_pp0_iter2_reg = ap_const_lv32_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (next_state_13_reg_778_pp0_iter2_reg = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            litlnTree_ce0 <= ap_const_logic_1;
        else 
            litlnTree_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_state_13_load_fu_318_p1 <= ap_sig_allocacmp_next_state_13;
    p_011_fu_650_p4 <= ((ap_const_lv1_1 & trunc_ln257_5_reg_855) & trunc_ln259_reg_850);
    p_012_fu_666_p5 <= (((ap_const_lv1_1 & trunc_ln257_fu_662_p1) & ap_const_lv7_0) & tLen_9_reg_860);
    p_0_fu_696_p3 <= (ap_const_lv1_1 & litlnTree_q0);
    p_13_fu_678_p3 <= (ap_const_lv1_1 & distTree_q0);
    p_s_fu_687_p3 <= (ap_const_lv1_1 & litlnTree_q0);
    select_ln498_fu_441_p3 <= 
        tOffset_10_cast_fu_415_p4 when (icmp_ln498_fu_409_p2(0) = '1') else 
        xor_ln498_fu_435_p2;
    select_ln520_fu_535_p3 <= 
        ap_const_lv32_4 when (icmp_ln515_fu_529_p2(0) = '1') else 
        ap_const_lv32_5;
    select_ln531_fu_511_p3 <= 
        ap_const_lv32_6 when (icmp_ln526_fu_505_p2(0) = '1') else 
        ap_const_lv32_0;
    tCh_fu_375_p1 <= p_Val2_s_fu_126(8 - 1 downto 0);
    tLen_10_fu_379_p4 <= p_Val2_s_fu_126(15 downto 8);
    tLen_9_fu_617_p2 <= std_logic_vector(unsigned(add_ln532_fu_611_p2) - unsigned(base_length11_q0));
    tOffset_10_cast_fu_415_p4 <= p_Val2_s_fu_126(24 downto 16);
    tOffset_9_fu_589_p2 <= std_logic_vector(unsigned(tOffset_fu_130) - unsigned(base_dist_load_cast_fu_585_p1));
    tmp_data_V_76_fu_357_p1 <= encodedOutStream_dout(32 - 1 downto 0);
    tmp_fu_399_p4 <= p_Val2_s_fu_126(31 downto 24);
    tmp_strobe_V_fu_361_p3 <= encodedOutStream_dout(32 downto 32);
    trunc_ln257_5_fu_599_p1 <= dextra_fu_106(4 - 1 downto 0);
    trunc_ln257_fu_662_p1 <= lextra_fu_110(4 - 1 downto 0);
    trunc_ln259_fu_595_p1 <= tOffset_9_fu_589_p2(15 - 1 downto 0);
    trunc_ln510_fu_342_p1 <= ap_sig_allocacmp_lcode_load(9 - 1 downto 0);
    trunc_ln_fu_425_p4 <= p_Val2_s_fu_126(31 downto 23);
    xor_ln498_fu_435_p2 <= (trunc_ln_fu_425_p4 xor ap_const_lv9_100);
    zext_ln498_5_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dist_code18_q0),16));
    zext_ln498_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln498_fu_441_p3),64));
    zext_ln499_4_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_code47_q0),16));
    zext_ln499_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tLen_10_fu_379_p4),64));
    zext_ln504_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tCh_reg_806_pp0_iter2_reg),64));
    zext_ln510_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln510_fu_628_p2),64));
    zext_ln512_4_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lextra_4_reg_845),8));
    zext_ln512_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_lcode_load),64));
    zext_ln521_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_dcode_load_5),64));
    zext_ln523_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(extra_dbits33_q0),8));
    zext_ln532_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lcode_fu_118),64));
    zext_ln540_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dcode_fu_114),64));
end behav;
