-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_multicoreDistributor_Pipeline_VITIS_LOOP_240_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    storedBufferStream_dout : IN STD_LOGIC_VECTOR (67 downto 0);
    storedBufferStream_empty_n : IN STD_LOGIC;
    storedBufferStream_read : OUT STD_LOGIC;
    distStream_6_din : OUT STD_LOGIC_VECTOR (67 downto 0);
    distStream_6_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_6_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_6_full_n : IN STD_LOGIC;
    distStream_6_write : OUT STD_LOGIC;
    distStream_5_din : OUT STD_LOGIC_VECTOR (67 downto 0);
    distStream_5_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_5_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_5_full_n : IN STD_LOGIC;
    distStream_5_write : OUT STD_LOGIC;
    distStream_4_din : OUT STD_LOGIC_VECTOR (67 downto 0);
    distStream_4_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_4_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_4_full_n : IN STD_LOGIC;
    distStream_4_write : OUT STD_LOGIC;
    distStream_3_din : OUT STD_LOGIC_VECTOR (67 downto 0);
    distStream_3_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_3_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_3_full_n : IN STD_LOGIC;
    distStream_3_write : OUT STD_LOGIC;
    distStream_2_din : OUT STD_LOGIC_VECTOR (67 downto 0);
    distStream_2_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_2_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_2_full_n : IN STD_LOGIC;
    distStream_2_write : OUT STD_LOGIC;
    distStream_1_din : OUT STD_LOGIC_VECTOR (67 downto 0);
    distStream_1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_1_full_n : IN STD_LOGIC;
    distStream_1_write : OUT STD_LOGIC;
    distStream_0_din : OUT STD_LOGIC_VECTOR (67 downto 0);
    distStream_0_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_0_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_0_full_n : IN STD_LOGIC;
    distStream_0_write : OUT STD_LOGIC;
    distStream_7_din : OUT STD_LOGIC_VECTOR (67 downto 0);
    distStream_7_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_7_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    distStream_7_full_n : IN STD_LOGIC;
    distStream_7_write : OUT STD_LOGIC;
    strdCntr_V : IN STD_LOGIC_VECTOR (15 downto 0);
    writeSize : IN STD_LOGIC_VECTOR (31 downto 0);
    readSize_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_cast : IN STD_LOGIC_VECTOR (2 downto 0);
    writeSize_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    writeSize_2_out_ap_vld : OUT STD_LOGIC;
    endBlck_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    endBlck_out_ap_vld : OUT STD_LOGIC;
    cmp_i_i_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    cmp_i_i_out_ap_vld : OUT STD_LOGIC;
    icmp_ln240_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    icmp_ln240_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_multicoreDistributor_Pipeline_VITIS_LOOP_240_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_2000 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal or_ln240_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal distStream_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal storedBufferStream_blk_n : STD_LOGIC;
    signal distStream_1_blk_n : STD_LOGIC;
    signal distStream_2_blk_n : STD_LOGIC;
    signal distStream_3_blk_n : STD_LOGIC;
    signal distStream_4_blk_n : STD_LOGIC;
    signal distStream_5_blk_n : STD_LOGIC;
    signal distStream_6_blk_n : STD_LOGIC;
    signal distStream_7_blk_n : STD_LOGIC;
    signal endBlck_reg_216 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_Val2_s_reg_351 : STD_LOGIC_VECTOR (67 downto 0);
    signal endBlck_1_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal writeSize_2_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal writeSize_4_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal strdCntr_V_1_fu_98 : STD_LOGIC_VECTOR (15 downto 0);
    signal strdCntr_V_4_fu_294_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal cmp_i_i_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln674_fu_264_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln886_fu_268_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln245_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal strdCntr_V_3_fu_272_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1065_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln246_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_329 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    endBlck_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_329)) then 
                    endBlck_reg_216 <= endBlck_1_fu_308_p2;
                elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    endBlck_reg_216 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    strdCntr_V_1_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    strdCntr_V_1_fu_98 <= strdCntr_V;
                elsif (((or_ln240_fu_258_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    strdCntr_V_1_fu_98 <= strdCntr_V_4_fu_294_p3;
                end if;
            end if; 
        end if;
    end process;

    writeSize_2_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    writeSize_2_fu_94 <= writeSize;
                elsif (((or_ln240_fu_258_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    writeSize_2_fu_94 <= writeSize_4_fu_282_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln240_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_s_reg_351 <= storedBufferStream_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, storedBufferStream_empty_n, or_ln240_fu_258_p2, distStream_6_full_n, distStream_5_full_n, distStream_4_full_n, distStream_3_full_n, distStream_2_full_n, distStream_1_full_n, distStream_0_full_n, distStream_7_full_n, p_cast)
    begin
                ap_block_pp0_stage0_01001 <= (((or_ln240_fu_258_p2 = ap_const_lv1_0) and (storedBufferStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((distStream_2_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_2)) or ((distStream_3_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_3)) or ((distStream_4_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_4)) or ((distStream_5_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_5)) or ((p_cast = ap_const_lv3_6) and (distStream_6_full_n = ap_const_logic_0)) or ((p_cast = ap_const_lv3_7) and (distStream_7_full_n = ap_const_logic_0)) or ((p_cast = ap_const_lv3_0) and (distStream_0_full_n = ap_const_logic_0)) or ((p_cast = ap_const_lv3_1) and (distStream_1_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, storedBufferStream_empty_n, or_ln240_fu_258_p2, distStream_6_full_n, distStream_5_full_n, distStream_4_full_n, distStream_3_full_n, distStream_2_full_n, distStream_1_full_n, distStream_0_full_n, distStream_7_full_n, p_cast)
    begin
                ap_block_pp0_stage0_11001 <= (((or_ln240_fu_258_p2 = ap_const_lv1_0) and (storedBufferStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((distStream_2_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_2)) or ((distStream_3_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_3)) or ((distStream_4_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_4)) or ((distStream_5_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_5)) or ((p_cast = ap_const_lv3_6) and (distStream_6_full_n = ap_const_logic_0)) or ((p_cast = ap_const_lv3_7) and (distStream_7_full_n = ap_const_logic_0)) or ((p_cast = ap_const_lv3_0) and (distStream_0_full_n = ap_const_logic_0)) or ((p_cast = ap_const_lv3_1) and (distStream_1_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, storedBufferStream_empty_n, or_ln240_fu_258_p2, distStream_6_full_n, distStream_5_full_n, distStream_4_full_n, distStream_3_full_n, distStream_2_full_n, distStream_1_full_n, distStream_0_full_n, distStream_7_full_n, p_cast)
    begin
                ap_block_pp0_stage0_subdone <= (((or_ln240_fu_258_p2 = ap_const_lv1_0) and (storedBufferStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((distStream_2_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_2)) or ((distStream_3_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_3)) or ((distStream_4_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_4)) or ((distStream_5_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_5)) or ((p_cast = ap_const_lv3_6) and (distStream_6_full_n = ap_const_logic_0)) or ((p_cast = ap_const_lv3_7) and (distStream_7_full_n = ap_const_logic_0)) or ((p_cast = ap_const_lv3_0) and (distStream_0_full_n = ap_const_logic_0)) or ((p_cast = ap_const_lv3_1) and (distStream_1_full_n = ap_const_logic_0)))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(storedBufferStream_empty_n, or_ln240_fu_258_p2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((or_ln240_fu_258_p2 = ap_const_lv1_0) and (storedBufferStream_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(distStream_6_full_n, distStream_5_full_n, distStream_4_full_n, distStream_3_full_n, distStream_2_full_n, distStream_1_full_n, distStream_0_full_n, distStream_7_full_n, p_cast)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((distStream_2_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_2)) or ((distStream_3_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_3)) or ((distStream_4_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_4)) or ((distStream_5_full_n = ap_const_logic_0) and (p_cast = ap_const_lv3_5)) or ((p_cast = ap_const_lv3_6) and (distStream_6_full_n = ap_const_logic_0)) or ((p_cast = ap_const_lv3_7) and (distStream_7_full_n = ap_const_logic_0)) or ((p_cast = ap_const_lv3_0) and (distStream_0_full_n = ap_const_logic_0)) or ((p_cast = ap_const_lv3_1) and (distStream_1_full_n = ap_const_logic_0)));
    end process;


    ap_condition_329_assign_proc : process(ap_enable_reg_pp0_iter1, or_ln240_fu_258_p2, ap_block_pp0_stage0_11001)
    begin
                ap_condition_329 <= ((or_ln240_fu_258_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln240_fu_258_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((or_ln240_fu_258_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_i_fu_245_p2 <= "1" when (strdCntr_V_1_fu_98 = ap_const_lv16_0) else "0";
    cmp_i_i_out <= cmp_i_i_fu_245_p2;

    cmp_i_i_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, or_ln240_fu_258_p2, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln240_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cmp_i_i_out_ap_vld <= ap_const_logic_1;
        else 
            cmp_i_i_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    distStream_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, distStream_0_full_n, p_cast, ap_block_pp0_stage0)
    begin
        if (((p_cast = ap_const_lv3_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            distStream_0_blk_n <= distStream_0_full_n;
        else 
            distStream_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    distStream_0_din <= p_Val2_s_reg_351;

    distStream_0_write_assign_proc : process(ap_enable_reg_pp0_iter2, p_cast, ap_block_pp0_stage0_11001)
    begin
        if (((p_cast = ap_const_lv3_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            distStream_0_write <= ap_const_logic_1;
        else 
            distStream_0_write <= ap_const_logic_0;
        end if; 
    end process;


    distStream_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, distStream_1_full_n, p_cast, ap_block_pp0_stage0)
    begin
        if (((p_cast = ap_const_lv3_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            distStream_1_blk_n <= distStream_1_full_n;
        else 
            distStream_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    distStream_1_din <= p_Val2_s_reg_351;

    distStream_1_write_assign_proc : process(ap_enable_reg_pp0_iter2, p_cast, ap_block_pp0_stage0_11001)
    begin
        if (((p_cast = ap_const_lv3_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            distStream_1_write <= ap_const_logic_1;
        else 
            distStream_1_write <= ap_const_logic_0;
        end if; 
    end process;


    distStream_2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, distStream_2_full_n, p_cast, ap_block_pp0_stage0)
    begin
        if (((p_cast = ap_const_lv3_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            distStream_2_blk_n <= distStream_2_full_n;
        else 
            distStream_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    distStream_2_din <= p_Val2_s_reg_351;

    distStream_2_write_assign_proc : process(ap_enable_reg_pp0_iter2, p_cast, ap_block_pp0_stage0_11001)
    begin
        if (((p_cast = ap_const_lv3_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            distStream_2_write <= ap_const_logic_1;
        else 
            distStream_2_write <= ap_const_logic_0;
        end if; 
    end process;


    distStream_3_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, distStream_3_full_n, p_cast, ap_block_pp0_stage0)
    begin
        if (((p_cast = ap_const_lv3_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            distStream_3_blk_n <= distStream_3_full_n;
        else 
            distStream_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    distStream_3_din <= p_Val2_s_reg_351;

    distStream_3_write_assign_proc : process(ap_enable_reg_pp0_iter2, p_cast, ap_block_pp0_stage0_11001)
    begin
        if (((p_cast = ap_const_lv3_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            distStream_3_write <= ap_const_logic_1;
        else 
            distStream_3_write <= ap_const_logic_0;
        end if; 
    end process;


    distStream_4_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, distStream_4_full_n, p_cast, ap_block_pp0_stage0)
    begin
        if (((p_cast = ap_const_lv3_4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            distStream_4_blk_n <= distStream_4_full_n;
        else 
            distStream_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    distStream_4_din <= p_Val2_s_reg_351;

    distStream_4_write_assign_proc : process(ap_enable_reg_pp0_iter2, p_cast, ap_block_pp0_stage0_11001)
    begin
        if (((p_cast = ap_const_lv3_4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            distStream_4_write <= ap_const_logic_1;
        else 
            distStream_4_write <= ap_const_logic_0;
        end if; 
    end process;


    distStream_5_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, distStream_5_full_n, p_cast, ap_block_pp0_stage0)
    begin
        if (((p_cast = ap_const_lv3_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            distStream_5_blk_n <= distStream_5_full_n;
        else 
            distStream_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    distStream_5_din <= p_Val2_s_reg_351;

    distStream_5_write_assign_proc : process(ap_enable_reg_pp0_iter2, p_cast, ap_block_pp0_stage0_11001)
    begin
        if (((p_cast = ap_const_lv3_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            distStream_5_write <= ap_const_logic_1;
        else 
            distStream_5_write <= ap_const_logic_0;
        end if; 
    end process;


    distStream_6_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, distStream_6_full_n, p_cast, ap_block_pp0_stage0)
    begin
        if (((p_cast = ap_const_lv3_6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            distStream_6_blk_n <= distStream_6_full_n;
        else 
            distStream_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    distStream_6_din <= p_Val2_s_reg_351;

    distStream_6_write_assign_proc : process(ap_enable_reg_pp0_iter2, p_cast, ap_block_pp0_stage0_11001)
    begin
        if (((p_cast = ap_const_lv3_6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            distStream_6_write <= ap_const_logic_1;
        else 
            distStream_6_write <= ap_const_logic_0;
        end if; 
    end process;


    distStream_7_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, distStream_7_full_n, p_cast, ap_block_pp0_stage0)
    begin
        if (((p_cast = ap_const_lv3_7) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            distStream_7_blk_n <= distStream_7_full_n;
        else 
            distStream_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    distStream_7_din <= p_Val2_s_reg_351;

    distStream_7_write_assign_proc : process(ap_enable_reg_pp0_iter2, p_cast, ap_block_pp0_stage0_11001)
    begin
        if (((p_cast = ap_const_lv3_7) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            distStream_7_write <= ap_const_logic_1;
        else 
            distStream_7_write <= ap_const_logic_0;
        end if; 
    end process;

    endBlck_1_fu_308_p2 <= (xor_ln246_fu_302_p2 and endBlck_reg_216);
    endBlck_out <= endBlck_reg_216;

    endBlck_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, or_ln240_fu_258_p2, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln240_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            endBlck_out_ap_vld <= ap_const_logic_1;
        else 
            endBlck_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1065_fu_288_p2 <= "1" when (strdCntr_V_3_fu_272_p2 = ap_const_lv16_2000) else "0";
    icmp_ln240_fu_252_p2 <= "1" when (writeSize_2_fu_94 = readSize_1) else "0";
    icmp_ln240_out <= icmp_ln240_fu_252_p2;

    icmp_ln240_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, or_ln240_fu_258_p2, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln240_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            icmp_ln240_out_ap_vld <= ap_const_logic_1;
        else 
            icmp_ln240_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln240_fu_258_p2 <= (icmp_ln240_fu_252_p2 or cmp_i_i_fu_245_p2);

    storedBufferStream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, storedBufferStream_empty_n, or_ln240_fu_258_p2, ap_block_pp0_stage0)
    begin
        if (((or_ln240_fu_258_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            storedBufferStream_blk_n <= storedBufferStream_empty_n;
        else 
            storedBufferStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    storedBufferStream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln240_fu_258_p2, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln240_fu_258_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            storedBufferStream_read <= ap_const_logic_1;
        else 
            storedBufferStream_read <= ap_const_logic_0;
        end if; 
    end process;

    strdCntr_V_3_fu_272_p2 <= std_logic_vector(unsigned(strdCntr_V_1_fu_98) + unsigned(zext_ln886_fu_268_p1));
    strdCntr_V_4_fu_294_p3 <= 
        ap_const_lv16_0 when (icmp_ln1065_fu_288_p2(0) = '1') else 
        strdCntr_V_3_fu_272_p2;
    trunc_ln674_fu_264_p1 <= storedBufferStream_dout(4 - 1 downto 0);
    writeSize_2_out <= writeSize_2_fu_94;

    writeSize_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, or_ln240_fu_258_p2, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln240_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            writeSize_2_out_ap_vld <= ap_const_logic_1;
        else 
            writeSize_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    writeSize_4_fu_282_p2 <= std_logic_vector(unsigned(zext_ln245_fu_278_p1) + unsigned(writeSize_2_fu_94));
    xor_ln246_fu_302_p2 <= (icmp_ln1065_fu_288_p2 xor ap_const_lv1_1);
    zext_ln245_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln674_fu_264_p1),32));
    zext_ln886_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln674_fu_264_p1),16));
end behav;
