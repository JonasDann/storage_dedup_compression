-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_radixPartialFinalSort_286_10_14_Pipeline_read_heap_compute_histogram is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    intlHeapStream_i_2_dout : IN STD_LOGIC_VECTOR (24 downto 0);
    intlHeapStream_i_2_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    intlHeapStream_i_2_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    intlHeapStream_i_2_empty_n : IN STD_LOGIC;
    intlHeapStream_i_2_read : OUT STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (23 downto 0);
    prev_sorting_value_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    prev_sorting_value_V_ce0 : OUT STD_LOGIC;
    prev_sorting_value_V_we0 : OUT STD_LOGIC;
    prev_sorting_value_V_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    prev_sorting_frequency_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    prev_sorting_frequency_V_ce0 : OUT STD_LOGIC;
    prev_sorting_frequency_V_we0 : OUT STD_LOGIC;
    prev_sorting_frequency_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    heap_value_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    heap_value_V_ce1 : OUT STD_LOGIC;
    heap_value_V_we1 : OUT STD_LOGIC;
    heap_value_V_d1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    heap_frequency_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    heap_frequency_V_ce1 : OUT STD_LOGIC;
    heap_frequency_V_we1 : OUT STD_LOGIC;
    heap_frequency_V_d1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    current_digit_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    current_digit_V_ce0 : OUT STD_LOGIC;
    current_digit_V_we0 : OUT STD_LOGIC;
    current_digit_V_d0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    digit_histogram_V_66_out : OUT STD_LOGIC_VECTOR (9 downto 0);
    digit_histogram_V_66_out_ap_vld : OUT STD_LOGIC;
    digit_histogram_V_65_out : OUT STD_LOGIC_VECTOR (9 downto 0);
    digit_histogram_V_65_out_ap_vld : OUT STD_LOGIC;
    digit_histogram_V_73_out : OUT STD_LOGIC_VECTOR (9 downto 0);
    digit_histogram_V_73_out_ap_vld : OUT STD_LOGIC;
    heapLength_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    heapLength_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_radixPartialFinalSort_286_10_14_Pipeline_read_heap_compute_histogram is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_phi_mux_inHeapV_strobe_V_phi_fu_241_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal intlHeapStream_i_2_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal inHeapV_strobe_V_reg_237 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln499_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal heapLength_fu_100 : STD_LOGIC_VECTOR (15 downto 0);
    signal heapLength_8_fu_282_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln145_fu_104 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln145_fu_381_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal digit_histogram_V_fu_108 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_histogram_V_21_fu_355_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_V_fu_330_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal digit_histogram_V_18_fu_112 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_histogram_V_19_fu_116 : STD_LOGIC_VECTOR (9 downto 0);
    signal digit_histogram_V_20_fu_120 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal inHeapV_data_value_V_fu_303_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_341_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_341_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_264 : BOOLEAN;
    signal ap_condition_267 : BOOLEAN;
    signal ap_condition_270 : BOOLEAN;
    signal ap_condition_273 : BOOLEAN;
    signal ap_condition_278 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_mux_42_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (9 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_10_1_1_U1310 : component gzipcMulticoreStreaming_mux_42_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => digit_histogram_V_fu_108,
        din1 => digit_histogram_V_18_fu_112,
        din2 => digit_histogram_V_19_fu_116,
        din3 => digit_histogram_V_20_fu_120,
        din4 => tmp_s_fu_341_p5,
        dout => tmp_s_fu_341_p6);

    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    digit_histogram_V_18_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_histogram_V_18_fu_112 <= ap_const_lv10_0;
                elsif ((ap_const_boolean_1 = ap_condition_264)) then 
                    digit_histogram_V_18_fu_112 <= digit_histogram_V_21_fu_355_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_histogram_V_19_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_histogram_V_19_fu_116 <= ap_const_lv10_0;
                elsif ((ap_const_boolean_1 = ap_condition_267)) then 
                    digit_histogram_V_19_fu_116 <= digit_histogram_V_21_fu_355_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_histogram_V_20_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_histogram_V_20_fu_120 <= ap_const_lv10_0;
                elsif ((ap_const_boolean_1 = ap_condition_270)) then 
                    digit_histogram_V_20_fu_120 <= digit_histogram_V_21_fu_355_p2;
                end if;
            end if; 
        end if;
    end process;

    digit_histogram_V_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    digit_histogram_V_fu_108 <= ap_const_lv10_0;
                elsif ((ap_const_boolean_1 = ap_condition_273)) then 
                    digit_histogram_V_fu_108 <= digit_histogram_V_21_fu_355_p2;
                end if;
            end if; 
        end if;
    end process;

    heapLength_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    heapLength_fu_100 <= ap_const_lv16_0;
                elsif (((inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    heapLength_fu_100 <= heapLength_8_fu_282_p2;
                end if;
            end if; 
        end if;
    end process;

    inHeapV_strobe_V_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_278)) then 
                    inHeapV_strobe_V_reg_237 <= intlHeapStream_i_2_dout(24 downto 24);
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    inHeapV_strobe_V_reg_237 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    phi_ln145_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_ln145_fu_104 <= empty;
                elsif (((inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    phi_ln145_fu_104 <= trunc_ln145_fu_381_p1;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, intlHeapStream_i_2_empty_n, inHeapV_strobe_V_reg_237)
    begin
                ap_block_pp0_stage0_01001 <= ((inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (intlHeapStream_i_2_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, intlHeapStream_i_2_empty_n, inHeapV_strobe_V_reg_237)
    begin
                ap_block_pp0_stage0_11001 <= ((inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (intlHeapStream_i_2_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, intlHeapStream_i_2_empty_n, inHeapV_strobe_V_reg_237)
    begin
                ap_block_pp0_stage0_subdone <= ((inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (intlHeapStream_i_2_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(intlHeapStream_i_2_empty_n, inHeapV_strobe_V_reg_237)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (intlHeapStream_i_2_empty_n = ap_const_logic_0));
    end process;


    ap_condition_264_assign_proc : process(ap_enable_reg_pp0_iter1, inHeapV_strobe_V_reg_237, digit_V_fu_330_p4)
    begin
                ap_condition_264 <= ((inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (digit_V_fu_330_p4 = ap_const_lv2_1));
    end process;


    ap_condition_267_assign_proc : process(ap_enable_reg_pp0_iter1, inHeapV_strobe_V_reg_237, digit_V_fu_330_p4)
    begin
                ap_condition_267 <= ((inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (digit_V_fu_330_p4 = ap_const_lv2_2));
    end process;


    ap_condition_270_assign_proc : process(ap_enable_reg_pp0_iter1, inHeapV_strobe_V_reg_237, digit_V_fu_330_p4)
    begin
                ap_condition_270 <= ((inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (digit_V_fu_330_p4 = ap_const_lv2_3));
    end process;


    ap_condition_273_assign_proc : process(ap_enable_reg_pp0_iter1, inHeapV_strobe_V_reg_237, digit_V_fu_330_p4)
    begin
                ap_condition_273 <= ((inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (digit_V_fu_330_p4 = ap_const_lv2_0));
    end process;


    ap_condition_278_assign_proc : process(ap_enable_reg_pp0_iter1, inHeapV_strobe_V_reg_237, ap_block_pp0_stage0_11001)
    begin
                ap_condition_278 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_phi_mux_inHeapV_strobe_V_phi_fu_241_p4, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_phi_mux_inHeapV_strobe_V_phi_fu_241_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_phi_mux_inHeapV_strobe_V_phi_fu_241_p4 <= inHeapV_strobe_V_reg_237;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    current_digit_V_address0 <= zext_ln499_fu_321_p1(9 - 1 downto 0);

    current_digit_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_digit_V_ce0 <= ap_const_logic_1;
        else 
            current_digit_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    current_digit_V_d0 <= phi_ln145_fu_104(23 downto 22);

    current_digit_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, inHeapV_strobe_V_reg_237, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_digit_V_we0 <= ap_const_logic_1;
        else 
            current_digit_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    digit_V_fu_330_p4 <= phi_ln145_fu_104(23 downto 22);
    digit_histogram_V_21_fu_355_p2 <= std_logic_vector(unsigned(tmp_s_fu_341_p6) + unsigned(ap_const_lv10_1));
    digit_histogram_V_65_out <= digit_histogram_V_18_fu_112;

    digit_histogram_V_65_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_inHeapV_strobe_V_phi_fu_241_p4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_inHeapV_strobe_V_phi_fu_241_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            digit_histogram_V_65_out_ap_vld <= ap_const_logic_1;
        else 
            digit_histogram_V_65_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    digit_histogram_V_66_out <= digit_histogram_V_19_fu_116;

    digit_histogram_V_66_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_inHeapV_strobe_V_phi_fu_241_p4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_inHeapV_strobe_V_phi_fu_241_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            digit_histogram_V_66_out_ap_vld <= ap_const_logic_1;
        else 
            digit_histogram_V_66_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    digit_histogram_V_73_out <= digit_histogram_V_fu_108;

    digit_histogram_V_73_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_inHeapV_strobe_V_phi_fu_241_p4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_inHeapV_strobe_V_phi_fu_241_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            digit_histogram_V_73_out_ap_vld <= ap_const_logic_1;
        else 
            digit_histogram_V_73_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    heapLength_8_fu_282_p2 <= std_logic_vector(unsigned(heapLength_fu_100) + unsigned(ap_const_lv16_1));
    heapLength_out <= heapLength_fu_100;

    heapLength_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_inHeapV_strobe_V_phi_fu_241_p4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_inHeapV_strobe_V_phi_fu_241_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            heapLength_out_ap_vld <= ap_const_logic_1;
        else 
            heapLength_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    heap_frequency_V_address1 <= zext_ln499_fu_321_p1(9 - 1 downto 0);

    heap_frequency_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            heap_frequency_V_ce1 <= ap_const_logic_1;
        else 
            heap_frequency_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    heap_frequency_V_d1 <= phi_ln145_fu_104(23 downto 10);

    heap_frequency_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, inHeapV_strobe_V_reg_237, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            heap_frequency_V_we1 <= ap_const_logic_1;
        else 
            heap_frequency_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    heap_value_V_address1 <= zext_ln499_fu_321_p1(9 - 1 downto 0);

    heap_value_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            heap_value_V_ce1 <= ap_const_logic_1;
        else 
            heap_value_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    heap_value_V_d1 <= inHeapV_data_value_V_fu_303_p1;

    heap_value_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, inHeapV_strobe_V_reg_237, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            heap_value_V_we1 <= ap_const_logic_1;
        else 
            heap_value_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    inHeapV_data_value_V_fu_303_p1 <= phi_ln145_fu_104(10 - 1 downto 0);

    intlHeapStream_i_2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, intlHeapStream_i_2_empty_n, ap_block_pp0_stage0, inHeapV_strobe_V_reg_237)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            intlHeapStream_i_2_blk_n <= intlHeapStream_i_2_empty_n;
        else 
            intlHeapStream_i_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    intlHeapStream_i_2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, inHeapV_strobe_V_reg_237, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            intlHeapStream_i_2_read <= ap_const_logic_1;
        else 
            intlHeapStream_i_2_read <= ap_const_logic_0;
        end if; 
    end process;

    prev_sorting_frequency_V_address0 <= zext_ln499_fu_321_p1(9 - 1 downto 0);

    prev_sorting_frequency_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            prev_sorting_frequency_V_ce0 <= ap_const_logic_1;
        else 
            prev_sorting_frequency_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prev_sorting_frequency_V_d0 <= phi_ln145_fu_104(23 downto 10);

    prev_sorting_frequency_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, inHeapV_strobe_V_reg_237, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            prev_sorting_frequency_V_we0 <= ap_const_logic_1;
        else 
            prev_sorting_frequency_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prev_sorting_value_V_address0 <= zext_ln499_fu_321_p1(9 - 1 downto 0);

    prev_sorting_value_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            prev_sorting_value_V_ce0 <= ap_const_logic_1;
        else 
            prev_sorting_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prev_sorting_value_V_d0 <= inHeapV_data_value_V_fu_303_p1;

    prev_sorting_value_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, inHeapV_strobe_V_reg_237, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (inHeapV_strobe_V_reg_237 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            prev_sorting_value_V_we0 <= ap_const_logic_1;
        else 
            prev_sorting_value_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_341_p5 <= phi_ln145_fu_104(23 downto 22);
    trunc_ln145_fu_381_p1 <= intlHeapStream_i_2_dout(24 - 1 downto 0);
    zext_ln499_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(heapLength_fu_100),64));
end behav;
