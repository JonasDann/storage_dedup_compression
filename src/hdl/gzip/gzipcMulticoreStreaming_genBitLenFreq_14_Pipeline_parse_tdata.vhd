-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_genBitLenFreq_14_Pipeline_parse_tdata is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldCodes1_dout : IN STD_LOGIC_VECTOR (20 downto 0);
    ldCodes1_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    ldCodes1_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    ldCodes1_empty_n : IN STD_LOGIC;
    ldCodes1_read : OUT STD_LOGIC;
    nextlen : IN STD_LOGIC_VECTOR (4 downto 0);
    select_ln145_1 : IN STD_LOGIC_VECTOR (2 downto 0);
    select_ln145 : IN STD_LOGIC_VECTOR (7 downto 0);
    repPrevBlen_V : IN STD_LOGIC_VECTOR (13 downto 0);
    repZeroBlen_V : IN STD_LOGIC_VECTOR (13 downto 0);
    repZeroBlen7_V : IN STD_LOGIC_VECTOR (13 downto 0);
    add_ln1693 : IN STD_LOGIC_VECTOR (9 downto 0);
    maximumCodeLength_V : IN STD_LOGIC_VECTOR (9 downto 0);
    blFreq_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    blFreq_V_ce0 : OUT STD_LOGIC;
    blFreq_V_we0 : OUT STD_LOGIC;
    blFreq_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    blFreq_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    repPrevBlen_V_1_out : OUT STD_LOGIC_VECTOR (13 downto 0);
    repPrevBlen_V_1_out_ap_vld : OUT STD_LOGIC;
    repZeroBlen_V_1_out : OUT STD_LOGIC_VECTOR (13 downto 0);
    repZeroBlen_V_1_out_ap_vld : OUT STD_LOGIC;
    repZeroBlen7_V_1_out : OUT STD_LOGIC_VECTOR (13 downto 0);
    repZeroBlen7_V_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_genBitLenFreq_14_Pipeline_parse_tdata is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_8A : STD_LOGIC_VECTOR (15 downto 0) := "0000000010001010";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv16_B : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001011";
    constant ap_const_lv16_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000110";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1693_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal icmp_ln1693_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_649 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op48_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ldCodes1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1065_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1693_fu_329_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1693_reg_653 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln1702_fu_353_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln1702_reg_658 : STD_LOGIC_VECTOR (13 downto 0);
    signal count_4_fu_357_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal count_4_reg_663 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1702_1_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1702_1_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1702_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1702_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1704_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1704_reg_679 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1706_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1706_reg_683 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1707_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1707_reg_687 : STD_LOGIC_VECTOR (0 downto 0);
    signal blFreq_V_addr_1_reg_691 : STD_LOGIC_VECTOR (4 downto 0);
    signal blFreq_V_addr_reg_696 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1719_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1719_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_phi_mux_nextlen_1_phi_fu_240_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1708_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1705_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_V_fu_104 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_V_2_fu_309_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_V_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal count_fu_108 : STD_LOGIC_VECTOR (15 downto 0);
    signal curlen_fu_112 : STD_LOGIC_VECTOR (4 downto 0);
    signal repZeroBlen7_V_1_fu_116 : STD_LOGIC_VECTOR (13 downto 0);
    signal repZeroBlen7_V_3_fu_476_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal repZeroBlen_V_1_fu_120 : STD_LOGIC_VECTOR (13 downto 0);
    signal repZeroBlen_V_3_fu_484_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal repPrevBlen_V_1_fu_124 : STD_LOGIC_VECTOR (13 downto 0);
    signal repPrevBlen_V_2_fu_442_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal prevlen_fu_128 : STD_LOGIC_VECTOR (15 downto 0);
    signal max_count_fu_132 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1682_cast1_cast_fu_523_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln145_cast_fu_247_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal min_count_fu_136 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1682_cast_cast_fu_530_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln145_1_cast_fu_251_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln886_24_fu_432_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln886_fu_507_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1702_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1711_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal repZeroBlen7_V_2_fu_470_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal repZeroBlen_V_2_fu_464_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln886_21_fu_502_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_454 : BOOLEAN;
    signal ap_condition_452 : BOOLEAN;
    signal ap_condition_460 : BOOLEAN;
    signal ap_condition_463 : BOOLEAN;
    signal ap_condition_468 : BOOLEAN;
    signal ap_condition_472 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    count_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln1702_reg_675) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                count_fu_108 <= count_4_reg_663;
            elsif ((((ap_const_lv1_0 = and_ln1702_reg_675) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
                count_fu_108 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    curlen_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                curlen_fu_112 <= nextlen;
            elsif (((icmp_ln1693_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                curlen_fu_112 <= ap_phi_mux_nextlen_1_phi_fu_240_p4;
            end if; 
        end if;
    end process;

    max_count_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                                        max_count_fu_132(7 downto 0) <= select_ln145_cast_fu_247_p1(7 downto 0);
                elsif ((ap_const_boolean_1 = ap_condition_463)) then 
                    max_count_fu_132(0) <= '0';
                    max_count_fu_132(1) <= '1';
                    max_count_fu_132(2) <= '0';
                    max_count_fu_132(3) <= '1';
                    max_count_fu_132(4) <= '0';
                    max_count_fu_132(5) <= '0';
                    max_count_fu_132(6) <= '0';
                    max_count_fu_132(7) <= '1';
                elsif ((ap_const_boolean_1 = ap_condition_460)) then 
                                        max_count_fu_132(7 downto 0) <= select_ln1682_cast1_cast_fu_523_p3(7 downto 0);
                end if;
            end if; 
        end if;
    end process;

    min_count_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                                        min_count_fu_136(2 downto 0) <= select_ln145_1_cast_fu_251_p1(2 downto 0);
                elsif ((ap_const_boolean_1 = ap_condition_463)) then 
                    min_count_fu_136(0) <= '1';
                    min_count_fu_136(1) <= '1';
                    min_count_fu_136(2) <= '0';
                elsif ((ap_const_boolean_1 = ap_condition_460)) then 
                                        min_count_fu_136(2 downto 0) <= select_ln1682_cast_cast_fu_530_p3(2 downto 0);
                end if;
            end if; 
        end if;
    end process;

    n_V_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1693_fu_303_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n_V_fu_104 <= n_V_2_fu_309_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_V_fu_104 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    prevlen_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    prevlen_fu_128 <= ap_const_lv16_FFFF;
                elsif (((ap_const_lv1_0 = and_ln1702_reg_675) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    prevlen_fu_128 <= zext_ln1693_reg_653;
                end if;
            end if; 
        end if;
    end process;

    repPrevBlen_V_1_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    repPrevBlen_V_1_fu_124 <= repPrevBlen_V;
                elsif ((ap_const_boolean_1 = ap_condition_468)) then 
                    repPrevBlen_V_1_fu_124 <= repPrevBlen_V_2_fu_442_p2;
                end if;
            end if; 
        end if;
    end process;

    repZeroBlen7_V_1_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    repZeroBlen7_V_1_fu_116 <= repZeroBlen7_V;
                elsif ((ap_const_boolean_1 = ap_condition_472)) then 
                    repZeroBlen7_V_1_fu_116 <= repZeroBlen7_V_3_fu_476_p3;
                end if;
            end if; 
        end if;
    end process;

    repZeroBlen_V_1_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    repZeroBlen_V_1_fu_120 <= repZeroBlen_V;
                elsif ((ap_const_boolean_1 = ap_condition_472)) then 
                    repZeroBlen_V_1_fu_120 <= repZeroBlen_V_3_fu_484_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1693_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                and_ln1702_reg_675 <= and_ln1702_fu_375_p2;
                count_4_reg_663 <= count_4_fu_357_p2;
                icmp_ln1702_1_reg_669 <= icmp_ln1702_1_fu_369_p2;
                trunc_ln1702_reg_658 <= trunc_ln1702_fu_353_p1;
                    zext_ln1693_reg_653(4 downto 0) <= zext_ln1693_fu_329_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln1702_fu_375_p2) and (icmp_ln1693_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1707_fu_402_p2 = ap_const_lv1_0) and (icmp_ln1706_fu_393_p2 = ap_const_lv1_0) and (icmp_ln1704_fu_384_p2 = ap_const_lv1_0))) then
                blFreq_V_addr_1_reg_691 <= zext_ln1708_fu_411_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln1702_fu_375_p2) and (icmp_ln1693_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1704_fu_384_p2 = ap_const_lv1_1))) then
                blFreq_V_addr_reg_696 <= zext_ln1705_fu_416_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1693_fu_303_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1065_reg_649 <= icmp_ln1065_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1693_reg_645 <= icmp_ln1693_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln1702_fu_375_p2) and (icmp_ln1693_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln1704_reg_679 <= icmp_ln1704_fu_384_p2;
                icmp_ln1719_reg_701 <= icmp_ln1719_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln1702_fu_375_p2) and (icmp_ln1693_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1704_fu_384_p2 = ap_const_lv1_0))) then
                icmp_ln1706_reg_683 <= icmp_ln1706_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln1702_fu_375_p2) and (icmp_ln1693_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1706_fu_393_p2 = ap_const_lv1_0) and (icmp_ln1704_fu_384_p2 = ap_const_lv1_0))) then
                icmp_ln1707_reg_687 <= icmp_ln1707_fu_402_p2;
            end if;
        end if;
    end process;
    zext_ln1693_reg_653(15 downto 5) <= "00000000000";
    max_count_fu_132(15 downto 8) <= "00000000";
    min_count_fu_136(15 downto 3) <= "0000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage1_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln886_21_fu_502_p2 <= std_logic_vector(unsigned(trunc_ln1702_reg_658) + unsigned(ap_const_lv14_1));
    add_ln886_24_fu_432_p2 <= std_logic_vector(unsigned(blFreq_V_q0) + unsigned(ap_const_lv14_1));
    add_ln886_fu_507_p2 <= std_logic_vector(unsigned(add_ln886_21_fu_502_p2) + unsigned(blFreq_V_q0));
    and_ln1702_fu_375_p2 <= (icmp_ln1702_fu_363_p2 and icmp_ln1702_1_fu_369_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ldCodes1_empty_n, ap_predicate_op48_read_state2)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_predicate_op48_read_state2 = ap_const_boolean_1) and (ldCodes1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ldCodes1_empty_n, ap_predicate_op48_read_state2)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_predicate_op48_read_state2 = ap_const_boolean_1) and (ldCodes1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage1_iter0_assign_proc : process(ldCodes1_empty_n, ap_predicate_op48_read_state2)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((ap_predicate_op48_read_state2 = ap_const_boolean_1) and (ldCodes1_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_452_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln1702_reg_675, ap_block_pp0_stage0)
    begin
                ap_condition_452 <= ((ap_const_lv1_0 = and_ln1702_reg_675) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_454_assign_proc : process(icmp_ln1704_reg_679, icmp_ln1706_reg_683, icmp_ln1707_reg_687)
    begin
                ap_condition_454 <= ((icmp_ln1707_reg_687 = ap_const_lv1_0) and (icmp_ln1706_reg_683 = ap_const_lv1_0) and (icmp_ln1704_reg_679 = ap_const_lv1_0));
    end process;


    ap_condition_460_assign_proc : process(ap_enable_reg_pp0_iter1, and_ln1702_reg_675, icmp_ln1719_reg_701)
    begin
                ap_condition_460 <= ((ap_const_lv1_0 = and_ln1702_reg_675) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1719_reg_701 = ap_const_lv1_0));
    end process;


    ap_condition_463_assign_proc : process(ap_enable_reg_pp0_iter1, and_ln1702_reg_675, icmp_ln1719_reg_701)
    begin
                ap_condition_463 <= ((ap_const_lv1_0 = and_ln1702_reg_675) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1719_reg_701 = ap_const_lv1_1));
    end process;


    ap_condition_468_assign_proc : process(ap_enable_reg_pp0_iter1, and_ln1702_reg_675, icmp_ln1704_reg_679, icmp_ln1706_reg_683)
    begin
                ap_condition_468 <= ((ap_const_lv1_0 = and_ln1702_reg_675) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1706_reg_683 = ap_const_lv1_0) and (icmp_ln1704_reg_679 = ap_const_lv1_0));
    end process;


    ap_condition_472_assign_proc : process(ap_enable_reg_pp0_iter1, and_ln1702_reg_675, icmp_ln1704_reg_679, icmp_ln1706_reg_683)
    begin
                ap_condition_472 <= ((ap_const_lv1_0 = and_ln1702_reg_675) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1706_reg_683 = ap_const_lv1_1) and (icmp_ln1704_reg_679 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1693_fu_303_p2)
    begin
        if (((icmp_ln1693_fu_303_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_nextlen_1_phi_fu_240_p4_assign_proc : process(ldCodes1_dout, icmp_ln1693_reg_645, icmp_ln1065_reg_649)
    begin
        if (((icmp_ln1065_reg_649 = ap_const_lv1_0) and (icmp_ln1693_reg_645 = ap_const_lv1_0))) then 
            ap_phi_mux_nextlen_1_phi_fu_240_p4 <= ldCodes1_dout(19 downto 15);
        else 
            ap_phi_mux_nextlen_1_phi_fu_240_p4 <= ap_const_lv5_F;
        end if; 
    end process;


    ap_predicate_op48_read_state2_assign_proc : process(icmp_ln1693_reg_645, icmp_ln1065_reg_649)
    begin
                ap_predicate_op48_read_state2 <= ((icmp_ln1065_reg_649 = ap_const_lv1_0) and (icmp_ln1693_reg_645 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_V_1_assign_proc : process(ap_CS_fsm_pp0_stage0, n_V_fu_104, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_n_V_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_n_V_1 <= n_V_fu_104;
        end if; 
    end process;


    blFreq_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln1693_reg_645, ap_block_pp0_stage1, and_ln1702_fu_375_p2, and_ln1702_reg_675, icmp_ln1704_fu_384_p2, icmp_ln1704_reg_679, icmp_ln1706_fu_393_p2, icmp_ln1706_reg_683, icmp_ln1707_fu_402_p2, icmp_ln1707_reg_687, blFreq_V_addr_1_reg_691, blFreq_V_addr_reg_696, zext_ln1708_fu_411_p1, zext_ln1705_fu_416_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_lv1_0 = and_ln1702_reg_675) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1704_reg_679 = ap_const_lv1_1))) then 
            blFreq_V_address0 <= blFreq_V_addr_reg_696;
        elsif (((ap_const_lv1_0 = and_ln1702_reg_675) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1707_reg_687 = ap_const_lv1_0) and (icmp_ln1706_reg_683 = ap_const_lv1_0) and (icmp_ln1704_reg_679 = ap_const_lv1_0))) then 
            blFreq_V_address0 <= blFreq_V_addr_1_reg_691;
        elsif (((ap_const_lv1_0 = and_ln1702_fu_375_p2) and (icmp_ln1693_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1704_fu_384_p2 = ap_const_lv1_1))) then 
            blFreq_V_address0 <= zext_ln1705_fu_416_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_0 = and_ln1702_fu_375_p2) and (icmp_ln1693_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1707_fu_402_p2 = ap_const_lv1_0) and (icmp_ln1706_fu_393_p2 = ap_const_lv1_0) and (icmp_ln1704_fu_384_p2 = ap_const_lv1_0))) then 
            blFreq_V_address0 <= zext_ln1708_fu_411_p1(5 - 1 downto 0);
        else 
            blFreq_V_address0 <= "XXXXX";
        end if; 
    end process;


    blFreq_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln1693_reg_645, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, and_ln1702_fu_375_p2, and_ln1702_reg_675, icmp_ln1704_fu_384_p2, icmp_ln1704_reg_679, icmp_ln1706_fu_393_p2, icmp_ln1706_reg_683, icmp_ln1707_fu_402_p2, icmp_ln1707_reg_687)
    begin
        if ((((ap_const_lv1_0 = and_ln1702_reg_675) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1704_reg_679 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln1702_reg_675) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1707_reg_687 = ap_const_lv1_0) and (icmp_ln1706_reg_683 = ap_const_lv1_0) and (icmp_ln1704_reg_679 = ap_const_lv1_0)) or ((ap_const_lv1_0 = and_ln1702_fu_375_p2) and (icmp_ln1693_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1704_fu_384_p2 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln1702_fu_375_p2) and (icmp_ln1693_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1707_fu_402_p2 = ap_const_lv1_0) and (icmp_ln1706_fu_393_p2 = ap_const_lv1_0) and (icmp_ln1704_fu_384_p2 = ap_const_lv1_0)))) then 
            blFreq_V_ce0 <= ap_const_logic_1;
        else 
            blFreq_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    blFreq_V_d0_assign_proc : process(icmp_ln1704_reg_679, add_ln886_24_fu_432_p2, add_ln886_fu_507_p2, ap_condition_454, ap_condition_452)
    begin
        if ((ap_const_boolean_1 = ap_condition_452)) then
            if ((icmp_ln1704_reg_679 = ap_const_lv1_1)) then 
                blFreq_V_d0 <= add_ln886_fu_507_p2;
            elsif ((ap_const_boolean_1 = ap_condition_454)) then 
                blFreq_V_d0 <= add_ln886_24_fu_432_p2;
            else 
                blFreq_V_d0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            blFreq_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    blFreq_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, and_ln1702_reg_675, icmp_ln1704_reg_679, icmp_ln1706_reg_683, icmp_ln1707_reg_687)
    begin
        if ((((ap_const_lv1_0 = and_ln1702_reg_675) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1704_reg_679 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln1702_reg_675) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1707_reg_687 = ap_const_lv1_0) and (icmp_ln1706_reg_683 = ap_const_lv1_0) and (icmp_ln1704_reg_679 = ap_const_lv1_0)))) then 
            blFreq_V_we0 <= ap_const_logic_1;
        else 
            blFreq_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    count_4_fu_357_p2 <= std_logic_vector(unsigned(count_fu_108) + unsigned(ap_const_lv16_1));
    icmp_ln1065_fu_315_p2 <= "1" when (ap_sig_allocacmp_n_V_1 = maximumCodeLength_V) else "0";
    icmp_ln1693_fu_303_p2 <= "1" when (ap_sig_allocacmp_n_V_1 = add_ln1693) else "0";
    icmp_ln1702_1_fu_369_p2 <= "1" when (curlen_fu_112 = ap_phi_mux_nextlen_1_phi_fu_240_p4) else "0";
    icmp_ln1702_fu_363_p2 <= "1" when (signed(count_4_fu_357_p2) < signed(max_count_fu_132)) else "0";
    icmp_ln1704_fu_384_p2 <= "1" when (signed(count_4_fu_357_p2) < signed(min_count_fu_136)) else "0";
    icmp_ln1706_fu_393_p2 <= "1" when (curlen_fu_112 = ap_const_lv5_0) else "0";
    icmp_ln1707_fu_402_p2 <= "1" when (prevlen_fu_128 = zext_ln1693_fu_329_p1) else "0";
    icmp_ln1711_fu_459_p2 <= "1" when (signed(count_4_reg_663) < signed(ap_const_lv16_B)) else "0";
    icmp_ln1719_fu_421_p2 <= "1" when (ap_phi_mux_nextlen_1_phi_fu_240_p4 = ap_const_lv5_0) else "0";

    ldCodes1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ldCodes1_empty_n, ap_predicate_op48_read_state2, ap_block_pp0_stage1)
    begin
        if (((ap_predicate_op48_read_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ldCodes1_blk_n <= ldCodes1_empty_n;
        else 
            ldCodes1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldCodes1_read_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op48_read_state2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op48_read_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ldCodes1_read <= ap_const_logic_1;
        else 
            ldCodes1_read <= ap_const_logic_0;
        end if; 
    end process;

    n_V_2_fu_309_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_V_1) + unsigned(ap_const_lv10_1));
    repPrevBlen_V_1_out <= repPrevBlen_V_1_fu_124;

    repPrevBlen_V_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1693_fu_303_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1693_fu_303_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            repPrevBlen_V_1_out_ap_vld <= ap_const_logic_1;
        else 
            repPrevBlen_V_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    repPrevBlen_V_2_fu_442_p2 <= std_logic_vector(unsigned(repPrevBlen_V_1_fu_124) + unsigned(ap_const_lv14_1));
    repZeroBlen7_V_1_out <= repZeroBlen7_V_1_fu_116;

    repZeroBlen7_V_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1693_fu_303_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1693_fu_303_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            repZeroBlen7_V_1_out_ap_vld <= ap_const_logic_1;
        else 
            repZeroBlen7_V_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    repZeroBlen7_V_2_fu_470_p2 <= std_logic_vector(unsigned(repZeroBlen7_V_1_fu_116) + unsigned(ap_const_lv14_1));
    repZeroBlen7_V_3_fu_476_p3 <= 
        repZeroBlen7_V_1_fu_116 when (icmp_ln1711_fu_459_p2(0) = '1') else 
        repZeroBlen7_V_2_fu_470_p2;
    repZeroBlen_V_1_out <= repZeroBlen_V_1_fu_120;

    repZeroBlen_V_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1693_fu_303_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1693_fu_303_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            repZeroBlen_V_1_out_ap_vld <= ap_const_logic_1;
        else 
            repZeroBlen_V_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    repZeroBlen_V_2_fu_464_p2 <= std_logic_vector(unsigned(repZeroBlen_V_1_fu_120) + unsigned(ap_const_lv14_1));
    repZeroBlen_V_3_fu_484_p3 <= 
        repZeroBlen_V_2_fu_464_p2 when (icmp_ln1711_fu_459_p2(0) = '1') else 
        repZeroBlen_V_1_fu_120;
    select_ln145_1_cast_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln145_1),16));
    select_ln145_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln145),16));
    select_ln1682_cast1_cast_fu_523_p3 <= 
        ap_const_lv16_6 when (icmp_ln1702_1_reg_669(0) = '1') else 
        ap_const_lv16_7;
    select_ln1682_cast_cast_fu_530_p3 <= 
        ap_const_lv16_3 when (icmp_ln1702_1_reg_669(0) = '1') else 
        ap_const_lv16_4;
    trunc_ln1702_fu_353_p1 <= count_fu_108(14 - 1 downto 0);
    zext_ln1693_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(curlen_fu_112),16));
    zext_ln1705_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(curlen_fu_112),64));
    zext_ln1708_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(curlen_fu_112),64));
end behav;
