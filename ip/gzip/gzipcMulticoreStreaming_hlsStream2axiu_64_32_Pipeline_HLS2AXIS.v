// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_hlsStream2axiu_64_32_Pipeline_HLS2AXIS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        outStream_dout,
        outStream_num_data_valid,
        outStream_fifo_cap,
        outStream_empty_n,
        outStream_read,
        outStream_TREADY,
        p_Result_86,
        p_Result_s,
        strb_V_1_ph,
        t1_last_V_ph,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [67:0] outStream_dout;
input  [2:0] outStream_num_data_valid;
input  [2:0] outStream_fifo_cap;
input   outStream_empty_n;
output   outStream_read;
input   outStream_TREADY;
input  [7:0] p_Result_86;
input  [63:0] p_Result_s;
input  [3:0] strb_V_1_ph;
input  [0:0] t1_last_V_ph;
output  [63:0] outStream_TDATA;
output   outStream_TVALID;
output  [7:0] outStream_TKEEP;
output  [7:0] outStream_TSTRB;
output  [31:0] outStream_TUSER;
output  [0:0] outStream_TLAST;

reg ap_idle;
reg outStream_read;
reg outStream_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln1069_fu_204_p2;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln1069_reg_420;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    outStream_blk_n;
wire    ap_block_pp0_stage0;
reg    outStream_TDATA_blk_n;
reg   [0:0] t1_last_V_reg_165;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] strb_V_1_reg_415;
reg   [63:0] p_Val2_load_reg_424;
reg   [3:0] tmp_strobe_V_reg_429;
wire   [0:0] icmp_ln1073_1_fu_237_p2;
reg   [0:0] icmp_ln1073_1_reg_439;
wire   [0:0] icmp_ln1073_3_fu_253_p2;
reg   [0:0] icmp_ln1073_3_reg_444;
reg   [0:0] tmp_257_reg_449;
wire    ap_loop_init;
reg   [31:0] t1_user_V_fu_96;
wire   [31:0] t1_user_V_2_fu_309_p3;
reg   [3:0] strb_V_fu_100;
reg   [63:0] p_Val2_s_fu_104;
wire   [63:0] p_Result_75_fu_223_p1;
reg   [31:0] outSize_V_fu_108;
wire   [31:0] outSize_V_1_fu_291_p2;
reg   [7:0] p_Val2_3_fu_112;
wire   [7:0] p_Result_76_fu_343_p9;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] tmp_fu_227_p4;
wire   [1:0] tmp_256_fu_243_p4;
wire   [31:0] zext_ln1069_fu_288_p1;
wire   [0:0] icmp_ln1065_fu_297_p2;
wire   [0:0] icmp_ln1073_6_fu_338_p2;
wire   [0:0] icmp_ln1073_5_fu_333_p2;
wire   [0:0] icmp_ln1073_4_fu_328_p2;
wire   [0:0] icmp_ln1073_2_fu_323_p2;
wire   [0:0] icmp_ln1073_fu_318_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            outSize_V_fu_108 <= 32'd0;
        end else if (((icmp_ln1069_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            outSize_V_fu_108 <= outSize_V_1_fu_291_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            p_Val2_3_fu_112 <= p_Result_86;
        end else if (((icmp_ln1069_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            p_Val2_3_fu_112 <= p_Result_76_fu_343_p9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_Val2_s_fu_104 <= p_Result_s;
        end else if (((icmp_ln1069_fu_204_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            p_Val2_s_fu_104 <= p_Result_75_fu_223_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            strb_V_fu_100 <= strb_V_1_ph;
        end else if (((icmp_ln1069_fu_204_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            strb_V_fu_100 <= {{outStream_dout[67:64]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        t1_last_V_reg_165 <= t1_last_V_ph;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1069_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        t1_last_V_reg_165 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            t1_user_V_fu_96 <= 32'd0;
        end else if (((icmp_ln1069_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            t1_user_V_fu_96 <= t1_user_V_2_fu_309_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1069_reg_420 <= icmp_ln1069_fu_204_p2;
        strb_V_1_reg_415 <= strb_V_fu_100;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1069_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1073_1_reg_439 <= icmp_ln1073_1_fu_237_p2;
        icmp_ln1073_3_reg_444 <= icmp_ln1073_3_fu_253_p2;
        p_Val2_load_reg_424 <= p_Val2_s_fu_104;
        tmp_257_reg_449 <= outStream_dout[32'd67];
        tmp_strobe_V_reg_429 <= {{outStream_dout[67:64]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1069_fu_204_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln1069_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outStream_TDATA_blk_n = outStream_TREADY;
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1069_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outStream_TVALID = 1'b1;
    end else begin
        outStream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln1069_fu_204_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outStream_blk_n = outStream_empty_n;
    end else begin
        outStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1069_fu_204_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outStream_read = 1'b1;
    end else begin
        outStream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1069_reg_420 == 1'd0) & (outStream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln1069_fu_204_p2 == 1'd0) & (outStream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln1069_reg_420 == 1'd0) & (outStream_TREADY == 1'b0)))) | ((icmp_ln1069_fu_204_p2 == 1'd0) & (outStream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln1069_reg_420 == 1'd0) & (outStream_TREADY == 1'b0)))) | ((icmp_ln1069_fu_204_p2 == 1'd0) & (outStream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln1069_fu_204_p2 == 1'd0) & (outStream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln1069_reg_420 == 1'd0) & (outStream_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln1069_reg_420 == 1'd0) & (outStream_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln1065_fu_297_p2 = ((tmp_strobe_V_reg_429 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln1069_fu_204_p2 = ((strb_V_fu_100 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln1073_1_fu_237_p2 = ((tmp_fu_227_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln1073_2_fu_323_p2 = ((tmp_strobe_V_reg_429 > 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln1073_3_fu_253_p2 = ((tmp_256_fu_243_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln1073_4_fu_328_p2 = ((tmp_strobe_V_reg_429 > 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln1073_5_fu_333_p2 = ((tmp_strobe_V_reg_429 > 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln1073_6_fu_338_p2 = ((tmp_strobe_V_reg_429 > 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln1073_fu_318_p2 = ((tmp_strobe_V_reg_429 != 4'd0) ? 1'b1 : 1'b0);

assign outSize_V_1_fu_291_p2 = (zext_ln1069_fu_288_p1 + outSize_V_fu_108);

assign outStream_TDATA = p_Val2_load_reg_424;

assign outStream_TKEEP = p_Val2_3_fu_112;

assign outStream_TLAST = (t1_last_V_reg_165 | icmp_ln1065_fu_297_p2);

assign outStream_TSTRB = p_Val2_3_fu_112;

assign outStream_TUSER = ((icmp_ln1065_fu_297_p2[0:0] == 1'b1) ? outSize_V_1_fu_291_p2 : t1_user_V_fu_96);

assign p_Result_75_fu_223_p1 = outStream_dout[63:0];

assign p_Result_76_fu_343_p9 = {{{{{{{{tmp_257_reg_449}, {icmp_ln1073_6_fu_338_p2}}, {icmp_ln1073_5_fu_333_p2}}, {icmp_ln1073_4_fu_328_p2}}, {icmp_ln1073_3_reg_444}}, {icmp_ln1073_2_fu_323_p2}}, {icmp_ln1073_1_reg_439}}, {icmp_ln1073_fu_318_p2}};

assign t1_user_V_2_fu_309_p3 = ((icmp_ln1065_fu_297_p2[0:0] == 1'b1) ? outSize_V_1_fu_291_p2 : t1_user_V_fu_96);

assign tmp_256_fu_243_p4 = {{outStream_dout[67:66]}};

assign tmp_fu_227_p4 = {{outStream_dout[67:65]}};

assign zext_ln1069_fu_288_p1 = strb_V_1_reg_415;

endmodule //gzipcMulticoreStreaming_hlsStream2axiu_64_32_Pipeline_HLS2AXIS
