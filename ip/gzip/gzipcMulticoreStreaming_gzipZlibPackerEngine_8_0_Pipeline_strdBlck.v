// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_gzipZlibPackerEngine_8_0_Pipeline_strdBlck (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strdStream95_dout,
        strdStream95_num_data_valid,
        strdStream95_fifo_cap,
        strdStream95_empty_n,
        strdStream95_read,
        packedStream93_din,
        packedStream93_num_data_valid,
        packedStream93_fifo_cap,
        packedStream93_full_n,
        packedStream93_write,
        sizeVal_V,
        zext_ln1069,
        trunc_ln68
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] strdStream95_dout;
input  [3:0] strdStream95_num_data_valid;
input  [3:0] strdStream95_fifo_cap;
input   strdStream95_empty_n;
output   strdStream95_read;
output  [67:0] packedStream93_din;
input  [2:0] packedStream93_num_data_valid;
input  [2:0] packedStream93_fifo_cap;
input   packedStream93_full_n;
output   packedStream93_write;
input  [15:0] sizeVal_V;
input  [15:0] zext_ln1069;
input  [3:0] trunc_ln68;

reg ap_idle;
reg strdStream95_read;
reg packedStream93_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1073_fu_101_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    strdStream95_blk_n;
wire    ap_block_pp0_stage0;
reg    packedStream93_blk_n;
wire   [3:0] select_ln1081_fu_133_p3;
reg   [3:0] select_ln1081_reg_170;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] size_fu_54;
wire   [15:0] size_3_fu_141_p2;
wire    ap_loop_init;
reg   [15:0] ap_sig_allocacmp_size_2;
reg    ap_block_pp0_stage0_01001;
wire   [16:0] zext_ln1073_fu_107_p1;
wire   [16:0] add_ln428_fu_111_p2;
wire   [16:0] zext_ln1069_cast_fu_89_p1;
wire   [3:0] trunc_ln428_fu_123_p1;
wire   [0:0] icmp_ln1081_fu_117_p2;
wire   [3:0] sub_ln428_fu_127_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1073_fu_101_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            size_fu_54 <= size_3_fu_141_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            size_fu_54 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_fu_101_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln1081_reg_170 <= select_ln1081_fu_133_p3;
    end
end

always @ (*) begin
    if (((icmp_ln1073_fu_101_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_size_2 = 16'd0;
    end else begin
        ap_sig_allocacmp_size_2 = size_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        packedStream93_blk_n = packedStream93_full_n;
    end else begin
        packedStream93_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        packedStream93_write = 1'b1;
    end else begin
        packedStream93_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strdStream95_blk_n = strdStream95_empty_n;
    end else begin
        strdStream95_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strdStream95_read = 1'b1;
    end else begin
        strdStream95_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln428_fu_111_p2 = (zext_ln1073_fu_107_p1 + 17'd8);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((packedStream93_full_n == 1'b0) | (strdStream95_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((packedStream93_full_n == 1'b0) | (strdStream95_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((packedStream93_full_n == 1'b0) | (strdStream95_empty_n == 1'b0)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((packedStream93_full_n == 1'b0) | (strdStream95_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln1073_fu_101_p2 = ((ap_sig_allocacmp_size_2 < sizeVal_V) ? 1'b1 : 1'b0);

assign icmp_ln1081_fu_117_p2 = ((add_ln428_fu_111_p2 > zext_ln1069_cast_fu_89_p1) ? 1'b1 : 1'b0);

assign packedStream93_din = {{strdStream95_dout}, {select_ln1081_reg_170}};

assign select_ln1081_fu_133_p3 = ((icmp_ln1081_fu_117_p2[0:0] == 1'b1) ? sub_ln428_fu_127_p2 : 4'd8);

assign size_3_fu_141_p2 = (ap_sig_allocacmp_size_2 + 16'd8);

assign sub_ln428_fu_127_p2 = (trunc_ln68 - trunc_ln428_fu_123_p1);

assign trunc_ln428_fu_123_p1 = ap_sig_allocacmp_size_2[3:0];

assign zext_ln1069_cast_fu_89_p1 = zext_ln1069;

assign zext_ln1073_fu_107_p1 = ap_sig_allocacmp_size_2;

endmodule //gzipcMulticoreStreaming_gzipZlibPackerEngine_8_0_Pipeline_strdBlck
