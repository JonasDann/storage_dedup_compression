// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_bytePacker_64_4_Pipeline_multicorePacker (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        packedStream93_dout,
        packedStream93_num_data_valid,
        packedStream93_fifo_cap,
        packedStream93_empty_n,
        packedStream93_read,
        outStream_din,
        outStream_num_data_valid,
        outStream_fifo_cap,
        outStream_full_n,
        outStream_write,
        outVal_data_V_7_out,
        outVal_data_V_7_out_ap_vld,
        outVal_data_V_6_out,
        outVal_data_V_6_out_ap_vld,
        outVal_data_V_5_out,
        outVal_data_V_5_out_ap_vld,
        outVal_data_V_4_out,
        outVal_data_V_4_out_ap_vld,
        outVal_data_V_3_out,
        outVal_data_V_3_out_ap_vld,
        outVal_data_V_2_out,
        outVal_data_V_2_out_ap_vld,
        outVal_data_V_1_out,
        outVal_data_V_1_out_ap_vld,
        outVal_data_V_out,
        outVal_data_V_out_ap_vld,
        inputWindow_V_5_out,
        inputWindow_V_5_out_ap_vld,
        inputIdx_V_4_out,
        inputIdx_V_4_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [67:0] packedStream93_dout;
input  [2:0] packedStream93_num_data_valid;
input  [2:0] packedStream93_fifo_cap;
input   packedStream93_empty_n;
output   packedStream93_read;
output  [67:0] outStream_din;
input  [2:0] outStream_num_data_valid;
input  [2:0] outStream_fifo_cap;
input   outStream_full_n;
output   outStream_write;
output  [7:0] outVal_data_V_7_out;
output   outVal_data_V_7_out_ap_vld;
output  [7:0] outVal_data_V_6_out;
output   outVal_data_V_6_out_ap_vld;
output  [7:0] outVal_data_V_5_out;
output   outVal_data_V_5_out_ap_vld;
output  [7:0] outVal_data_V_4_out;
output   outVal_data_V_4_out_ap_vld;
output  [7:0] outVal_data_V_3_out;
output   outVal_data_V_3_out_ap_vld;
output  [7:0] outVal_data_V_2_out;
output   outVal_data_V_2_out_ap_vld;
output  [7:0] outVal_data_V_1_out;
output   outVal_data_V_1_out_ap_vld;
output  [7:0] outVal_data_V_out;
output   outVal_data_V_out_ap_vld;
output  [63:0] inputWindow_V_5_out;
output   inputWindow_V_5_out_ap_vld;
output  [3:0] inputIdx_V_4_out;
output   inputIdx_V_4_out_ap_vld;

reg ap_idle;
reg packedStream93_read;
reg outStream_write;
reg outVal_data_V_7_out_ap_vld;
reg outVal_data_V_6_out_ap_vld;
reg outVal_data_V_5_out_ap_vld;
reg outVal_data_V_4_out_ap_vld;
reg outVal_data_V_3_out_ap_vld;
reg outVal_data_V_2_out_ap_vld;
reg outVal_data_V_1_out_ap_vld;
reg outVal_data_V_out_ap_vld;
reg inputWindow_V_5_out_ap_vld;
reg inputIdx_V_4_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg   [0:0] ap_phi_mux_packerDone_phi_fu_256_p4;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] tmp_266_reg_773;
reg   [0:0] tmp_266_reg_773_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    packedStream93_blk_n;
wire    ap_block_pp0_stage0;
reg    outStream_blk_n;
reg   [0:0] packerDone_reg_253;
reg   [0:0] packerDone_reg_253_pp0_iter1_reg;
reg    ap_block_pp0_stage0_11001;
reg   [67:0] inVal_V_reg_739;
reg   [67:0] inVal_V_reg_739_pp0_iter1_reg;
wire   [3:0] trunc_ln714_fu_269_p1;
reg   [3:0] trunc_ln714_reg_744;
wire   [0:0] packerDone_1_fu_273_p2;
reg   [0:0] packerDone_1_reg_749;
wire   [7:0] Hi_fu_300_p2;
reg   [7:0] Hi_reg_754;
wire   [6:0] Lo_fu_310_p3;
reg   [6:0] Lo_reg_760;
wire   [0:0] icmp_ln414_fu_322_p2;
reg   [0:0] icmp_ln414_reg_765;
wire   [0:0] tmp_266_fu_333_p3;
wire   [63:0] trunc_ln174_fu_568_p1;
reg   [63:0] trunc_ln174_reg_777;
reg    ap_condition_exit_pp0_iter2_stage0;
wire    ap_loop_init;
reg   [3:0] lhs_fu_130;
wire   [3:0] inputIdx_V_1_fu_328_p2;
wire   [3:0] inputIdx_V_fu_346_p2;
reg   [127:0] p_Val2_s_fu_134;
wire   [127:0] p_Result_s_fu_483_p2;
wire   [127:0] zext_ln1044_fu_582_p1;
reg   [7:0] outVal_data_V_fu_138;
wire   [7:0] outVal_data_V_8_fu_489_p1;
reg   [7:0] outVal_data_V_1_fu_142;
reg   [7:0] outVal_data_V_2_fu_146;
reg   [7:0] outVal_data_V_3_fu_150;
reg   [7:0] outVal_data_V_4_fu_154;
reg   [7:0] outVal_data_V_5_fu_158;
reg   [7:0] outVal_data_V_6_fu_162;
reg   [7:0] outVal_data_V_7_fu_166;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] zext_ln1541_fu_282_p1;
wire   [4:0] ret_V_fu_286_p2;
wire   [7:0] shl_ln_fu_292_p3;
wire   [31:0] zext_ln1108_fu_318_p1;
wire   [31:0] zext_ln598_fu_306_p1;
wire   [63:0] tmp_267_fu_365_p4;
wire   [7:0] zext_ln414_fu_378_p1;
wire   [7:0] xor_ln414_fu_381_p2;
wire   [7:0] select_ln414_fu_387_p3;
wire   [7:0] select_ln414_2_fu_399_p3;
wire   [7:0] select_ln414_1_fu_393_p3;
wire   [7:0] sub_ln414_fu_406_p2;
wire   [127:0] zext_ln232_fu_374_p1;
wire   [127:0] zext_ln414_1_fu_412_p1;
wire   [127:0] shl_ln414_fu_424_p2;
reg   [127:0] tmp_fu_430_p4;
wire   [127:0] zext_ln414_2_fu_416_p1;
wire   [127:0] zext_ln414_3_fu_420_p1;
wire   [127:0] shl_ln414_1_fu_447_p2;
wire   [127:0] lshr_ln414_fu_453_p2;
wire   [127:0] and_ln414_fu_459_p2;
wire   [127:0] xor_ln414_1_fu_465_p2;
wire   [127:0] select_ln414_3_fu_440_p3;
wire   [127:0] and_ln414_1_fu_471_p2;
wire   [127:0] and_ln414_2_fu_477_p2;
wire   [63:0] inputWindow_V_fu_572_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_502;
reg    ap_condition_506;
reg    ap_condition_510;
reg    ap_condition_218;
reg    ap_condition_518;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            lhs_fu_130 <= 4'd0;
        end else if ((1'b1 == ap_condition_510)) begin
            lhs_fu_130 <= inputIdx_V_fu_346_p2;
        end else if ((1'b1 == ap_condition_506)) begin
            lhs_fu_130 <= inputIdx_V_1_fu_328_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_218)) begin
        if ((tmp_266_reg_773 == 1'd1)) begin
            p_Val2_s_fu_134 <= zext_ln1044_fu_582_p1;
        end else if ((tmp_266_reg_773 == 1'd0)) begin
            p_Val2_s_fu_134 <= p_Result_s_fu_483_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_518)) begin
            packerDone_reg_253 <= packerDone_1_reg_749;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            packerDone_reg_253 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (packerDone_reg_253 == 1'd0))) begin
        Hi_reg_754[7 : 3] <= Hi_fu_300_p2[7 : 3];
        Lo_reg_760[6 : 3] <= Lo_fu_310_p3[6 : 3];
        icmp_ln414_reg_765 <= icmp_ln414_fu_322_p2;
        tmp_266_reg_773 <= inputIdx_V_1_fu_328_p2[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        inVal_V_reg_739_pp0_iter1_reg <= inVal_V_reg_739;
        packerDone_reg_253_pp0_iter1_reg <= packerDone_reg_253;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_packerDone_phi_fu_256_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inVal_V_reg_739 <= packedStream93_dout;
        trunc_ln714_reg_744 <= trunc_ln714_fu_269_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (packerDone_reg_253_pp0_iter1_reg == 1'd0))) begin
        outVal_data_V_1_fu_142 <= {{p_Result_s_fu_483_p2[15:8]}};
        outVal_data_V_2_fu_146 <= {{p_Result_s_fu_483_p2[23:16]}};
        outVal_data_V_3_fu_150 <= {{p_Result_s_fu_483_p2[31:24]}};
        outVal_data_V_4_fu_154 <= {{p_Result_s_fu_483_p2[39:32]}};
        outVal_data_V_5_fu_158 <= {{p_Result_s_fu_483_p2[47:40]}};
        outVal_data_V_6_fu_162 <= {{p_Result_s_fu_483_p2[55:48]}};
        outVal_data_V_7_fu_166 <= {{p_Result_s_fu_483_p2[63:56]}};
        outVal_data_V_fu_138 <= outVal_data_V_8_fu_489_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_packerDone_phi_fu_256_p4 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        packerDone_1_reg_749 <= packerDone_1_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_266_reg_773_pp0_iter2_reg <= tmp_266_reg_773;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_266_reg_773 == 1'd1) & (packerDone_reg_253_pp0_iter1_reg == 1'd0))) begin
        trunc_ln174_reg_777 <= trunc_ln174_fu_568_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_phi_mux_packerDone_phi_fu_256_p4 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (packerDone_reg_253_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_502)) begin
            ap_phi_mux_packerDone_phi_fu_256_p4 = packerDone_1_reg_749;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_packerDone_phi_fu_256_p4 = 1'd0;
        end else begin
            ap_phi_mux_packerDone_phi_fu_256_p4 = packerDone_1_reg_749;
        end
    end else begin
        ap_phi_mux_packerDone_phi_fu_256_p4 = packerDone_1_reg_749;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (packerDone_reg_253_pp0_iter1_reg == 1'd1))) begin
        inputIdx_V_4_out_ap_vld = 1'b1;
    end else begin
        inputIdx_V_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (packerDone_reg_253_pp0_iter1_reg == 1'd1))) begin
        inputWindow_V_5_out_ap_vld = 1'b1;
    end else begin
        inputWindow_V_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_266_reg_773_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_blk_n = outStream_full_n;
    end else begin
        outStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_266_reg_773_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_write = 1'b1;
    end else begin
        outStream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (packerDone_reg_253_pp0_iter1_reg == 1'd1))) begin
        outVal_data_V_1_out_ap_vld = 1'b1;
    end else begin
        outVal_data_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (packerDone_reg_253_pp0_iter1_reg == 1'd1))) begin
        outVal_data_V_2_out_ap_vld = 1'b1;
    end else begin
        outVal_data_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (packerDone_reg_253_pp0_iter1_reg == 1'd1))) begin
        outVal_data_V_3_out_ap_vld = 1'b1;
    end else begin
        outVal_data_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (packerDone_reg_253_pp0_iter1_reg == 1'd1))) begin
        outVal_data_V_4_out_ap_vld = 1'b1;
    end else begin
        outVal_data_V_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (packerDone_reg_253_pp0_iter1_reg == 1'd1))) begin
        outVal_data_V_5_out_ap_vld = 1'b1;
    end else begin
        outVal_data_V_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (packerDone_reg_253_pp0_iter1_reg == 1'd1))) begin
        outVal_data_V_6_out_ap_vld = 1'b1;
    end else begin
        outVal_data_V_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (packerDone_reg_253_pp0_iter1_reg == 1'd1))) begin
        outVal_data_V_7_out_ap_vld = 1'b1;
    end else begin
        outVal_data_V_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (packerDone_reg_253_pp0_iter1_reg == 1'd1))) begin
        outVal_data_V_out_ap_vld = 1'b1;
    end else begin
        outVal_data_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_phi_mux_packerDone_phi_fu_256_p4 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        packedStream93_blk_n = packedStream93_empty_n;
    end else begin
        packedStream93_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_packerDone_phi_fu_256_p4 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        packedStream93_read = 1'b1;
    end else begin
        packedStream93_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_fu_300_p2 = ($signed(shl_ln_fu_292_p3) + $signed(8'd255));

assign Lo_fu_310_p3 = {{lhs_fu_130}, {3'd0}};

assign and_ln414_1_fu_471_p2 = (xor_ln414_1_fu_465_p2 & p_Val2_s_fu_134);

assign and_ln414_2_fu_477_p2 = (select_ln414_3_fu_440_p3 & and_ln414_fu_459_p2);

assign and_ln414_fu_459_p2 = (shl_ln414_1_fu_447_p2 & lshr_ln414_fu_453_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_266_reg_773_pp0_iter2_reg == 1'd1) & (outStream_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_phi_mux_packerDone_phi_fu_256_p4 == 1'd0) & (packedStream93_empty_n == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_266_reg_773_pp0_iter2_reg == 1'd1) & (outStream_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_phi_mux_packerDone_phi_fu_256_p4 == 1'd0) & (packedStream93_empty_n == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_266_reg_773_pp0_iter2_reg == 1'd1) & (outStream_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_phi_mux_packerDone_phi_fu_256_p4 == 1'd0) & (packedStream93_empty_n == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_phi_mux_packerDone_phi_fu_256_p4 == 1'd0) & (packedStream93_empty_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((tmp_266_reg_773_pp0_iter2_reg == 1'd1) & (outStream_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_218 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (packerDone_reg_253_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_502 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (packerDone_reg_253 == 1'd0));
end

always @ (*) begin
    ap_condition_506 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_266_fu_333_p3 == 1'd0) & (packerDone_reg_253 == 1'd0));
end

always @ (*) begin
    ap_condition_510 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_266_fu_333_p3 == 1'd1) & (packerDone_reg_253 == 1'd0));
end

always @ (*) begin
    ap_condition_518 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (packerDone_reg_253 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln414_fu_322_p2 = ((zext_ln1108_fu_318_p1 > zext_ln598_fu_306_p1) ? 1'b1 : 1'b0);

assign inputIdx_V_1_fu_328_p2 = (trunc_ln714_reg_744 + lhs_fu_130);

assign inputIdx_V_4_out = lhs_fu_130;

assign inputIdx_V_fu_346_p2 = (inputIdx_V_1_fu_328_p2 ^ 4'd8);

assign inputWindow_V_5_out = p_Val2_s_fu_134[63:0];

assign inputWindow_V_fu_572_p4 = {{p_Result_s_fu_483_p2[127:64]}};

assign lshr_ln414_fu_453_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln414_3_fu_420_p1;

assign outStream_din = {{4'd8}, {trunc_ln174_reg_777}};

assign outVal_data_V_1_out = outVal_data_V_1_fu_142;

assign outVal_data_V_2_out = outVal_data_V_2_fu_146;

assign outVal_data_V_3_out = outVal_data_V_3_fu_150;

assign outVal_data_V_4_out = outVal_data_V_4_fu_154;

assign outVal_data_V_5_out = outVal_data_V_5_fu_158;

assign outVal_data_V_6_out = outVal_data_V_6_fu_162;

assign outVal_data_V_7_out = outVal_data_V_7_fu_166;

assign outVal_data_V_8_fu_489_p1 = p_Result_s_fu_483_p2[7:0];

assign outVal_data_V_out = outVal_data_V_fu_138;

assign p_Result_s_fu_483_p2 = (and_ln414_2_fu_477_p2 | and_ln414_1_fu_471_p2);

assign packerDone_1_fu_273_p2 = ((trunc_ln714_fu_269_p1 == 4'd0) ? 1'b1 : 1'b0);

assign ret_V_fu_286_p2 = (zext_ln1541_fu_282_p1 + 5'd8);

assign select_ln414_1_fu_393_p3 = ((icmp_ln414_reg_765[0:0] == 1'b1) ? Hi_reg_754 : zext_ln414_fu_378_p1);

assign select_ln414_2_fu_399_p3 = ((icmp_ln414_reg_765[0:0] == 1'b1) ? xor_ln414_fu_381_p2 : zext_ln414_fu_378_p1);

assign select_ln414_3_fu_440_p3 = ((icmp_ln414_reg_765[0:0] == 1'b1) ? tmp_fu_430_p4 : shl_ln414_fu_424_p2);

assign select_ln414_fu_387_p3 = ((icmp_ln414_reg_765[0:0] == 1'b1) ? zext_ln414_fu_378_p1 : Hi_reg_754);

assign shl_ln414_1_fu_447_p2 = 128'd340282366920938463463374607431768211455 << zext_ln414_2_fu_416_p1;

assign shl_ln414_fu_424_p2 = zext_ln232_fu_374_p1 << zext_ln414_1_fu_412_p1;

assign shl_ln_fu_292_p3 = {{ret_V_fu_286_p2}, {3'd0}};

assign sub_ln414_fu_406_p2 = (8'd127 - select_ln414_fu_387_p3);

assign tmp_266_fu_333_p3 = inputIdx_V_1_fu_328_p2[32'd3];

assign tmp_267_fu_365_p4 = {{inVal_V_reg_739_pp0_iter1_reg[67:4]}};

integer ap_tvar_int_0;

always @ (shl_ln414_fu_424_p2) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_fu_430_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_430_p4[ap_tvar_int_0] = shl_ln414_fu_424_p2[127 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln174_fu_568_p1 = p_Result_s_fu_483_p2[63:0];

assign trunc_ln714_fu_269_p1 = packedStream93_dout[3:0];

assign xor_ln414_1_fu_465_p2 = (128'd340282366920938463463374607431768211455 ^ and_ln414_fu_459_p2);

assign xor_ln414_fu_381_p2 = (zext_ln414_fu_378_p1 ^ 8'd127);

assign zext_ln1044_fu_582_p1 = inputWindow_V_fu_572_p4;

assign zext_ln1108_fu_318_p1 = Lo_fu_310_p3;

assign zext_ln1541_fu_282_p1 = lhs_fu_130;

assign zext_ln232_fu_374_p1 = tmp_267_fu_365_p4;

assign zext_ln414_1_fu_412_p1 = select_ln414_2_fu_399_p3;

assign zext_ln414_2_fu_416_p1 = select_ln414_1_fu_393_p3;

assign zext_ln414_3_fu_420_p1 = sub_ln414_fu_406_p2;

assign zext_ln414_fu_378_p1 = Lo_reg_760;

assign zext_ln598_fu_306_p1 = Hi_fu_300_p2;

always @ (posedge ap_clk) begin
    Hi_reg_754[2:0] <= 3'b111;
    Lo_reg_760[2:0] <= 3'b000;
end

endmodule //gzipcMulticoreStreaming_bytePacker_64_4_Pipeline_multicorePacker
