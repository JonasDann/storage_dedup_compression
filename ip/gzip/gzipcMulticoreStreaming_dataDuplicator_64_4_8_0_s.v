// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_dataDuplicator_64_4_8_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        inStream_dout,
        inStream_num_data_valid,
        inStream_fifo_cap,
        inStream_empty_n,
        inStream_read,
        checksumInitStream98_din,
        checksumInitStream98_num_data_valid,
        checksumInitStream98_fifo_cap,
        checksumInitStream98_full_n,
        checksumInitStream98_write,
        checksumStream94_din,
        checksumStream94_num_data_valid,
        checksumStream94_fifo_cap,
        checksumStream94_full_n,
        checksumStream94_write,
        checksumSizeStream96_din,
        checksumSizeStream96_num_data_valid,
        checksumSizeStream96_fifo_cap,
        checksumSizeStream96_full_n,
        checksumSizeStream96_write,
        coreStream92_din,
        coreStream92_num_data_valid,
        coreStream92_fifo_cap,
        coreStream92_full_n,
        coreStream92_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [67:0] inStream_dout;
input  [2:0] inStream_num_data_valid;
input  [2:0] inStream_fifo_cap;
input   inStream_empty_n;
output   inStream_read;
output  [31:0] checksumInitStream98_din;
input  [2:0] checksumInitStream98_num_data_valid;
input  [2:0] checksumInitStream98_fifo_cap;
input   checksumInitStream98_full_n;
output   checksumInitStream98_write;
output  [63:0] checksumStream94_din;
input  [2:0] checksumStream94_num_data_valid;
input  [2:0] checksumStream94_fifo_cap;
input   checksumStream94_full_n;
output   checksumStream94_write;
output  [4:0] checksumSizeStream96_din;
input  [2:0] checksumSizeStream96_num_data_valid;
input  [2:0] checksumSizeStream96_fifo_cap;
input   checksumSizeStream96_full_n;
output   checksumSizeStream96_write;
output  [67:0] coreStream92_din;
input  [2:0] coreStream92_num_data_valid;
input  [2:0] coreStream92_fifo_cap;
input   coreStream92_full_n;
output   coreStream92_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg inStream_read;
reg checksumInitStream98_write;
reg checksumStream94_write;
reg checksumSizeStream96_write;
reg coreStream92_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    checksumInitStream98_blk_n;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_idle;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_ready;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_inStream_read;
wire   [4:0] grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumSizeStream96_din;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumSizeStream96_write;
wire   [67:0] grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_coreStream92_din;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_coreStream92_write;
wire   [63:0] grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumStream94_din;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumStream94_write;
reg    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start_reg = 1'b0;
end

gzipcMulticoreStreaming_dataDuplicator_64_4_8_0_Pipeline_duplicator grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start),
    .ap_done(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done),
    .ap_idle(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_idle),
    .ap_ready(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_ready),
    .inStream_dout(inStream_dout),
    .inStream_num_data_valid(3'd0),
    .inStream_fifo_cap(3'd0),
    .inStream_empty_n(inStream_empty_n),
    .inStream_read(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_inStream_read),
    .checksumSizeStream96_din(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumSizeStream96_din),
    .checksumSizeStream96_num_data_valid(3'd0),
    .checksumSizeStream96_fifo_cap(3'd0),
    .checksumSizeStream96_full_n(checksumSizeStream96_full_n),
    .checksumSizeStream96_write(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumSizeStream96_write),
    .coreStream92_din(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_coreStream92_din),
    .coreStream92_num_data_valid(3'd0),
    .coreStream92_fifo_cap(3'd0),
    .coreStream92_full_n(coreStream92_full_n),
    .coreStream92_write(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_coreStream92_write),
    .checksumStream94_din(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumStream94_din),
    .checksumStream94_num_data_valid(3'd0),
    .checksumStream94_fifo_cap(3'd0),
    .checksumStream94_full_n(checksumStream94_full_n),
    .checksumStream94_write(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumStream94_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_ready == 1'b1)) begin
            grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (checksumInitStream98_full_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        checksumInitStream98_blk_n = checksumInitStream98_full_n;
    end else begin
        checksumInitStream98_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (checksumInitStream98_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        checksumInitStream98_write = 1'b1;
    end else begin
        checksumInitStream98_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        checksumSizeStream96_write = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumSizeStream96_write;
    end else begin
        checksumSizeStream96_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        checksumStream94_write = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumStream94_write;
    end else begin
        checksumStream94_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        coreStream92_write = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_coreStream92_write;
    end else begin
        coreStream92_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inStream_read = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_inStream_read;
    end else begin
        inStream_read = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (checksumInitStream98_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (checksumInitStream98_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign checksumInitStream98_din = 32'd4294967295;

assign checksumSizeStream96_din = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumSizeStream96_din;

assign checksumStream94_din = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumStream94_din;

assign coreStream92_din = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_coreStream92_din;

assign grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start_reg;

assign start_out = real_start;

endmodule //gzipcMulticoreStreaming_dataDuplicator_64_4_8_0_s
