// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_multicoreDistributor_unsigned_int_64_4_8_4096_64_0_Pipeline_init_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        coreStream92_dout,
        coreStream92_num_data_valid,
        coreStream92_fifo_cap,
        coreStream92_empty_n,
        coreStream92_read,
        storedBufferStream_din,
        storedBufferStream_full_n,
        storedBufferStream_write,
        readSize_out_i,
        readSize_out_o,
        readSize_out_o_ap_vld,
        last_out,
        last_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [67:0] coreStream92_dout;
input  [2:0] coreStream92_num_data_valid;
input  [2:0] coreStream92_fifo_cap;
input   coreStream92_empty_n;
output   coreStream92_read;
output  [67:0] storedBufferStream_din;
input   storedBufferStream_full_n;
output   storedBufferStream_write;
input  [31:0] readSize_out_i;
output  [31:0] readSize_out_o;
output   readSize_out_o_ap_vld;
output  [0:0] last_out;
output   last_out_ap_vld;

reg ap_idle;
reg coreStream92_read;
reg storedBufferStream_write;
reg[31:0] readSize_out_o;
reg readSize_out_o_ap_vld;
reg last_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] and_ln203_fu_103_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] and_ln203_reg_155;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    coreStream92_blk_n;
wire    ap_block_pp0_stage0;
reg    storedBufferStream_blk_n;
reg   [0:0] last_reg_66;
reg    ap_block_pp0_stage0_11001;
reg   [67:0] tmpVal_V_reg_159;
wire   [3:0] strobe_V_fu_115_p1;
reg   [3:0] strobe_V_reg_164;
wire   [0:0] last_2_fu_128_p2;
reg   [0:0] ap_phi_mux_last_phi_fu_69_p4;
wire    ap_loop_init;
wire   [31:0] readSize_fu_136_p2;
reg   [3:0] i_fu_42;
wire   [3:0] i_5_fu_109_p2;
reg   [3:0] ap_sig_allocacmp_i_4;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln203_fu_91_p2;
wire   [0:0] xor_ln203_fu_97_p2;
wire   [31:0] zext_ln208_fu_133_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_186;
reg    ap_condition_192;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((1'd1 == and_ln203_fu_103_p2) & (ap_start_int == 1'b1))) begin
            i_fu_42 <= i_5_fu_109_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_42 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_192)) begin
            last_reg_66 <= last_2_fu_128_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            last_reg_66 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln203_reg_155 <= and_ln203_fu_103_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln203_fu_103_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strobe_V_reg_164 <= strobe_V_fu_115_p1;
        tmpVal_V_reg_159 <= coreStream92_dout;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln203_fu_103_p2) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_186)) begin
            ap_phi_mux_last_phi_fu_69_p4 = last_2_fu_128_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_last_phi_fu_69_p4 = 1'd0;
        end else begin
            ap_phi_mux_last_phi_fu_69_p4 = last_reg_66;
        end
    end else begin
        ap_phi_mux_last_phi_fu_69_p4 = last_reg_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_4 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln203_fu_103_p2) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coreStream92_blk_n = coreStream92_empty_n;
    end else begin
        coreStream92_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln203_fu_103_p2) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coreStream92_read = 1'b1;
    end else begin
        coreStream92_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln203_fu_103_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        last_out_ap_vld = 1'b1;
    end else begin
        last_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            readSize_out_o = 32'd0;
        end else if (((1'd1 == and_ln203_reg_155) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            readSize_out_o = readSize_fu_136_p2;
        end else begin
            readSize_out_o = readSize_out_i;
        end
    end else begin
        readSize_out_o = readSize_out_i;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln203_reg_155) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1)))) begin
        readSize_out_o_ap_vld = 1'b1;
    end else begin
        readSize_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln203_reg_155) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        storedBufferStream_blk_n = storedBufferStream_full_n;
    end else begin
        storedBufferStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln203_reg_155) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        storedBufferStream_write = 1'b1;
    end else begin
        storedBufferStream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln203_fu_103_p2 = (xor_ln203_fu_97_p2 & icmp_ln203_fu_91_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((storedBufferStream_full_n == 1'b0) & (1'd1 == and_ln203_reg_155) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'd1 == and_ln203_fu_103_p2) & (coreStream92_empty_n == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((storedBufferStream_full_n == 1'b0) & (1'd1 == and_ln203_reg_155) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'd1 == and_ln203_fu_103_p2) & (coreStream92_empty_n == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((storedBufferStream_full_n == 1'b0) & (1'd1 == and_ln203_reg_155) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'd1 == and_ln203_fu_103_p2) & (coreStream92_empty_n == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((1'd1 == and_ln203_fu_103_p2) & (coreStream92_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((storedBufferStream_full_n == 1'b0) & (1'd1 == and_ln203_reg_155));
end

always @ (*) begin
    ap_condition_186 = ((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln203_reg_155) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_192 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln203_reg_155) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_5_fu_109_p2 = (ap_sig_allocacmp_i_4 + 4'd1);

assign icmp_ln203_fu_91_p2 = ((ap_sig_allocacmp_i_4 < 4'd9) ? 1'b1 : 1'b0);

assign last_2_fu_128_p2 = ((strobe_V_reg_164 == 4'd0) ? 1'b1 : 1'b0);

assign last_out = last_reg_66;

assign readSize_fu_136_p2 = (zext_ln208_fu_133_p1 + readSize_out_i);

assign storedBufferStream_din = tmpVal_V_reg_159;

assign strobe_V_fu_115_p1 = coreStream92_dout[3:0];

assign xor_ln203_fu_97_p2 = (ap_phi_mux_last_phi_fu_69_p4 ^ 1'd1);

assign zext_ln208_fu_133_p1 = strobe_V_reg_164;

endmodule //gzipcMulticoreStreaming_multicoreDistributor_unsigned_int_64_4_8_4096_64_0_Pipeline_init_loop
