// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_axiu2hlsStream_64_Pipeline_axi2Hls (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inStream_TVALID,
        inStream_din,
        inStream_num_data_valid,
        inStream_fifo_cap,
        inStream_full_n,
        inStream_write,
        tmp_data_V,
        tmp_keep_V,
        tmp_last_V,
        inStream_TDATA,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TLAST,
        p_Val2_out,
        p_Val2_out_ap_vld,
        keep_V_1_out,
        keep_V_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   inStream_TVALID;
output  [67:0] inStream_din;
input  [2:0] inStream_num_data_valid;
input  [2:0] inStream_fifo_cap;
input   inStream_full_n;
output   inStream_write;
input  [63:0] tmp_data_V;
input  [7:0] tmp_keep_V;
input  [0:0] tmp_last_V;
input  [63:0] inStream_TDATA;
output   inStream_TREADY;
input  [7:0] inStream_TKEEP;
input  [7:0] inStream_TSTRB;
input  [0:0] inStream_TLAST;
output  [63:0] p_Val2_out;
output   p_Val2_out_ap_vld;
output  [7:0] keep_V_1_out;
output   keep_V_1_out_ap_vld;

reg ap_idle;
reg inStream_write;
reg inStream_TREADY;
reg p_Val2_out_ap_vld;
reg keep_V_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] ap_phi_mux_last_phi_fu_130_p4;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] last_reg_127;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    inStream_blk_n;
wire    ap_block_pp0_stage0;
reg    inStream_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] tmpVal_V_load_1_reg_208;
reg   [0:0] tmp_last_V_2_reg_213;
wire    ap_loop_init;
reg   [7:0] keep_V_fu_68;
reg   [63:0] tmpVal_V_fu_72;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            keep_V_fu_68 <= tmp_keep_V;
        end else if (((ap_phi_mux_last_phi_fu_130_p4 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            keep_V_fu_68 <= inStream_TKEEP;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (last_reg_127 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        last_reg_127 <= tmp_last_V_2_reg_213;
    end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        last_reg_127 <= tmp_last_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmpVal_V_fu_72 <= tmp_data_V;
        end else if (((ap_phi_mux_last_phi_fu_130_p4 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            tmpVal_V_fu_72 <= inStream_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_last_phi_fu_130_p4 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmpVal_V_load_1_reg_208 <= tmpVal_V_fu_72;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_last_phi_fu_130_p4 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_2_reg_213 <= inStream_TLAST;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_phi_mux_last_phi_fu_130_p4 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (last_reg_127 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_last_phi_fu_130_p4 = tmp_last_V_2_reg_213;
    end else begin
        ap_phi_mux_last_phi_fu_130_p4 = last_reg_127;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_phi_mux_last_phi_fu_130_p4 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_TDATA_blk_n = inStream_TVALID;
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_last_phi_fu_130_p4 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_TREADY = 1'b1;
    end else begin
        inStream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (last_reg_127 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inStream_blk_n = inStream_full_n;
    end else begin
        inStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (last_reg_127 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inStream_write = 1'b1;
    end else begin
        inStream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_last_phi_fu_130_p4 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        keep_V_1_out_ap_vld = 1'b1;
    end else begin
        keep_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_last_phi_fu_130_p4 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_out_ap_vld = 1'b1;
    end else begin
        p_Val2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((last_reg_127 == 1'd0) & (inStream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_phi_mux_last_phi_fu_130_p4 == 1'd0) & (inStream_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((last_reg_127 == 1'd0) & (inStream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_phi_mux_last_phi_fu_130_p4 == 1'd0) & (inStream_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((last_reg_127 == 1'd0) & (inStream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_phi_mux_last_phi_fu_130_p4 == 1'd0) & (inStream_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_phi_mux_last_phi_fu_130_p4 == 1'd0) & (inStream_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((last_reg_127 == 1'd0) & (inStream_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign inStream_din = {{4'd8}, {tmpVal_V_load_1_reg_208}};

assign keep_V_1_out = keep_V_fu_68;

assign p_Val2_out = tmpVal_V_fu_72;

endmodule //gzipcMulticoreStreaming_axiu2hlsStream_64_Pipeline_axi2Hls
