// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_multicoreDistributor_Pipeline_VITIS_LOOP_217_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        coreStream92_dout,
        coreStream92_num_data_valid,
        coreStream92_fifo_cap,
        coreStream92_empty_n,
        coreStream92_read,
        storedBufferStream_dout,
        storedBufferStream_empty_n,
        storedBufferStream_read,
        distStream_6_din,
        distStream_6_num_data_valid,
        distStream_6_fifo_cap,
        distStream_6_full_n,
        distStream_6_write,
        distStream_5_din,
        distStream_5_num_data_valid,
        distStream_5_fifo_cap,
        distStream_5_full_n,
        distStream_5_write,
        distStream_4_din,
        distStream_4_num_data_valid,
        distStream_4_fifo_cap,
        distStream_4_full_n,
        distStream_4_write,
        distStream_3_din,
        distStream_3_num_data_valid,
        distStream_3_fifo_cap,
        distStream_3_full_n,
        distStream_3_write,
        distStream_2_din,
        distStream_2_num_data_valid,
        distStream_2_fifo_cap,
        distStream_2_full_n,
        distStream_2_write,
        distStream_1_din,
        distStream_1_num_data_valid,
        distStream_1_fifo_cap,
        distStream_1_full_n,
        distStream_1_write,
        distStream_0_din,
        distStream_0_num_data_valid,
        distStream_0_fifo_cap,
        distStream_0_full_n,
        distStream_0_write,
        distStream_7_din,
        distStream_7_num_data_valid,
        distStream_7_fifo_cap,
        distStream_7_full_n,
        distStream_7_write,
        storedBufferStream_din,
        storedBufferStream_full_n,
        storedBufferStream_write,
        strdCntr_V,
        writeSize,
        readSize_1,
        trunc_ln1,
        strdCntr_V_2_out,
        strdCntr_V_2_out_ap_vld,
        writeSize_1_out,
        writeSize_1_out_ap_vld,
        readSize_2_out,
        readSize_2_out_ap_vld,
        last_2_out,
        last_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [67:0] coreStream92_dout;
input  [2:0] coreStream92_num_data_valid;
input  [2:0] coreStream92_fifo_cap;
input   coreStream92_empty_n;
output   coreStream92_read;
input  [67:0] storedBufferStream_dout;
input   storedBufferStream_empty_n;
output   storedBufferStream_read;
output  [67:0] distStream_6_din;
input  [9:0] distStream_6_num_data_valid;
input  [9:0] distStream_6_fifo_cap;
input   distStream_6_full_n;
output   distStream_6_write;
output  [67:0] distStream_5_din;
input  [9:0] distStream_5_num_data_valid;
input  [9:0] distStream_5_fifo_cap;
input   distStream_5_full_n;
output   distStream_5_write;
output  [67:0] distStream_4_din;
input  [9:0] distStream_4_num_data_valid;
input  [9:0] distStream_4_fifo_cap;
input   distStream_4_full_n;
output   distStream_4_write;
output  [67:0] distStream_3_din;
input  [9:0] distStream_3_num_data_valid;
input  [9:0] distStream_3_fifo_cap;
input   distStream_3_full_n;
output   distStream_3_write;
output  [67:0] distStream_2_din;
input  [9:0] distStream_2_num_data_valid;
input  [9:0] distStream_2_fifo_cap;
input   distStream_2_full_n;
output   distStream_2_write;
output  [67:0] distStream_1_din;
input  [9:0] distStream_1_num_data_valid;
input  [9:0] distStream_1_fifo_cap;
input   distStream_1_full_n;
output   distStream_1_write;
output  [67:0] distStream_0_din;
input  [9:0] distStream_0_num_data_valid;
input  [9:0] distStream_0_fifo_cap;
input   distStream_0_full_n;
output   distStream_0_write;
output  [67:0] distStream_7_din;
input  [9:0] distStream_7_num_data_valid;
input  [9:0] distStream_7_fifo_cap;
input   distStream_7_full_n;
output   distStream_7_write;
output  [67:0] storedBufferStream_din;
input   storedBufferStream_full_n;
output   storedBufferStream_write;
input  [15:0] strdCntr_V;
input  [31:0] writeSize;
input  [31:0] readSize_1;
input  [2:0] trunc_ln1;
output  [15:0] strdCntr_V_2_out;
output   strdCntr_V_2_out_ap_vld;
output  [31:0] writeSize_1_out;
output   writeSize_1_out_ap_vld;
output  [31:0] readSize_2_out;
output   readSize_2_out_ap_vld;
output  [0:0] last_2_out;
output   last_2_out_ap_vld;

reg ap_idle;
reg coreStream92_read;
reg storedBufferStream_read;
reg distStream_6_write;
reg distStream_5_write;
reg distStream_4_write;
reg distStream_3_write;
reg distStream_2_write;
reg distStream_1_write;
reg distStream_0_write;
reg distStream_7_write;
reg storedBufferStream_write;
reg strdCntr_V_2_out_ap_vld;
reg writeSize_1_out_ap_vld;
reg readSize_2_out_ap_vld;
reg last_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] or_ln217_fu_298_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] or_ln217_reg_428;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    storedBufferStream_o_blk_n;
wire    ap_block_pp0_stage0;
reg    storedBufferStream_i_blk_n;
reg    distStream_0_blk_n;
reg    coreStream92_blk_n;
reg    distStream_1_blk_n;
reg    distStream_2_blk_n;
reg    distStream_3_blk_n;
reg    distStream_4_blk_n;
reg    distStream_5_blk_n;
reg    distStream_6_blk_n;
reg    distStream_7_blk_n;
reg   [0:0] last_reg_255;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] or_ln217_reg_428_pp0_iter1_reg;
reg   [67:0] tmpVal_V_reg_432;
wire   [3:0] strobe_fu_304_p1;
reg   [3:0] strobe_reg_437;
wire   [0:0] last_1_fu_308_p2;
reg   [0:0] last_1_reg_442;
wire   [3:0] trunc_ln674_fu_340_p1;
reg   [3:0] trunc_ln674_reg_447;
reg   [0:0] ap_phi_mux_last_phi_fu_259_p4;
wire    ap_loop_init;
reg   [12:0] i_fu_104;
wire   [12:0] i_3_fu_314_p2;
reg   [12:0] ap_sig_allocacmp_i_2;
reg   [31:0] readSize_fu_108;
wire   [31:0] readSize_2_fu_331_p2;
reg   [31:0] writeSize_1_fu_112;
wire   [31:0] writeSize_5_fu_370_p2;
reg   [15:0] strdCntr_V_2_fu_116;
wire   [15:0] strdCntr_V_5_fu_348_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_fu_290_p3;
wire   [31:0] zext_ln221_fu_328_p1;
wire   [15:0] zext_ln886_fu_344_p1;
wire   [31:0] zext_ln226_fu_367_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_376;
reg    ap_condition_381;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((or_ln217_fu_298_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            i_fu_104 <= i_3_fu_314_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_104 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_381)) begin
            last_reg_255 <= last_1_reg_442;
        end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            last_reg_255 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            readSize_fu_108 <= readSize_1;
        end else if (((or_ln217_reg_428 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            readSize_fu_108 <= readSize_2_fu_331_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            strdCntr_V_2_fu_116 <= strdCntr_V;
        end else if (((or_ln217_reg_428 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            strdCntr_V_2_fu_116 <= strdCntr_V_5_fu_348_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            writeSize_1_fu_112 <= writeSize;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln217_reg_428_pp0_iter1_reg == 1'd0))) begin
            writeSize_1_fu_112 <= writeSize_5_fu_370_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        or_ln217_reg_428 <= or_ln217_fu_298_p2;
        or_ln217_reg_428_pp0_iter1_reg <= or_ln217_reg_428;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln217_fu_298_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        last_1_reg_442 <= last_1_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln217_fu_298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        strobe_reg_437 <= strobe_fu_304_p1;
        tmpVal_V_reg_432 <= coreStream92_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln217_reg_428 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln674_reg_447 <= trunc_ln674_fu_340_p1;
    end
end

always @ (*) begin
    if (((or_ln217_fu_298_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_376)) begin
            ap_phi_mux_last_phi_fu_259_p4 = last_1_reg_442;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_last_phi_fu_259_p4 = 1'd0;
        end else begin
            ap_phi_mux_last_phi_fu_259_p4 = last_1_reg_442;
        end
    end else begin
        ap_phi_mux_last_phi_fu_259_p4 = last_1_reg_442;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 13'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_104;
    end
end

always @ (*) begin
    if (((or_ln217_fu_298_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        coreStream92_blk_n = coreStream92_empty_n;
    end else begin
        coreStream92_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln217_fu_298_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coreStream92_read = 1'b1;
    end else begin
        coreStream92_read = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_0_blk_n = distStream_0_full_n;
    end else begin
        distStream_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_0_write = 1'b1;
    end else begin
        distStream_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_1_blk_n = distStream_1_full_n;
    end else begin
        distStream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_1_write = 1'b1;
    end else begin
        distStream_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_2_blk_n = distStream_2_full_n;
    end else begin
        distStream_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_2_write = 1'b1;
    end else begin
        distStream_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_3_blk_n = distStream_3_full_n;
    end else begin
        distStream_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_3_write = 1'b1;
    end else begin
        distStream_3_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_4_blk_n = distStream_4_full_n;
    end else begin
        distStream_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_4_write = 1'b1;
    end else begin
        distStream_4_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_5_blk_n = distStream_5_full_n;
    end else begin
        distStream_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_5_write = 1'b1;
    end else begin
        distStream_5_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_6_blk_n = distStream_6_full_n;
    end else begin
        distStream_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_6_write = 1'b1;
    end else begin
        distStream_6_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_7_blk_n = distStream_7_full_n;
    end else begin
        distStream_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln1 == 3'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_7_write = 1'b1;
    end else begin
        distStream_7_write = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln217_reg_428 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        last_2_out_ap_vld = 1'b1;
    end else begin
        last_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln217_reg_428 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        readSize_2_out_ap_vld = 1'b1;
    end else begin
        readSize_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln217_reg_428 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        storedBufferStream_i_blk_n = storedBufferStream_empty_n;
    end else begin
        storedBufferStream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln217_reg_428 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        storedBufferStream_o_blk_n = storedBufferStream_full_n;
    end else begin
        storedBufferStream_o_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln217_reg_428 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        storedBufferStream_read = 1'b1;
    end else begin
        storedBufferStream_read = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln217_reg_428 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        storedBufferStream_write = 1'b1;
    end else begin
        storedBufferStream_write = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln217_reg_428 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        strdCntr_V_2_out_ap_vld = 1'b1;
    end else begin
        strdCntr_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln217_reg_428 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        writeSize_1_out_ap_vld = 1'b1;
    end else begin
        writeSize_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((or_ln217_fu_298_p2 == 1'd0) & (coreStream92_empty_n == 1'b0) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((distStream_3_full_n == 1'b0) & (trunc_ln1 == 3'd3)) | ((distStream_4_full_n == 1'b0) & (trunc_ln1 == 3'd4)) | ((distStream_5_full_n == 1'b0) & (trunc_ln1 == 3'd5)) | ((trunc_ln1 == 3'd6) & (distStream_6_full_n == 1'b0)) | ((or_ln217_reg_428 == 1'd0) & (storedBufferStream_empty_n == 1'b0)) | ((or_ln217_reg_428 == 1'd0) & (storedBufferStream_full_n == 1'b0)) | ((trunc_ln1 == 3'd7) & (distStream_7_full_n == 1'b0)) | ((trunc_ln1 == 3'd0) & (distStream_0_full_n == 1'b0)) | ((trunc_ln1 == 3'd1) & (distStream_1_full_n == 1'b0)) | ((trunc_ln1 == 3'd2) & (distStream_2_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((or_ln217_fu_298_p2 == 1'd0) & (coreStream92_empty_n == 1'b0) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((distStream_3_full_n == 1'b0) & (trunc_ln1 == 3'd3)) | ((distStream_4_full_n == 1'b0) & (trunc_ln1 == 3'd4)) | ((distStream_5_full_n == 1'b0) & (trunc_ln1 == 3'd5)) | ((trunc_ln1 == 3'd6) & (distStream_6_full_n == 1'b0)) | ((or_ln217_reg_428 == 1'd0) & (storedBufferStream_empty_n == 1'b0)) | ((or_ln217_reg_428 == 1'd0) & (storedBufferStream_full_n == 1'b0)) | ((trunc_ln1 == 3'd7) & (distStream_7_full_n == 1'b0)) | ((trunc_ln1 == 3'd0) & (distStream_0_full_n == 1'b0)) | ((trunc_ln1 == 3'd1) & (distStream_1_full_n == 1'b0)) | ((trunc_ln1 == 3'd2) & (distStream_2_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((or_ln217_fu_298_p2 == 1'd0) & (coreStream92_empty_n == 1'b0) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((distStream_3_full_n == 1'b0) & (trunc_ln1 == 3'd3)) | ((distStream_4_full_n == 1'b0) & (trunc_ln1 == 3'd4)) | ((distStream_5_full_n == 1'b0) & (trunc_ln1 == 3'd5)) | ((trunc_ln1 == 3'd6) & (distStream_6_full_n == 1'b0)) | ((or_ln217_reg_428 == 1'd0) & (storedBufferStream_empty_n == 1'b0)) | ((or_ln217_reg_428 == 1'd0) & (storedBufferStream_full_n == 1'b0)) | ((trunc_ln1 == 3'd7) & (distStream_7_full_n == 1'b0)) | ((trunc_ln1 == 3'd0) & (distStream_0_full_n == 1'b0)) | ((trunc_ln1 == 3'd1) & (distStream_1_full_n == 1'b0)) | ((trunc_ln1 == 3'd2) & (distStream_2_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((or_ln217_fu_298_p2 == 1'd0) & (coreStream92_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((distStream_3_full_n == 1'b0) & (trunc_ln1 == 3'd3)) | ((distStream_4_full_n == 1'b0) & (trunc_ln1 == 3'd4)) | ((distStream_5_full_n == 1'b0) & (trunc_ln1 == 3'd5)) | ((trunc_ln1 == 3'd6) & (distStream_6_full_n == 1'b0)) | ((or_ln217_reg_428 == 1'd0) & (storedBufferStream_empty_n == 1'b0)) | ((or_ln217_reg_428 == 1'd0) & (storedBufferStream_full_n == 1'b0)) | ((trunc_ln1 == 3'd7) & (distStream_7_full_n == 1'b0)) | ((trunc_ln1 == 3'd0) & (distStream_0_full_n == 1'b0)) | ((trunc_ln1 == 3'd1) & (distStream_1_full_n == 1'b0)) | ((trunc_ln1 == 3'd2) & (distStream_2_full_n == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_376 = ((or_ln217_reg_428 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_381 = ((or_ln217_reg_428 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign distStream_0_din = storedBufferStream_dout;

assign distStream_1_din = storedBufferStream_dout;

assign distStream_2_din = storedBufferStream_dout;

assign distStream_3_din = storedBufferStream_dout;

assign distStream_4_din = storedBufferStream_dout;

assign distStream_5_din = storedBufferStream_dout;

assign distStream_6_din = storedBufferStream_dout;

assign distStream_7_din = storedBufferStream_dout;

assign i_3_fu_314_p2 = (ap_sig_allocacmp_i_2 + 13'd8);

assign last_1_fu_308_p2 = ((strobe_fu_304_p1 == 4'd0) ? 1'b1 : 1'b0);

assign last_2_out = last_reg_255;

assign or_ln217_fu_298_p2 = (tmp_fu_290_p3 | ap_phi_mux_last_phi_fu_259_p4);

assign readSize_2_fu_331_p2 = (zext_ln221_fu_328_p1 + readSize_fu_108);

assign readSize_2_out = readSize_fu_108;

assign storedBufferStream_din = tmpVal_V_reg_432;

assign strdCntr_V_2_out = strdCntr_V_2_fu_116;

assign strdCntr_V_5_fu_348_p2 = (zext_ln886_fu_344_p1 + strdCntr_V_2_fu_116);

assign strobe_fu_304_p1 = coreStream92_dout[3:0];

assign tmp_fu_290_p3 = ap_sig_allocacmp_i_2[32'd12];

assign trunc_ln674_fu_340_p1 = storedBufferStream_dout[3:0];

assign writeSize_1_out = writeSize_1_fu_112;

assign writeSize_5_fu_370_p2 = (zext_ln226_fu_367_p1 + writeSize_1_fu_112);

assign zext_ln221_fu_328_p1 = strobe_reg_437;

assign zext_ln226_fu_367_p1 = trunc_ln674_reg_447;

assign zext_ln886_fu_344_p1 = trunc_ln674_fu_340_p1;

endmodule //gzipcMulticoreStreaming_multicoreDistributor_Pipeline_VITIS_LOOP_217_1
