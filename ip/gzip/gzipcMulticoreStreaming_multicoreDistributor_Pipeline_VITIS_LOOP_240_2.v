// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_multicoreDistributor_Pipeline_VITIS_LOOP_240_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        storedBufferStream_dout,
        storedBufferStream_empty_n,
        storedBufferStream_read,
        distStream_6_din,
        distStream_6_num_data_valid,
        distStream_6_fifo_cap,
        distStream_6_full_n,
        distStream_6_write,
        distStream_5_din,
        distStream_5_num_data_valid,
        distStream_5_fifo_cap,
        distStream_5_full_n,
        distStream_5_write,
        distStream_4_din,
        distStream_4_num_data_valid,
        distStream_4_fifo_cap,
        distStream_4_full_n,
        distStream_4_write,
        distStream_3_din,
        distStream_3_num_data_valid,
        distStream_3_fifo_cap,
        distStream_3_full_n,
        distStream_3_write,
        distStream_2_din,
        distStream_2_num_data_valid,
        distStream_2_fifo_cap,
        distStream_2_full_n,
        distStream_2_write,
        distStream_1_din,
        distStream_1_num_data_valid,
        distStream_1_fifo_cap,
        distStream_1_full_n,
        distStream_1_write,
        distStream_0_din,
        distStream_0_num_data_valid,
        distStream_0_fifo_cap,
        distStream_0_full_n,
        distStream_0_write,
        distStream_7_din,
        distStream_7_num_data_valid,
        distStream_7_fifo_cap,
        distStream_7_full_n,
        distStream_7_write,
        strdCntr_V,
        writeSize,
        readSize_1,
        p_cast,
        writeSize_2_out,
        writeSize_2_out_ap_vld,
        endBlck_out,
        endBlck_out_ap_vld,
        cmp_i_i_out,
        cmp_i_i_out_ap_vld,
        icmp_ln240_out,
        icmp_ln240_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [67:0] storedBufferStream_dout;
input   storedBufferStream_empty_n;
output   storedBufferStream_read;
output  [67:0] distStream_6_din;
input  [9:0] distStream_6_num_data_valid;
input  [9:0] distStream_6_fifo_cap;
input   distStream_6_full_n;
output   distStream_6_write;
output  [67:0] distStream_5_din;
input  [9:0] distStream_5_num_data_valid;
input  [9:0] distStream_5_fifo_cap;
input   distStream_5_full_n;
output   distStream_5_write;
output  [67:0] distStream_4_din;
input  [9:0] distStream_4_num_data_valid;
input  [9:0] distStream_4_fifo_cap;
input   distStream_4_full_n;
output   distStream_4_write;
output  [67:0] distStream_3_din;
input  [9:0] distStream_3_num_data_valid;
input  [9:0] distStream_3_fifo_cap;
input   distStream_3_full_n;
output   distStream_3_write;
output  [67:0] distStream_2_din;
input  [9:0] distStream_2_num_data_valid;
input  [9:0] distStream_2_fifo_cap;
input   distStream_2_full_n;
output   distStream_2_write;
output  [67:0] distStream_1_din;
input  [9:0] distStream_1_num_data_valid;
input  [9:0] distStream_1_fifo_cap;
input   distStream_1_full_n;
output   distStream_1_write;
output  [67:0] distStream_0_din;
input  [9:0] distStream_0_num_data_valid;
input  [9:0] distStream_0_fifo_cap;
input   distStream_0_full_n;
output   distStream_0_write;
output  [67:0] distStream_7_din;
input  [9:0] distStream_7_num_data_valid;
input  [9:0] distStream_7_fifo_cap;
input   distStream_7_full_n;
output   distStream_7_write;
input  [15:0] strdCntr_V;
input  [31:0] writeSize;
input  [31:0] readSize_1;
input  [2:0] p_cast;
output  [31:0] writeSize_2_out;
output   writeSize_2_out_ap_vld;
output  [0:0] endBlck_out;
output   endBlck_out_ap_vld;
output  [0:0] cmp_i_i_out;
output   cmp_i_i_out_ap_vld;
output  [0:0] icmp_ln240_out;
output   icmp_ln240_out_ap_vld;

reg ap_idle;
reg storedBufferStream_read;
reg distStream_6_write;
reg distStream_5_write;
reg distStream_4_write;
reg distStream_3_write;
reg distStream_2_write;
reg distStream_1_write;
reg distStream_0_write;
reg distStream_7_write;
reg writeSize_2_out_ap_vld;
reg endBlck_out_ap_vld;
reg cmp_i_i_out_ap_vld;
reg icmp_ln240_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] or_ln240_fu_258_p2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    distStream_0_blk_n;
wire    ap_block_pp0_stage0;
reg    storedBufferStream_blk_n;
reg    distStream_1_blk_n;
reg    distStream_2_blk_n;
reg    distStream_3_blk_n;
reg    distStream_4_blk_n;
reg    distStream_5_blk_n;
reg    distStream_6_blk_n;
reg    distStream_7_blk_n;
reg   [0:0] endBlck_reg_216;
reg    ap_block_pp0_stage0_11001;
reg   [67:0] p_Val2_s_reg_351;
wire   [0:0] endBlck_1_fu_308_p2;
wire    ap_loop_init;
reg   [31:0] writeSize_2_fu_94;
wire   [31:0] writeSize_4_fu_282_p2;
reg   [15:0] strdCntr_V_1_fu_98;
wire   [15:0] strdCntr_V_4_fu_294_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] cmp_i_i_fu_245_p2;
wire   [0:0] icmp_ln240_fu_252_p2;
wire   [3:0] trunc_ln674_fu_264_p1;
wire   [15:0] zext_ln886_fu_268_p1;
wire   [31:0] zext_ln245_fu_278_p1;
wire   [15:0] strdCntr_V_3_fu_272_p2;
wire   [0:0] icmp_ln1065_fu_288_p2;
wire   [0:0] xor_ln246_fu_302_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_329;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_329)) begin
            endBlck_reg_216 <= endBlck_1_fu_308_p2;
        end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            endBlck_reg_216 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            strdCntr_V_1_fu_98 <= strdCntr_V;
        end else if (((or_ln240_fu_258_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            strdCntr_V_1_fu_98 <= strdCntr_V_4_fu_294_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            writeSize_2_fu_94 <= writeSize;
        end else if (((or_ln240_fu_258_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            writeSize_2_fu_94 <= writeSize_4_fu_282_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln240_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_reg_351 <= storedBufferStream_dout;
    end
end

always @ (*) begin
    if (((or_ln240_fu_258_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln240_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cmp_i_i_out_ap_vld = 1'b1;
    end else begin
        cmp_i_i_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast == 3'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_0_blk_n = distStream_0_full_n;
    end else begin
        distStream_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_cast == 3'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_0_write = 1'b1;
    end else begin
        distStream_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast == 3'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_1_blk_n = distStream_1_full_n;
    end else begin
        distStream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_cast == 3'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_1_write = 1'b1;
    end else begin
        distStream_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast == 3'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_2_blk_n = distStream_2_full_n;
    end else begin
        distStream_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_cast == 3'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_2_write = 1'b1;
    end else begin
        distStream_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast == 3'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_3_blk_n = distStream_3_full_n;
    end else begin
        distStream_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_cast == 3'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_3_write = 1'b1;
    end else begin
        distStream_3_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast == 3'd4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_4_blk_n = distStream_4_full_n;
    end else begin
        distStream_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_cast == 3'd4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_4_write = 1'b1;
    end else begin
        distStream_4_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast == 3'd5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_5_blk_n = distStream_5_full_n;
    end else begin
        distStream_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_cast == 3'd5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_5_write = 1'b1;
    end else begin
        distStream_5_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast == 3'd6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_6_blk_n = distStream_6_full_n;
    end else begin
        distStream_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_cast == 3'd6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_6_write = 1'b1;
    end else begin
        distStream_6_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_cast == 3'd7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_7_blk_n = distStream_7_full_n;
    end else begin
        distStream_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_cast == 3'd7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_7_write = 1'b1;
    end else begin
        distStream_7_write = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln240_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        endBlck_out_ap_vld = 1'b1;
    end else begin
        endBlck_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln240_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln240_out_ap_vld = 1'b1;
    end else begin
        icmp_ln240_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln240_fu_258_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        storedBufferStream_blk_n = storedBufferStream_empty_n;
    end else begin
        storedBufferStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln240_fu_258_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        storedBufferStream_read = 1'b1;
    end else begin
        storedBufferStream_read = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln240_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        writeSize_2_out_ap_vld = 1'b1;
    end else begin
        writeSize_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((or_ln240_fu_258_p2 == 1'd0) & (storedBufferStream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((distStream_2_full_n == 1'b0) & (p_cast == 3'd2)) | ((distStream_3_full_n == 1'b0) & (p_cast == 3'd3)) | ((distStream_4_full_n == 1'b0) & (p_cast == 3'd4)) | ((distStream_5_full_n == 1'b0) & (p_cast == 3'd5)) | ((p_cast == 3'd6) & (distStream_6_full_n == 1'b0)) | ((p_cast == 3'd7) & (distStream_7_full_n == 1'b0)) | ((p_cast == 3'd0) & (distStream_0_full_n == 1'b0)) | ((p_cast == 3'd1) & (distStream_1_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((or_ln240_fu_258_p2 == 1'd0) & (storedBufferStream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((distStream_2_full_n == 1'b0) & (p_cast == 3'd2)) | ((distStream_3_full_n == 1'b0) & (p_cast == 3'd3)) | ((distStream_4_full_n == 1'b0) & (p_cast == 3'd4)) | ((distStream_5_full_n == 1'b0) & (p_cast == 3'd5)) | ((p_cast == 3'd6) & (distStream_6_full_n == 1'b0)) | ((p_cast == 3'd7) & (distStream_7_full_n == 1'b0)) | ((p_cast == 3'd0) & (distStream_0_full_n == 1'b0)) | ((p_cast == 3'd1) & (distStream_1_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((or_ln240_fu_258_p2 == 1'd0) & (storedBufferStream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((distStream_2_full_n == 1'b0) & (p_cast == 3'd2)) | ((distStream_3_full_n == 1'b0) & (p_cast == 3'd3)) | ((distStream_4_full_n == 1'b0) & (p_cast == 3'd4)) | ((distStream_5_full_n == 1'b0) & (p_cast == 3'd5)) | ((p_cast == 3'd6) & (distStream_6_full_n == 1'b0)) | ((p_cast == 3'd7) & (distStream_7_full_n == 1'b0)) | ((p_cast == 3'd0) & (distStream_0_full_n == 1'b0)) | ((p_cast == 3'd1) & (distStream_1_full_n == 1'b0)))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((or_ln240_fu_258_p2 == 1'd0) & (storedBufferStream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((distStream_2_full_n == 1'b0) & (p_cast == 3'd2)) | ((distStream_3_full_n == 1'b0) & (p_cast == 3'd3)) | ((distStream_4_full_n == 1'b0) & (p_cast == 3'd4)) | ((distStream_5_full_n == 1'b0) & (p_cast == 3'd5)) | ((p_cast == 3'd6) & (distStream_6_full_n == 1'b0)) | ((p_cast == 3'd7) & (distStream_7_full_n == 1'b0)) | ((p_cast == 3'd0) & (distStream_0_full_n == 1'b0)) | ((p_cast == 3'd1) & (distStream_1_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_329 = ((or_ln240_fu_258_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign cmp_i_i_fu_245_p2 = ((strdCntr_V_1_fu_98 == 16'd0) ? 1'b1 : 1'b0);

assign cmp_i_i_out = cmp_i_i_fu_245_p2;

assign distStream_0_din = p_Val2_s_reg_351;

assign distStream_1_din = p_Val2_s_reg_351;

assign distStream_2_din = p_Val2_s_reg_351;

assign distStream_3_din = p_Val2_s_reg_351;

assign distStream_4_din = p_Val2_s_reg_351;

assign distStream_5_din = p_Val2_s_reg_351;

assign distStream_6_din = p_Val2_s_reg_351;

assign distStream_7_din = p_Val2_s_reg_351;

assign endBlck_1_fu_308_p2 = (xor_ln246_fu_302_p2 & endBlck_reg_216);

assign endBlck_out = endBlck_reg_216;

assign icmp_ln1065_fu_288_p2 = ((strdCntr_V_3_fu_272_p2 == 16'd4096) ? 1'b1 : 1'b0);

assign icmp_ln240_fu_252_p2 = ((writeSize_2_fu_94 == readSize_1) ? 1'b1 : 1'b0);

assign icmp_ln240_out = icmp_ln240_fu_252_p2;

assign or_ln240_fu_258_p2 = (icmp_ln240_fu_252_p2 | cmp_i_i_fu_245_p2);

assign strdCntr_V_3_fu_272_p2 = (strdCntr_V_1_fu_98 + zext_ln886_fu_268_p1);

assign strdCntr_V_4_fu_294_p3 = ((icmp_ln1065_fu_288_p2[0:0] == 1'b1) ? 16'd0 : strdCntr_V_3_fu_272_p2);

assign trunc_ln674_fu_264_p1 = storedBufferStream_dout[3:0];

assign writeSize_2_out = writeSize_2_fu_94;

assign writeSize_4_fu_282_p2 = (zext_ln245_fu_278_p1 + writeSize_2_fu_94);

assign xor_ln246_fu_302_p2 = (icmp_ln1065_fu_288_p2 ^ 1'd1);

assign zext_ln245_fu_278_p1 = trunc_ln674_fu_264_p1;

assign zext_ln886_fu_268_p1 = trunc_ln674_fu_264_p1;

endmodule //gzipcMulticoreStreaming_multicoreDistributor_Pipeline_VITIS_LOOP_240_2
